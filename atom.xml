<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>憨憨呆呆的IT之旅</title>
  
  <subtitle>我见，我思，我行</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-12-02T10:24:08.944Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>ocre</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>常用的PostgreSQL窗口函数的案例学习</title>
    <link href="http://example.com/2023/11/30/usecases-of-postgresql-window-functions/"/>
    <id>http://example.com/2023/11/30/usecases-of-postgresql-window-functions/</id>
    <published>2023-11-30T01:21:29.000Z</published>
    <updated>2023-12-02T10:24:08.944Z</updated>
    
    <content type="html"><![CDATA[<h3 id="窗口函数简介"><a href="#窗口函数简介" class="headerlink" title="窗口函数简介"></a>窗口函数简介</h3><p>窗口函数主要是用来对表的数值字段做统计分析的。既然是统计分析就必然涉及到多条记录。<br>窗口函数一般配合<code>avg</code>、<code>max</code>等聚合函数一起使用，通过跨越多行记录的统计数据来影响当前行。<br>它们跟普通聚合函数最大的不同在于它们不改变结果集记录行数。<br>窗口函数的调用语法类似：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function_name(expression) over(window_name)</span><br></pre></td></tr></table></figure><p><code>function_name</code>可以为<code>max</code>,<code>min</code>,<code>avg</code>,<code>sum</code>,<code>count</code>等普通聚合函数，也可以为<code>rank</code>,<code>dense_rank</code>等排名函数。<br> <code>over</code>子句确定了窗口划分方法，也就是我们通常意义上说的<code>分组</code>,类似<code>group by</code>。</p><h3 id="窗口函数注意事项"><a href="#窗口函数注意事项" class="headerlink" title="窗口函数注意事项"></a>窗口函数注意事项</h3><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>窗口函数在<code>GROUP BY</code>、<code>HAVING</code>、<code>WHERE</code>子句以及聚合函数之后、排序子句之前执行。因此只允许出现在查询的<code>SELECT</code>和<code>ORDER BY</code>子句中。</p><h3 id="窗口函数案例学习"><a href="#窗口函数案例学习" class="headerlink" title="窗口函数案例学习"></a>窗口函数案例学习</h3><p>下面用一些实际的使用场景来说明窗口函数的作用。</p><h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><p>先准备一些测试数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- postgresql创建自增序列和表结构</span></span><br><span class="line"><span class="keyword">CREATE</span> SEQUENCE employee_empno_seq <span class="keyword">START</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee_tbl (</span><br><span class="line">  empno int4 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> nextval(<span class="string">&#x27;employee_empno_seq&#x27;</span>::regclass),</span><br><span class="line">  empname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  deptname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  salary int4,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (&quot;empno&quot;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 准备测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee_tbl(empno,deptname,empname,salary) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;s1&#x27;</span>,<span class="number">5000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;personnel&#x27;</span>,<span class="string">&#x27;p1&#x27;</span>,<span class="number">3900</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="number">4800</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="number">5000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;personnel&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>,<span class="number">3500</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;personnel&#x27;</span>,<span class="string">&#x27;p3&#x27;</span>,<span class="number">4100</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d1&#x27;</span>,<span class="number">4200</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d2&#x27;</span>,<span class="number">6000</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d3&#x27;</span>,<span class="number">4500</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d4&#x27;</span>,<span class="number">5200</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d5&#x27;</span>,<span class="number">5200</span>);</span><br></pre></td></tr></table></figure><p>准备好的表数据如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary</span><br><span class="line">-------+---------+-----------+--------</span><br><span class="line">     1 | s1      | sales     |   5000</span><br><span class="line">     2 | p1      | personnel |   3900</span><br><span class="line">     3 | s2      | sales     |   4800</span><br><span class="line">     4 | s3      | sales     |   5000</span><br><span class="line">     5 | p2      | personnel |   3500</span><br><span class="line">     6 | p3      | personnel |   4100</span><br><span class="line">     7 | d1      | develop   |   4200</span><br><span class="line">     8 | d2      | develop   |   6000</span><br><span class="line">     9 | d3      | develop   |   4500</span><br><span class="line">    10 | d4      | develop   |   5200</span><br><span class="line">    11 | d5      | develop   |   5200</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><h4 id="统计员工工资和所在部门平均工资的差异百分比"><a href="#统计员工工资和所在部门平均工资的差异百分比" class="headerlink" title="统计员工工资和所在部门平均工资的差异百分比"></a>统计员工工资和所在部门平均工资的差异百分比</h4><p>使用窗口函数计算各部门平均工资：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname)) <span class="keyword">as</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary |      avg_salary</span><br><span class="line">-------+---------+-----------+--------+-----------------------</span><br><span class="line">     1 | s1      | sales     |   5000 | 4933.3333333333333333</span><br><span class="line">     2 | p1      | personnel |   3900 | 3833.3333333333333333</span><br><span class="line">     3 | s2      | sales     |   4800 | 4933.3333333333333333</span><br><span class="line">     4 | s3      | sales     |   5000 | 4933.3333333333333333</span><br><span class="line">     5 | p2      | personnel |   3500 | 3833.3333333333333333</span><br><span class="line">     6 | p3      | personnel |   4100 | 3833.3333333333333333</span><br><span class="line">     7 | d1      | develop   |   4200 | 5020.0000000000000000</span><br><span class="line">     8 | d2      | develop   |   6000 | 5020.0000000000000000</span><br><span class="line">     9 | d3      | develop   |   4500 | 5020.0000000000000000</span><br><span class="line">    10 | d4      | develop   |   5200 | 5020.0000000000000000</span><br><span class="line">    11 | d5      | develop   |   5200 | 5020.0000000000000000</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>对上述sql美化一下,把平均工资取整，再加上员工工资跟部门平均工资的差异比例（这里暂不考虑性能调优啥的）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,(round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname))) <span class="keyword">as</span> avg_salary, round(((salary<span class="operator">/</span>(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname)))<span class="number">-1</span>), <span class="number">2</span>) <span class="keyword">as</span> diff_ratio </span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>最终得到结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | avg_salary | diff_ratio</span><br><span class="line">-------+---------+-----------+--------+------------+------------</span><br><span class="line">     1 | s1      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     2 | p1      | personnel |   3900 |       3833 |       0.02</span><br><span class="line">     3 | s2      | sales     |   4800 |       4933 |      -0.03</span><br><span class="line">     4 | s3      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     5 | p2      | personnel |   3500 |       3833 |      -0.09</span><br><span class="line">     6 | p3      | personnel |   4100 |       3833 |       0.07</span><br><span class="line">     7 | d1      | develop   |   4200 |       5020 |      -0.16</span><br><span class="line">     8 | d2      | develop   |   6000 |       5020 |       0.20</span><br><span class="line">     9 | d3      | develop   |   4500 |       5020 |      -0.10</span><br><span class="line">    10 | d4      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">    11 | d5      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>这样我们就能很直观的看到部门内每个员工工资相对平均工资的偏离情况了。<br>如果窗口函数的<code>over</code>子句括号内容为空，则表示把所有结果集作为一个分组来处理。例如，以下SQL可以在员工工资记录后追加一列“公司平均工资”：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>()) <span class="keyword">as</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | avg_salary</span><br><span class="line">-------+---------+-----------+--------+------------</span><br><span class="line">     1 | s1      | sales     |   5000 |       4673</span><br><span class="line">     2 | p1      | personnel |   3900 |       4673</span><br><span class="line">     3 | s2      | sales     |   4800 |       4673</span><br><span class="line">     4 | s3      | sales     |   5000 |       4673</span><br><span class="line">     5 | p2      | personnel |   3500 |       4673</span><br><span class="line">     6 | p3      | personnel |   4100 |       4673</span><br><span class="line">     7 | d1      | develop   |   4200 |       4673</span><br><span class="line">     8 | d2      | develop   |   6000 |       4673</span><br><span class="line">     9 | d3      | develop   |   4500 |       4673</span><br><span class="line">    10 | d4      | develop   |   5200 |       4673</span><br><span class="line">    11 | d5      | develop   |   5200 |       4673</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><h4 id="按员工工资由高到低排名"><a href="#按员工工资由高到低排名" class="headerlink" title="按员工工资由高到低排名"></a>按员工工资由高到低排名</h4><p>先在全公司排名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, empname, deptname, salary, <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">from</span> employee_tbl;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | rank</span><br><span class="line">-------+---------+-----------+--------+------</span><br><span class="line">     8 | d2      | develop   |   6000 |    1</span><br><span class="line">    11 | d5      | develop   |   5200 |    2</span><br><span class="line">    10 | d4      | develop   |   5200 |    2</span><br><span class="line">     1 | s1      | sales     |   5000 |    4</span><br><span class="line">     4 | s3      | sales     |   5000 |    4</span><br><span class="line">     3 | s2      | sales     |   4800 |    6</span><br><span class="line">     9 | d3      | develop   |   4500 |    7</span><br><span class="line">     7 | d1      | develop   |   4200 |    8</span><br><span class="line">     6 | p3      | personnel |   4100 |    9</span><br><span class="line">     2 | p1      | personnel |   3900 |   10</span><br><span class="line">     5 | p2      | personnel |   3500 |   11</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>接着在各自部门内排名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, empname, deptname, salary, <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">from</span> employee_tbl;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | rank</span><br><span class="line">-------+---------+-----------+--------+------</span><br><span class="line">     8 | d2      | develop   |   6000 |    1</span><br><span class="line">    11 | d5      | develop   |   5200 |    2</span><br><span class="line">    10 | d4      | develop   |   5200 |    2</span><br><span class="line">     9 | d3      | develop   |   4500 |    4</span><br><span class="line">     7 | d1      | develop   |   4200 |    5</span><br><span class="line">     6 | p3      | personnel |   4100 |    1</span><br><span class="line">     2 | p1      | personnel |   3900 |    2</span><br><span class="line">     5 | p2      | personnel |   3500 |    3</span><br><span class="line">     1 | s1      | sales     |   5000 |    1</span><br><span class="line">     4 | s3      | sales     |   5000 |    1</span><br><span class="line">     3 | s2      | sales     |   4800 |    3</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>观察上述两个案例中的<code>rank()</code>得到的排名，如果有并列第N名，则排名序号会不连续。比如上面示例，并列第2名后直接跳到了第4名，没有第3名。如果想要名次编号连续，可以换成<code>dense_rank()</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,<span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">from</span> employee_tbl;</span><br></pre></td></tr></table></figure><p>得到结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | dense_rank</span><br><span class="line">-------+---------+-----------+--------+------------</span><br><span class="line">     8 | d2      | develop   |   6000 |          1</span><br><span class="line">    11 | d5      | develop   |   5200 |          2</span><br><span class="line">    10 | d4      | develop   |   5200 |          2</span><br><span class="line">     1 | s1      | sales     |   5000 |          3</span><br><span class="line">     4 | s3      | sales     |   5000 |          3</span><br><span class="line">     3 | s2      | sales     |   4800 |          4</span><br><span class="line">     9 | d3      | develop   |   4500 |          5</span><br><span class="line">     7 | d1      | develop   |   4200 |          6</span><br><span class="line">     6 | p3      | personnel |   4100 |          7</span><br><span class="line">     2 | p1      | personnel |   3900 |          8</span><br><span class="line">     5 | p2      | personnel |   3500 |          9</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>可见，使用<code>dense_rank()</code>后，并列第2名之后就是并列第3名。</p><h4 id="在员工工资记录后展示各部门工资总额列"><a href="#在员工工资记录后展示各部门工资总额列" class="headerlink" title="在员工工资记录后展示各部门工资总额列"></a>在员工工资记录后展示各部门工资总额列</h4><p>直接使用<code>sum()</code>聚合函数对应的窗口函数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">sum</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname)) <span class="keyword">as</span> dept_total_salary <span class="keyword">from</span> employee_tbl <span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | dept_total_salary</span><br><span class="line">-------+---------+-----------+--------+-------------------</span><br><span class="line">     1 | s1      | sales     |   5000 |             14800</span><br><span class="line">     2 | p1      | personnel |   3900 |             11500</span><br><span class="line">     3 | s2      | sales     |   4800 |             14800</span><br><span class="line">     4 | s3      | sales     |   5000 |             14800</span><br><span class="line">     5 | p2      | personnel |   3500 |             11500</span><br><span class="line">     6 | p3      | personnel |   4100 |             11500</span><br><span class="line">     7 | d1      | develop   |   4200 |             25100</span><br><span class="line">     8 | d2      | develop   |   6000 |             25100</span><br><span class="line">     9 | d3      | develop   |   4500 |             25100</span><br><span class="line">    10 | d4      | develop   |   5200 |             25100</span><br><span class="line">    11 | d5      | develop   |   5200 |             25100</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><h4 id="在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列"><a href="#在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列" class="headerlink" title="在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列"></a>在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列</h4><p>直接使用<code>sum()</code>聚合函数对应的窗口函数, 注意<code>over</code>子句要使用<code>order by</code>：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">sum</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname <span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>)) <span class="keyword">as</span> dept_total_salary <span class="keyword">from</span> employee_tbl <span class="keyword">order</span> <span class="keyword">by</span> deptname <span class="keyword">asc</span>, empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | dept_total_salary</span><br><span class="line">-------+---------+-----------+--------+-------------------</span><br><span class="line">     7 | d1      | develop   |   4200 |              4200</span><br><span class="line">     8 | d2      | develop   |   6000 |             10200</span><br><span class="line">     9 | d3      | develop   |   4500 |             14700</span><br><span class="line">    10 | d4      | develop   |   5200 |             19900</span><br><span class="line">    11 | d5      | develop   |   5200 |             25100</span><br><span class="line">     2 | p1      | personnel |   3900 |              3900</span><br><span class="line">     5 | p2      | personnel |   3500 |              7400</span><br><span class="line">     6 | p3      | personnel |   4100 |             11500</span><br><span class="line">     1 | s1      | sales     |   5000 |              5000</span><br><span class="line">     3 | s2      | sales     |   4800 |              9800</span><br><span class="line">     4 | s3      | sales     |   5000 |             14800</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>这里需要特别注意一下，dept_total_salary是首先按部门分组，再对部门内员工记录按<code>empno</code>升序排序，然后累加计算组内(本例中即部门内)第一条记录到当前记录的工资得到的。</p><h4 id="获取工资前3高的员工"><a href="#获取工资前3高的员工" class="headerlink" title="获取工资前3高的员工"></a>获取工资前3高的员工</h4><p>需要先用窗口函数对员工按工资排序，然后排序号&lt;4的几条记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>)) <span class="keyword">as</span> pos <span class="keyword">from</span> employee_tbl</span><br><span class="line">) <span class="keyword">as</span> a <span class="keyword">where</span> a.pos <span class="operator">&lt;</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure><p>也可以根据需要取前3条记录:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>)) <span class="keyword">as</span> pos <span class="keyword">from</span> employee_tbl</span><br><span class="line">) <span class="keyword">as</span> a limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>)) <span class="keyword">as</span> pos <span class="keyword">from</span> employee_tbl limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure><h4 id="在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资"><a href="#在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资" class="headerlink" title="在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资"></a>在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资</h4><p>这里需要两个窗口函数，可以复用<code>partition by xxx order by yyy</code>部分：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,(<span class="built_in">sum</span>(salary) <span class="keyword">over</span> w) <span class="keyword">as</span> dept_total_salary, round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span> w) <span class="keyword">as</span> avg_salary <span class="keyword">FROM</span> employee_tbl <span class="keyword">WINDOW</span> w <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">partition</span> <span class="keyword">by</span> deptname <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>);</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | dept_total_salary | avg_salary</span><br><span class="line">-------+---------+-----------+-------------------+------------</span><br><span class="line">     7 | d1      | develop   |              4200 |       4200</span><br><span class="line">     9 | d3      | develop   |              8700 |       4350</span><br><span class="line">    10 | d4      | develop   |             19100 |       4775</span><br><span class="line">    11 | d5      | develop   |             19100 |       4775</span><br><span class="line">     8 | d2      | develop   |             25100 |       5020</span><br><span class="line">     5 | p2      | personnel |              3500 |       3500</span><br><span class="line">     2 | p1      | personnel |              7400 |       3700</span><br><span class="line">     6 | p3      | personnel |             11500 |       3833</span><br><span class="line">     3 | s2      | sales     |              4800 |       4800</span><br><span class="line">     1 | s1      | sales     |             14800 |       4933</span><br><span class="line">     4 | s3      | sales     |             14800 |       4933</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure><p>吐槽一下，感觉这个需求好没意义，纯粹为了炫技。<br>同样的，开头计算部门平均工资以及员工工资和部门平均工资偏差比例的sql也可以稍微简化一下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span> w) <span class="keyword">as</span> avg_salary, round(salary<span class="operator">/</span>(<span class="built_in">avg</span>(salary) <span class="keyword">over</span> w)<span class="number">-1</span>, <span class="number">2</span>) <span class="keyword">as</span> diff_ratio </span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">WINDOW</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptname)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure><p>执行结果跟原始语句相同：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | avg_salary | diff_ratio</span><br><span class="line">-------+---------+-----------+--------+------------+------------</span><br><span class="line">     1 | s1      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     2 | p1      | personnel |   3900 |       3833 |       0.02</span><br><span class="line">     3 | s2      | sales     |   4800 |       4933 |      -0.03</span><br><span class="line">     4 | s3      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     5 | p2      | personnel |   3500 |       3833 |      -0.09</span><br><span class="line">     6 | p3      | personnel |   4100 |       3833 |       0.07</span><br><span class="line">     7 | d1      | develop   |   4200 |       5020 |      -0.16</span><br><span class="line">     8 | d2      | develop   |   6000 |       5020 |       0.20</span><br><span class="line">     9 | d3      | develop   |   4500 |       5020 |      -0.10</span><br><span class="line">    10 | d4      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">    11 | d5      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;窗口函数简介&quot;&gt;&lt;a href=&quot;#窗口函数简介&quot; class=&quot;headerlink&quot; title=&quot;窗口函数简介&quot;&gt;&lt;/a&gt;窗口函数简介&lt;/h3&gt;&lt;p&gt;窗口函数主要是用来对表的数值字段做统计分析的。既然是统计分析就必然涉及到多条记录。&lt;br&gt;窗口函数一般配合&lt;</summary>
      
    
    
    
    
    <category term="PostgreSQL" scheme="http://example.com/tags/PostgreSQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>个人最常用的PostgreSQL命令整理</title>
    <link href="http://example.com/2023/11/29/most-useful-postgresql-commands/"/>
    <id>http://example.com/2023/11/29/most-useful-postgresql-commands/</id>
    <published>2023-11-29T02:10:29.000Z</published>
    <updated>2023-12-02T10:23:42.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="psql命令"><a href="#psql命令" class="headerlink" title="psql命令"></a>psql命令</h3><p>列出所有数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -l</span><br></pre></td></tr></table></figure><p>进入指定数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -d my_db_name</span><br></pre></td></tr></table></figure><p>带用户名密码进入指定数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h your_host_name_or_ip -p your_port -U username -W</span><br></pre></td></tr></table></figure><p>执行sql文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -d my_db_name -f a.sql</span><br></pre></td></tr></table></figure><p>通过一条终端指令执行简单操作：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -d my_db_name -c &quot;\dt&quot;</span><br></pre></td></tr></table></figure><p>上述指令可替代如下三条指令构成的操作序列：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">psql -d my_db_name</span><br><span class="line">\dt</span><br><span class="line">\q</span><br></pre></td></tr></table></figure><p>单步执行SQL指令，每一步都要敲回车确认:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -s</span><br></pre></td></tr></table></figure><p>查看版本号：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -V</span><br></pre></td></tr></table></figure><h3 id="数据库信息查看"><a href="#数据库信息查看" class="headerlink" title="数据库信息查看"></a>数据库信息查看</h3><p>查看有哪些用户:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\du</span><br></pre></td></tr></table></figure><p>切换数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\c my_db_name</span><br></pre></td></tr></table></figure><p>查看有哪些数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure><p>查看当前数据库下有哪些表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\dt</span><br></pre></td></tr></table></figure><p>查看某个表的信息:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d my_table_name</span><br></pre></td></tr></table></figure><p>查看有哪些索引:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\di</span><br></pre></td></tr></table></figure><p>查看有哪些表空间：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\db</span><br></pre></td></tr></table></figure><p>退出psql：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure><p>执行外部SQL文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\i a.sql</span><br></pre></td></tr></table></figure><p>把后续执行结果写入外部文件,直到退出psql:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\o output_file.txt</span><br></pre></td></tr></table></figure><p>查看可用指令列表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\?</span><br></pre></td></tr></table></figure><p>查看某个命令的语法帮助:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\h create table</span><br></pre></td></tr></table></figure><h3 id="数据库使用状态查看"><a href="#数据库使用状态查看" class="headerlink" title="数据库使用状态查看"></a>数据库使用状态查看</h3><p>查看数据库占用空间大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_database_size(&#x27;my_test_db&#x27;);</span><br></pre></td></tr></table></figure><p>查看所有数据库占用空间的大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select datname, pg_database_size(datname) AS size from pg_database;</span><br></pre></td></tr></table></figure><p>查看所有数据库占用空间大小，并以KB、MB等可读方式显示:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select datname, pg_size_pretty(pg_database_size(datname)) as size from pg_database;</span><br></pre></td></tr></table></figure><p>查看表或索引大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_relation_size(&#x27;my_table_or_index_name&#x27;);</span><br></pre></td></tr></table></figure><p>查看表的总大小，包括索引:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_size_pretty(pg_total_relation_size(my_table));</span><br></pre></td></tr></table></figure><p>查看表空间大小:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select pg_size_pretty(pg_tablespace_size(&#x27;pg_default&#x27;));</span><br></pre></td></tr></table></figure><h3 id="数据库、用户设置"><a href="#数据库、用户设置" class="headerlink" title="数据库、用户设置"></a>数据库、用户设置</h3><p>创建用户:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create user my_test_user with password &#x27;my_password&#x27;;</span><br></pre></td></tr></table></figure><p>创建数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database my_test_db;</span><br></pre></td></tr></table></figure><p>把数据库分配给用户:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter database my_test_db owner my_test_user;</span><br></pre></td></tr></table></figure><p>直接创建用户并设置属主：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database my_test_db_2 owner my_test_user;</span><br></pre></td></tr></table></figure><p>别忘了把权限赋予用户:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on database my_test_db to my_test_user;</span><br></pre></td></tr></table></figure><p>如果用新创建的数据库用户登录报以下错误：<br><code>psql: error: connection to server on socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; failed: FATAL:  Peer authentication failed for user &quot;my_test_user&quot;</code><br>这是因为，该机器上psql的连接建立于Unix Socket上默认使用peer authentication，必须要用和数据库用户相同的系统用户进行登录。<br>解决办法也简单，要么创建对应的操作系统用户<code>my_test_user</code>后<code>sudo su - my_test_user</code>再用<code>psql -d my_test_db</code>登录，要么把登录认证方式从<code>peer authentiction</code>改为<code>md5</code>。</p><p>如果要收回权限，使用下面语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke all on database my_test_db from my_test_user;</span><br></pre></td></tr></table></figure><p>删除数据库用户，使用下面语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop user my_test_user;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;psql命令&quot;&gt;&lt;a href=&quot;#psql命令&quot; class=&quot;headerlink&quot; title=&quot;psql命令&quot;&gt;&lt;/a&gt;psql命令&lt;/h3&gt;&lt;p&gt;列出所有数据库:&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;tabl</summary>
      
    
    
    
    
    <category term="PostgreSQL" scheme="http://example.com/tags/PostgreSQL/"/>
    
    <category term="Database" scheme="http://example.com/tags/Database/"/>
    
  </entry>
  
  <entry>
    <title>如何用系统命令把文件内容复制到剪贴板</title>
    <link href="http://example.com/2023/11/20/how-to-copy-file-content-to-clipboard/"/>
    <id>http://example.com/2023/11/20/how-to-copy-file-content-to-clipboard/</id>
    <published>2023-11-20T04:15:32.000Z</published>
    <updated>2023-11-20T03:11:55.399Z</updated>
    
    <content type="html"><![CDATA[<p>换电脑后需要给<code>github</code>配置新的<code>ssh key</code>以便于通过<code>ssh</code>协议免密<code>push</code>代码。使用<code>ssh-keygen -t rsa -C &quot;xx@xx.com&quot;</code> 在本机生成<code>ssh密钥对</code>后，需要把<code>~/.id_rsa.pub</code>公钥文件的内容复制出来，再粘贴到<code>github</code>账号里。通常做法是用诸如记事本、notpad++等文本编辑软件直接打开<code>id_rsa.pub</code>文件，然后<code>Ctrl+A</code>、<code>Ctrl+C</code>复制到系统剪贴板即可。不过为了显得有技术范(装逼)，想试试直接用命令行执行这一动作。一时记不起来windows下如何用命令行复制文件内容了，查了些资料，整理如下。</p><h4 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows PowerShell"></a>Windows PowerShell</h4><p>对于<code>PowerShell</code>, 直接使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub | clip</span><br></pre></td></tr></table></figure><h4 id="Windows-CommandLine"><a href="#Windows-CommandLine" class="headerlink" title="Windows CommandLine"></a>Windows CommandLine</h4><p>对于传统的<code>cmd</code>命令行，直接使用如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clip &lt; id_rsa.pub</span><br></pre></td></tr></table></figure><h3 id="Linux-Shell"><a href="#Linux-Shell" class="headerlink" title="Linux Shell"></a>Linux Shell</h3><p>对于<code>Linux</code>系统来说，反倒比较麻烦一点点，需要先安装外部小工具，<code>xsel</code>、<code>xclip</code>, 使用<code>yum</code>或<code>apt-get</code>安装都可以。<br>如果是<code>xclip</code>，直接用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub | xclip</span><br></pre></td></tr></table></figure><p>如果是<code>xsel</code>, 使用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat id_rsa.pub | xsel</span><br></pre></td></tr></table></figure><p>内容将复制到系统剪贴板。注意，一般云厂商提供的服务器没有配置输入输出设备，这俩命令都无效。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;换电脑后需要给&lt;code&gt;github&lt;/code&gt;配置新的&lt;code&gt;ssh key&lt;/code&gt;以便于通过&lt;code&gt;ssh&lt;/code&gt;协议免密&lt;code&gt;push&lt;/code&gt;代码。使用&lt;code&gt;ssh-keygen -t rsa -C &amp;quot;xx@xx.c</summary>
      
    
    
    
    
    <category term="DevOps" scheme="http://example.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>pandas中如何合并DataFrame的两列</title>
    <link href="http://example.com/2023/11/20/how-to-merge-two-dataframe-columns-with-pandas/"/>
    <id>http://example.com/2023/11/20/how-to-merge-two-dataframe-columns-with-pandas/</id>
    <published>2023-11-20T04:15:32.000Z</published>
    <updated>2023-12-01T02:35:17.631Z</updated>
    
    <content type="html"><![CDATA[<p>如下DataFrame, 一列日期，一列时间，现需要把日期和时间合并为一列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">&#x27;2023-01-05&#x27;</span>,<span class="string">&#x27;0930&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;2023-01-05&#x27;</span>,<span class="string">&#x27;0935&#x27;</span>,<span class="number">200</span>],[<span class="string">&#x27;2023-01-05&#x27;</span>,<span class="string">&#x27;0940&#x27;</span>,<span class="number">333</span>]],columns=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;数量&#x27;</span>])</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">       日期    时间   数量</span><br><span class="line">0  2023-01-05  0930  100</span><br><span class="line">1  2023-01-05  0935  200</span><br><span class="line">2  2023-01-05  0940  333</span><br></pre></td></tr></table></figure><p>最简单的做法是直接两列按字符串拼接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间1&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + df[<span class="string">&#x27;时间&#x27;</span>]</span><br></pre></td></tr></table></figure><p>如果要合并的列不是字符串，则需显式转化一下再合并：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间2&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>].astype(<span class="built_in">str</span>) + <span class="string">&#x27; &#x27;</span> + df[<span class="string">&#x27;时间&#x27;</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>还可以这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间3&#x27;</span>] = df[[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>]].apply(<span class="keyword">lambda</span> x: <span class="string">&#x27; &#x27;</span>.join(x), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间4&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;日期&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + x[<span class="string">&#x27;时间&#x27;</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>如果要合并的列中有<code>nan</code>,则可以使用这个：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间5&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>].<span class="built_in">str</span>.cat(df[<span class="string">&#x27;时间&#x27;</span>], sep=<span class="string">&#x27; &#x27;</span>, na_rep=<span class="string">&#x27;?&#x27;</span>)</span><br></pre></td></tr></table></figure><p>最后效果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">df</span></span></span><br><span class="line">       日期    时间   数量      日期时间1        日期时间2        日期时间3         日期时间4        日期时间5</span><br><span class="line">0  2023-01-05  0930  100  2023-01-05 0930  2023-01-05 0930  2023-01-05 0930  2023-01-05 0930  2023-01-05 0930</span><br><span class="line">1  2023-01-05  0935  200  2023-01-05 0935  2023-01-05 0935  2023-01-05 0935  2023-01-05 0935  2023-01-05 0935</span><br><span class="line">2  2023-01-05  0940  333  2023-01-05 0940  2023-01-05 0940  2023-01-05 0940  2023-01-05 0940  2023-01-05 0940</span><br></pre></td></tr></table></figure><p>完毕！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如下DataFrame, 一列日期，一列时间，现需要把日期和时间合并为一列。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>pandas中如何合并DataFrame多行记录</title>
    <link href="http://example.com/2023/11/20/how-to-reduce-dataframe-columns-with-pandas/"/>
    <id>http://example.com/2023/11/20/how-to-reduce-dataframe-columns-with-pandas/</id>
    <published>2023-11-20T04:15:32.000Z</published>
    <updated>2023-11-20T07:05:40.262Z</updated>
    
    <content type="html"><![CDATA[<p>如下DataFrame, 有三个列<code>site</code>、<code>material</code>、<code>LT</code>，现需要根据<code>material</code>把<code>site</code>去重后合并，并取出<code>LT</code>最大值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;A123&#x27;</span>,<span class="number">123</span>],</span><br><span class="line">       [<span class="string">&#x27;FOC&#x27;</span>,<span class="string">&#x27;A123&#x27;</span>,<span class="number">456</span>],</span><br><span class="line">       [<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;B456&#x27;</span>,<span class="number">112</span>],</span><br><span class="line">       [<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;B456&#x27;</span>,<span class="number">245</span>],</span><br><span class="line">       [<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;B456&#x27;</span>,<span class="number">110</span>],</span><br><span class="line">       [<span class="string">&#x27;FOC&#x27;</span>,<span class="string">&#x27;C789&#x27;</span>,<span class="number">202</span>],</span><br><span class="line">       [<span class="string">&#x27;FOC&#x27;</span>,<span class="string">&#x27;C789&#x27;</span>,<span class="number">205</span>]],columns=[<span class="string">&#x27;site&#x27;</span>,<span class="string">&#x27;material&#x27;</span>,<span class="string">&#x27;LT&#x27;</span>])</span><br></pre></td></tr></table></figure><p>原始DataFrame数据如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  site material   LT</span><br><span class="line">0  FJZ     A123  123</span><br><span class="line">1  FOC     A123  456</span><br><span class="line">2  FJZ     B456  112</span><br><span class="line">3  FJZ     B456  245</span><br><span class="line">4  FJZ     B456  110</span><br><span class="line">5  FOC     C789  202</span><br><span class="line">6  FOC     C789  205</span><br></pre></td></tr></table></figure><p>直接<code>groupby</code>后<code>join</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;material&#x27;</span>).agg(&#123;<span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;,&#x27;</span>.join, <span class="string">&#x27;LT&#x27;</span>: <span class="built_in">max</span>&#125;).reset_index()</span><br></pre></td></tr></table></figure><p>处理后数据如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  material         site   LT</span><br><span class="line">0     A123      FJZ,FOC  456</span><br><span class="line">1     B456  FJZ,FJZ,FJZ  245</span><br><span class="line">2     C789      FOC,FOC  205</span><br></pre></td></tr></table></figure><p>第二行数据中，<code>site</code>列的<code>FJZ</code>出现了重复。<br>这里我们换一种思路，由于<code>site</code>列涉及去重、拼接两个步骤，可以先定义一个处理函数，把这两个步骤串起来。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">agg_func</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">set</span>(items))</span><br></pre></td></tr></table></figure><p>然后再调用这个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;material&#x27;</span>).agg(&#123;<span class="string">&#x27;site&#x27;</span>: agg_func, <span class="string">&#x27;LT&#x27;</span>: <span class="built_in">max</span>&#125;).reset_index()</span><br></pre></td></tr></table></figure><p>最后效果如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  material     site   LT</span><br><span class="line">0     A123  FJZ,FOC  456</span><br><span class="line">1     B456      FJZ  245</span><br><span class="line">2     C789      FOC  205</span><br></pre></td></tr></table></figure><p>完毕！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如下DataFrame, 有三个列&lt;code&gt;site&lt;/code&gt;、&lt;code&gt;material&lt;/code&gt;、&lt;code&gt;LT&lt;/code&gt;，现需要根据&lt;code&gt;material&lt;/code&gt;把&lt;code&gt;site&lt;/code&gt;去重后合并，并取出&lt;code&gt;LT&lt;/c</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
    <category term="数据分析" scheme="http://example.com/tags/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>我是如何一步步配置nodejs的</title>
    <link href="http://example.com/2023/11/20/log-my-nodejs-config-step-by-step/"/>
    <id>http://example.com/2023/11/20/log-my-nodejs-config-step-by-step/</id>
    <published>2023-11-20T04:15:32.000Z</published>
    <updated>2023-11-20T06:07:20.789Z</updated>
    
    <content type="html"><![CDATA[<p>需要在新电脑安装<code>node.js</code>环境，记录步骤如下。</p><h4 id="下载安装NodeJs"><a href="#下载安装NodeJs" class="headerlink" title="下载安装NodeJs"></a>下载安装NodeJs</h4><p><code>node.js</code>版本更新较频繁，上一次安装我用的还是10.x, 现在已经17.x了。<br>由于之前遇到过安装太高版本的<code>node.js</code>后装不上<code>node-sass</code>的问题，这次特意先查询了一下网上资料，发现16.x系列有对应的成功案例，所以选了16系列。<br>先从官网下载了<code>node.js</code>16系列目前最新版本<code>V16.20.2</code>的<code>msi</code>安装包，双击安装包一路next安装即可。<br>安装完后，打开新的<code>cmd</code>窗口，运行<code>node -v</code>和<code>npm -v</code>命令检查一下是否成功。我得到的命令行反馈版本号分别是<code>v16.20.2</code>和<code>8.19.4</code>。</p><h4 id="配置npm缓存目录到非系统盘"><a href="#配置npm缓存目录到非系统盘" class="headerlink" title="配置npm缓存目录到非系统盘"></a>配置npm缓存目录到非系统盘</h4><p>血泪教训，之前没在意npm缓存目录，所有包文件都默认装到的C盘，导致后来我C盘空间极度紧张。而且npm的包大部分都是一堆小文件，删起来特别费时间。这次特意解决这个问题。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Tools\AppData\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\Tools\AppData\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure><p>然后配置系统环境变量，在用户变量<code>Path</code>中增加路径：<code>D:\Tools\AppData\nodejs\node_global</code>，在系统变量中新增<code>NODE_PATH</code>指向<code>D:\Tools\AppData\nodejs\node_global\node_modules</code>。这里主要是为了解决之后<code>npm install -g xxx</code>找不到命令的问题。</p><h4 id="配置npm镜像加速"><a href="#配置npm镜像加速" class="headerlink" title="配置npm镜像加速"></a>配置npm镜像加速</h4><p>受够了外网蜗牛般的速度，果断换成国内镜像：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="关闭strict-ssl模式"><a href="#关闭strict-ssl模式" class="headerlink" title="关闭strict-ssl模式"></a>关闭strict-ssl模式</h4><p>解决报错<code>Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to &#39;0&#39; makes TLS connections and HTTPS requests insecure by disabling certificate verification.</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure><h4 id="安装node-sass"><a href="#安装node-sass" class="headerlink" title="安装node-sass"></a>安装node-sass</h4><p>首先设置国内镜像地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure><p>然后执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install node-sass@6.0.1 -g</span><br><span class="line">npm install sass-loader@10.2.0 -g</span><br></pre></td></tr></table></figure><h4 id="可选安装-hexo、vue等"><a href="#可选安装-hexo、vue等" class="headerlink" title="可选安装 hexo、vue等"></a>可选安装 hexo、vue等</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure><p>完毕！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;需要在新电脑安装&lt;code&gt;node.js&lt;/code&gt;环境，记录步骤如下。&lt;/p&gt;
&lt;h4 id=&quot;下载安装NodeJs&quot;&gt;&lt;a href=&quot;#下载安装NodeJs&quot; class=&quot;headerlink&quot; title=&quot;下载安装NodeJs&quot;&gt;&lt;/a&gt;下载安装NodeJs</summary>
      
    
    
    
    
    <category term="DevOps" scheme="http://example.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>在阿里云OS里安装nodejs</title>
    <link href="http://example.com/2022/07/26/install-nodejs-for-aliyunos/"/>
    <id>http://example.com/2022/07/26/install-nodejs-for-aliyunos/</id>
    <published>2022-07-26T01:38:21.000Z</published>
    <updated>2022-07-26T10:29:52.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><p>安装方式分两种: 一种是nvm安装多版本, 一种是使用二进制文件安装. 这里采用nvm方式安装.<br>步骤如下:</p><p>首先, 使用git拉取nvm代码:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/cnpm/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`</span><br></pre></td></tr></table></figure><p>然后, 激活nvm:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;. ~/.nvm/nvm.sh&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure><p>激活后即可ls出所支持的node版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list-remote</span><br></pre></td></tr></table></figure><p>选择一个版本号执行安装, 安装命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install v14.20.0</span><br></pre></td></tr></table></figure><p>检查已安装版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><p>切换到目标版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use v14.20.0</span><br></pre></td></tr></table></figure><p>查看当前node版本:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><h2 id="退出后找不到-node-及-npm-命令问题"><a href="#退出后找不到-node-及-npm-命令问题" class="headerlink" title="退出后找不到 node 及 npm 命令问题"></a>退出后找不到 node 及 npm 命令问题</h2><p>退出云服务器再次登录后, 执行<code>node -v</code>, 会报错: <code>node: command not found</code>.<br>这时, 需要先<code>nvm use v14.20.0</code>一下, 然后查找一下node可执行文件路径:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whereis node</span><br></pre></td></tr></table></figure><p>比如我的路径是: <code>/root/.nvm/versions/node/v14.20.0/bin/node</code>,<br>这里可以建立一个指向node可执行文件路径的软链接:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /root/.nvm/versions/node/v14.20.0/bin/node /usr/local/bin/node</span><br></pre></td></tr></table></figure><p>这样就可以在重新登录后继续使用<code>node</code>命令了. </p><p><code>nvm</code>命令也需要按上述步骤处理一下.</p><h4 id="小尾巴"><a href="#小尾巴" class="headerlink" title="小尾巴"></a>小尾巴</h4><p>显然, 这种处理方式不完美, 每次切换到不同node版本后, 需要重新建一遍软链接, 指向当前node版本.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;安装Node环境&quot;&gt;&lt;a href=&quot;#安装Node环境&quot; class=&quot;headerlink&quot; title=&quot;安装Node环境&quot;&gt;&lt;/a&gt;安装Node环境&lt;/h2&gt;&lt;p&gt;安装方式分两种: 一种是nvm安装多版本, 一种是使用二进制文件安装. 这里采用nvm方式安</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
    <category term="node.js" scheme="http://example.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>简单三步实现ssh免密登录</title>
    <link href="http://example.com/2022/07/15/ssh-auto-login-no-password/"/>
    <id>http://example.com/2022/07/15/ssh-auto-login-no-password/</id>
    <published>2022-07-15T01:38:21.000Z</published>
    <updated>2022-07-15T02:04:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单三步实现ssh免密登录"><a href="#简单三步实现ssh免密登录" class="headerlink" title="简单三步实现ssh免密登录"></a>简单三步实现ssh免密登录</h2><p>假设我们有两台Linux服务器A(172.22.170.149), B(172.22.170.148), 现在要配置A免密登录B. 操作步骤如下:</p><h3 id="先人工登录一次"><a href="#先人工登录一次" class="headerlink" title="先人工登录一次"></a>先人工登录一次</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@172.22.170.148</span><br></pre></td></tr></table></figure><p>第一次登录时, 会提示是否把对方机器加入当前机器的已知host列表里(类似白名单).  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &#x27;172.22.170.148 (172.22.170.148)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:78SJbYxxxxxxxxxxxxxxxxxxxxxxxxwvB2F3up7VI.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br></pre></td></tr></table></figure><p>输入<code>yes</code>继续.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added &#x27;172.22.170.148&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@172.22.170.148&#x27;s password: 这里输入密码</span><br></pre></td></tr></table></figure><p>按提示输入密码即可成功登录服务器B.  出现类似以下提示即表示登录成功(这里是阿里云的ECS服务器).</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">Last login: Fri Jul 15 09:40:47 2022 from 101.206.167.221</span><br><span class="line">[root@iZ8vb0nljx0sx0od8wvle6Z ~]#</span><br></pre></td></tr></table></figure><p>然后输入<code>exit</code>退出服务器B, 返回服务器A.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><h3 id="在A服务器生成密钥对"><a href="#在A服务器生成密钥对" class="headerlink" title="在A服务器生成密钥对"></a>在A服务器生成密钥对</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure><p>出现交互选择信息时, 一路回车即可.</p><h3 id="传输A服务的公钥到B服务器"><a href="#传输A服务的公钥到B服务器" class="headerlink" title="传输A服务的公钥到B服务器"></a>传输A服务的公钥到B服务器</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-copy-id 172.22.170.148</span><br></pre></td></tr></table></figure><p>这里要再输入一次密码. 才能把公钥传过去. </p><p>然后A服务器就可以ssh免密登录B服务器了.</p><h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>使用如下命令验证免密登录是否成功:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh root@172.22.170.148</span><br></pre></td></tr></table></figure><p> 快来动手试试吧!</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简单三步实现ssh免密登录&quot;&gt;&lt;a href=&quot;#简单三步实现ssh免密登录&quot; class=&quot;headerlink&quot; title=&quot;简单三步实现ssh免密登录&quot;&gt;&lt;/a&gt;简单三步实现ssh免密登录&lt;/h2&gt;&lt;p&gt;假设我们有两台Linux服务器A(172.22.17</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://example.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SQL基础面试题整理-表结构</title>
    <link href="http://example.com/2022/06/25/sql-basic-interview-questions-example/"/>
    <id>http://example.com/2022/06/25/sql-basic-interview-questions-example/</id>
    <published>2022-06-25T03:49:51.000Z</published>
    <updated>2022-06-29T09:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SQL基础面试题整理"><a href="#SQL基础面试题整理" class="headerlink" title="SQL基础面试题整理"></a>SQL基础面试题整理</h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><ul><li>学生表<br>  Student(s_id,s_name,s_birth,s_sex) –学生编号,学生姓名, 出生年月,学生性别</li><li>课程表<br>  Course(c_id,c_name,t_id) – –课程编号, 课程名称, 教师编号</li><li>教师表<br>  Teacher(t_id,t_name) –教师编号,教师姓名</li><li>成绩表<br>  Score(s_id,c_id,s_score) –学生编号,课程编号,分数</li></ul><h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ol><li>查询平均成绩大于60分的学生的学号和平均成绩</li><li>查询所有学生的学号、姓名、选课数、总成绩</li><li>查询没学过“张三”老师课的学生的学号、姓名</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> s_id, s_name <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> s_id <span class="keyword">from</span> score a, course b, teacher c</span><br><span class="line">    <span class="keyword">where</span> a.c_id <span class="operator">=</span> b.c_id <span class="keyword">and</span> b.t_id <span class="operator">=</span> c.t_id <span class="keyword">and</span> c.t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>​4. 其他问题 <a href="https://zhuanlan.zhihu.com/p/43289968">https://zhuanlan.zhihu.com/p/43289968</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.book_main_id, b.name, b.author, b.last_update_time, b.last_update_content <span class="keyword">from</span> (<span class="keyword">select</span> author, <span class="built_in">max</span>(last_update_time) <span class="keyword">as</span> last_update_time <span class="keyword">from</span> book_main <span class="keyword">where</span> author <span class="keyword">in</span> (<span class="string">&#x27;$authors_str&#x27;</span>) <span class="keyword">group</span> <span class="keyword">by</span> author) <span class="keyword">as</span> a, book_main <span class="keyword">as</span> b <span class="keyword">where</span> a.author<span class="operator">=</span>b.author <span class="keyword">and</span> a.last_update_time<span class="operator">=</span>b.last_update_time&quot;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;SQL基础面试题整理&quot;&gt;&lt;a href=&quot;#SQL基础面试题整理&quot; class=&quot;headerlink&quot; title=&quot;SQL基础面试题整理&quot;&gt;&lt;/a&gt;SQL基础面试题整理&lt;/h2&gt;&lt;h3 id=&quot;表结构&quot;&gt;&lt;a href=&quot;#表结构&quot; class=&quot;header</summary>
      
    
    
    
    
    <category term="SQL" scheme="http://example.com/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>命令行导出MySQL数据库表数据示例</title>
    <link href="http://example.com/2022/06/22/dump-mysql-database-table/"/>
    <id>http://example.com/2022/06/22/dump-mysql-database-table/</id>
    <published>2022-06-22T05:59:10.000Z</published>
    <updated>2022-06-22T13:09:32.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令行导出MySQL数据库表数据示例"><a href="#命令行导出MySQL数据库表数据示例" class="headerlink" title="命令行导出MySQL数据库表数据示例"></a>命令行导出MySQL数据库表数据示例</h2><ul><li><p>导出所有数据库所有表:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --all-databases &gt; ./all_dbs_data.sql</span><br></pre></td></tr></table></figure></li><li><p>导出<code>db1</code>, <code>db2</code>数据库:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --databases db1 db2 &gt; ./db1_db2_data.sql</span><br></pre></td></tr></table></figure></li><li><p>导出<code>db1</code>数据库的<code>t1</code>,<code>t2</code>表:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --databases db1 --tables t1 t2 &gt; ./db1_t1_t2_data.sql</span><br></pre></td></tr></table></figure></li><li><p>导出<code>db1</code>数据库的<code>t1</code>表中<code>id=1</code>的数据:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --databases db1 --tables t1 --where=&#x27;id=1&#x27; &gt; ./t1_w1.sql</span><br></pre></td></tr></table></figure></li><li><p>只导出表结构, 不含数据:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --no-data --databases db1 --tables t1 &gt; ./t1_structure.sql</span><br></pre></td></tr></table></figure></li><li><p>导出远程MySQL服务器的数据:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hhost -Pport -uroot -ppassword --databases db1 &gt; ./remote_db1_data.sql</span><br></pre></td></tr></table></figure></li><li><p>从<code>host1</code>服务器导出<code>db1.tb1</code>表数据,然后导入到<code>host2</code>服务器的<code>db2.tb1</code>表(会自动建表):</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -hhost1 -Pport1 -uroot1 -ppassword1 --databases db1 --tables t1 | mysql -hhost2 -Pport2 -uroot2 -ppassword2 db2</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;命令行导出MySQL数据库表数据示例&quot;&gt;&lt;a href=&quot;#命令行导出MySQL数据库表数据示例&quot; class=&quot;headerlink&quot; title=&quot;命令行导出MySQL数据库表数据示例&quot;&gt;&lt;/a&gt;命令行导出MySQL数据库表数据示例&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    
    <category term="MySQL" scheme="http://example.com/tags/MySQL/"/>
    
    <category term="example" scheme="http://example.com/tags/example/"/>
    
  </entry>
  
  <entry>
    <title>身份证号输入框中间用星号显示</title>
    <link href="http://example.com/2020/10/19/mask-input-field-value-with-star/"/>
    <id>http://example.com/2020/10/19/mask-input-field-value-with-star/</id>
    <published>2020-10-19T08:08:32.000Z</published>
    <updated>2023-11-20T02:27:39.772Z</updated>
    
    <content type="html"><![CDATA[<p>接到一个需求，有一个输入框，用来显示用户的身份证号。要求显示时只显示身份证号的前4位和后4位，中间用星号代替。支持用户修改身份证号。</p><p>实现思路如下：</p><ol><li>写两个input输入框，姑且称为input1和input2，input1用来保存正确的身份证号、表单验证、提交都读取input1的值。input2用来显示星号处理过的身份证号，并处理用户按键编辑。</li><li>给input2绑定3个事件，keyup、focusin、focusout。focusin时从input1读取正确身份证号填充给input2，keyup时将用户修改后的身份证号写回到input1，focusout时触发input1的表单验证。</li></ol><p>具体代码如下：<br>首先，上index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;dataForm&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>身份证:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;int-text valid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;p_legalCertNum&quot;</span> <span class="attr">name</span>=<span class="string">&quot;plegalCertNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">aria-invalid</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 0.5px;width: 0;padding: 0;margin: 0;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;legalCertNum&quot;</span> <span class="attr">name</span>=<span class="string">&quot;legalCertNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;511102199010162531&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;legalCertNumError&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ash&quot;</span> <span class="attr">id</span>=<span class="string">&quot;legalCertNumText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Javascript代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.validate.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">var</span> formValidator=$(<span class="string">&quot;#dataForm&quot;</span>).<span class="title function_">validate</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">rules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">legalCertNum</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">required</span>:<span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">regexp</span>: <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">digits</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">messages</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">legalCertNum</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="attr">regexp</span>: <span class="string">&#x27;身份证号格式错误&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> $realInput = $(<span class="string">&#x27;#legalCertNum&#x27;</span>), $showInput = $(<span class="string">&#x27;#p_legalCertNum&#x27;</span>), _that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// init value on page load</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">val</span>(<span class="variable language_">this</span>.<span class="title function_">_maskIdCard</span>($realInput.<span class="title function_">val</span>()));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// register events</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">bind</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $realInput.<span class="title function_">val</span>($showInput.<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">bind</span>(<span class="string">&#x27;focusin&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $(<span class="variable language_">this</span>).<span class="title function_">val</span>($(<span class="string">&#x27;#legalCertNum&#x27;</span>).<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">bind</span>(<span class="string">&#x27;focusout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  formValidator.<span class="title function_">element</span>($realInput[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $(<span class="variable language_">this</span>).<span class="title function_">val</span>(_that.<span class="title function_">_maskIdCard</span>($realInput.<span class="title function_">val</span>()));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;接到一个需求，有一个输入框，用来显示用户的身份证号。要求显示时只显示身份证号的前4位和后4位，中间用星号代替。支持用户修改身份证号。&lt;/p&gt;
&lt;p&gt;实现思路如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写两个input输入框，姑且称为input1和input2，input1用来保存正确</summary>
      
    
    
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Node.js开发常用命令</title>
    <link href="http://example.com/2020/10/10/node-js-development-common-commands/"/>
    <id>http://example.com/2020/10/10/node-js-development-common-commands/</id>
    <published>2020-10-10T06:17:23.000Z</published>
    <updated>2023-11-20T02:27:39.774Z</updated>
    
    <content type="html"><![CDATA[<h4 id="node多版本管理工具-nvm"><a href="#node多版本管理工具-nvm" class="headerlink" title="node多版本管理工具 nvm"></a>node多版本管理工具 nvm</h4><ul><li>nvm list</li><li>nvm current</li><li>nvm install stable</li><li>nvm install 9.2.0</li><li>nvm use 9.2.0</li></ul><h4 id="包管理工具-npm"><a href="#包管理工具-npm" class="headerlink" title="包管理工具 npm"></a>包管理工具 npm</h4><ul><li>npm list -g –depth 0</li><li>npm install webpack -g</li><li>npm install # 安装依赖</li><li>npm run init  # 项目初始化</li><li>npm run dev  # 运行测试环境</li><li>npm run build  # 生产环境打包</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;node多版本管理工具-nvm&quot;&gt;&lt;a href=&quot;#node多版本管理工具-nvm&quot; class=&quot;headerlink&quot; title=&quot;node多版本管理工具 nvm&quot;&gt;&lt;/a&gt;node多版本管理工具 nvm&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;nvm list&lt;/li</summary>
      
    
    
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>raw.githubusercontent.com拒绝连接</title>
    <link href="http://example.com/2020/10/10/a-solution-to-raw.githubusercontent.com-connection-refuse/"/>
    <id>http://example.com/2020/10/10/a-solution-to-raw.githubusercontent.com-connection-refuse/</id>
    <published>2020-10-10T04:28:31.000Z</published>
    <updated>2023-11-20T02:27:39.758Z</updated>
    
    <content type="html"><![CDATA[<p>今天安装一个来自github的脚本，需要从raw.githubusercontent.com下载安装，但是一直提示拒绝连接。<br>一般这种情况就是域名查询过程中被墙了。<br>解决思路很简单，找到这个域名的香港ip，直接在host文件中配置一下，绕过域名查询就可以了。</p><p>香港ip可以从这里获取: <a href="https://site.ip138.com/raw.githubusercontent.com/">https://site.ip138.com/raw.githubusercontent.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;今天安装一个来自github的脚本，需要从raw.githubusercontent.com下载安装，但是一直提示拒绝连接。&lt;br&gt;一般这种情况就是域名查询过程中被墙了。&lt;br&gt;解决思路很简单，找到这个域名的香港ip，直接在host文件中配置一下，绕过域名查询就可以了。&lt;/</summary>
      
    
    
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Git手动打标签</title>
    <link href="http://example.com/2020/10/02/common-git-tag-usage/"/>
    <id>http://example.com/2020/10/02/common-git-tag-usage/</id>
    <published>2020-10-02T02:33:21.000Z</published>
    <updated>2023-11-20T02:27:39.760Z</updated>
    
    <content type="html"><![CDATA[<p>使用git很久了，以前都是直接用<code>git-flow</code>来管理git工作流，对标签tag的管理都由<code>git-flow</code>脚本封装好，自动完成了。这次因为项目特殊，需要每日手动打标签tag，特地记录一下。</p><h5 id="git标签分类"><a href="#git标签分类" class="headerlink" title="git标签分类"></a>git标签分类</h5><p>git的标签分两种：轻量标签(lightweight) 和 附注标签(annotated)。轻量标签义如其名，仅仅是对某个commit的一个引用。附注标签则是存储于git数据库中的一个完整对象，包含了打标签者的名字、email、日期时间、以及标签信息，并且可以GPG签名验证。<br>一般我们建议创建附注标签。</p><h5 id="列举标签"><a href="#列举标签" class="headerlink" title="列举标签"></a>列举标签</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure><h5 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git show v20201002-1</span><br></pre></td></tr></table></figure><h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><p>创建附注标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -a v20201002-1 -m &quot;new feature: dropbox support&quot;</span><br></pre></td></tr></table></figure><p>创建轻量标签：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag v20201002-1w</span><br></pre></td></tr></table></figure><h5 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h5><p>从本地仓库删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git tag -d v20201002-1</span><br></pre></td></tr></table></figure><p>从远程仓库删除：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete v20201002-1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;使用git很久了，以前都是直接用&lt;code&gt;git-flow&lt;/code&gt;来管理git工作流，对标签tag的管理都由&lt;code&gt;git-flow&lt;/code&gt;脚本封装好，自动完成了。这次因为项目特殊，需要每日手动打标签tag，特地记录一下。&lt;/p&gt;
&lt;h5 id=&quot;git标</summary>
      
    
    
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>Mac下安装tomcat</title>
    <link href="http://example.com/2020/09/28/install-tomcat-macos-catalina/"/>
    <id>http://example.com/2020/09/28/install-tomcat-macos-catalina/</id>
    <published>2020-09-28T08:45:00.000Z</published>
    <updated>2023-11-20T02:27:39.766Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>提示：Tomcat依赖Java运行环境，没装java的先安装java</p></blockquote><ol><li><p>从<a href="https://tomcat.apache.org/download-native.cgi">Tomcat官网</a>下载所需版本。因为是Mac系统，我们选择*.tar.gz<em>后缀或</em>.zip*后缀的。</p></li><li><p>下载完成后Finder进入下载文件夹（默认为~&#x2F;Downloads），双击所下载的tar.gz压缩文件，Mac会自动解压并创建同名目录，比如，我的是<code>apache-tomcat-8.5.58</code>。</p></li><li><p>解压缩之后，其实就算安装完毕了。可直接运行<code>bin/startup.sh</code>启动tomcat。我比较追求完美，把tomcat移动到了专门安装软件的<code>/usr/local</code>目录下，具体操作见后续步骤。</p></li><li><p>移动tomcat至<code>/usr/local</code>目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo mv ~/Downloads/apache-tomcat-8.5.58 /usr/local/</span><br></pre></td></tr></table></figure></li><li><p>创建软连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/local/apache-tomcat-8.5.58 /Library/Tomcat</span><br></pre></td></tr></table></figure></li><li><p>测试启动、关闭脚本<br>终端直接输入启动脚本并执行，如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure><p>关闭脚本跟启动脚本在同一个目录下，名字为<code>shutdown.sh</code>。</p></li><li><p>验证安装。<br>打开 <code>http://localhost:8080/</code>，看到Tomcat页面则说明安装成功。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;提示：Tomcat依赖Java运行环境，没装java的先安装java&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从&lt;a href=&quot;https://tomcat.apache.org/download-native.cgi&quot;&gt;To</summary>
      
    
    
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>面向对象的常用设计原则</title>
    <link href="http://example.com/2020/09/15/java-oop-7-principles/"/>
    <id>http://example.com/2020/09/15/java-oop-7-principles/</id>
    <published>2020-09-15T07:19:23.000Z</published>
    <updated>2023-11-20T02:27:39.769Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>世上唯一不变的是变化。</p></blockquote><p>相对于其他实物，软件从写下第一行代码开始就不断反复变化。为了应对各种变化，需要一些通用的设计原则和模式来指导日常开发。<br>面向对象诞生至今早已超过半个世纪，大量前辈们早就探索和总结出了一些列设计原则和设计模式。学好面向对象开发好比学好一门武功，设计原则是内功心法，设计模式是招式套路。心法和套路相辅相成，都是不可或缺的一环。</p><p>面向对象有七个设计原则：</p><ol><li>开放封闭原则</li><li>里氏替换原则</li><li>依赖倒置原则</li><li>接口隔离原则</li><li>迪米特法则(最少知道原则)</li><li>单一职责原则</li><li>合成复用原则<br>下面分别简单描述一下。</li></ol><h4 id="开放封闭原则-OCP"><a href="#开放封闭原则-OCP" class="headerlink" title="开放封闭原则 OCP"></a>开放封闭原则 OCP</h4><p>这个原则是所有面向对象原则的核心。<br>任何一个软件实体（小到一个类、大到一个系统）都要对扩展开放，对修改封闭。换句话说，要在尽量不修改原有代码的基础上，对功能进行扩充。<br>一般实践过程中，常常通过接口、抽象类定义抽象层，然后通过实现类进行功能扩展。每次增加新功能只需要增加一个实现类即可。</p><h4 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 LSP"></a>里氏替换原则 LSP</h4><p>所有引用基类的地方必须能透明地使用其派生类的对象。说人话，就是所有父类引用都可以换成子类的引用。<br>违反里氏替换原则的一个小例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj typeof SubClass1) &#123;</span><br><span class="line">    <span class="comment">// do a</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj typeof SubClass2) &#123;</span><br><span class="line">    <span class="comment">// do b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则 DIP"></a>依赖倒置原则 DIP</h4><p>这个原则有两层含义：</p><ul><li>高层模块不应依赖于低层模块，二者都应依赖于抽象。</li><li>抽象不应依赖于细节，细节应依赖于抽象</li><li>针对接口编程，不要针对实现编程</li></ul><p>我们在编码中，应该尽量依赖于抽象类和接口，而不是实现类。</p><h4 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 ISP"></a>接口隔离原则 ISP</h4><p>不能强迫用户去依赖他们不使用的接口。<br>换句话说，接口里包含的方法定义应尽可能少！ 大接口要拆分成小接口。</p><h4 id="迪米特法则-最少知道原则-Law-of-Demeter-，LoD"><a href="#迪米特法则-最少知道原则-Law-of-Demeter-，LoD" class="headerlink" title="迪米特法则(最少知道原则) Law of Demeter ，LoD"></a>迪米特法则(最少知道原则) Law of Demeter ，LoD</h4><p>只与你直接的朋友们通信，不要跟“陌生人”说话。</p><p>一个实体应尽可能少地与其他实体发生相互作用，使系统各模块相互独立。</p><h4 id="单一职责原则-SIP"><a href="#单一职责原则-SIP" class="headerlink" title="单一职责原则 SIP"></a>单一职责原则 SIP</h4><p>这个原则是主要针对类来说的，让一个类只专注于一个职责。 如果有多个职责怎么办，通过其他原则拆分、重构它！<br>所谓类的职责，是指引起该类变化的一个原因。</p><h4 id="合成复用原则-Composite-Aggregate-Reuse-Principle-，CARP"><a href="#合成复用原则-Composite-Aggregate-Reuse-Principle-，CARP" class="headerlink" title="合成复用原则 Composite&#x2F;Aggregate Reuse Principle ，CARP"></a>合成复用原则 Composite&#x2F;Aggregate Reuse Principle ，CARP</h4><p>多使用组合&#x2F;聚合，少使用类继承。</p><h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol><li><a href="https://blog.csdn.net/qq_34760445/article/details/82931002">面向对象设计的七大设计原则详解</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;世上唯一不变的是变化。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;相对于其他实物，软件从写下第一行代码开始就不断反复变化。为了应对各种变化，需要一些通用的设计原则和模式来指导日常开发。&lt;br&gt;面向对象诞生至今早已超过半个世纪，大量前辈们早就探索和总</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
    <category term="设计模式" scheme="http://example.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java Stream接口学习笔记</title>
    <link href="http://example.com/2020/09/15/java-stream-interface-note/"/>
    <id>http://example.com/2020/09/15/java-stream-interface-note/</id>
    <published>2020-09-15T06:11:23.000Z</published>
    <updated>2023-11-20T02:27:39.770Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Stream接口概念辨析"><a href="#Stream接口概念辨析" class="headerlink" title="Stream接口概念辨析"></a>Stream接口概念辨析</h4><p>Java中有两类<code>Stream</code>，一类是IO流，常见的有InputStream、OutputStream等，还有一类是Java8 新增的<code>Stream接口</code>。<br>Stream接口位于<code>java.util.stream</code>包中,是对集合功能的增强。<br>如何增强呢？ 简单来说，它支持集合元素的筛选、切片、映射、排序、匹配查找、聚合等多种复杂常见操作，使用<code>Lambda表达式</code>简化代码编写，并支持并行和串行两种模式的操作。</p><h4 id="Stream接口使用步骤"><a href="#Stream接口使用步骤" class="headerlink" title="Stream接口使用步骤"></a>Stream接口使用步骤</h4><ol><li>创建Stream，通过一个数据源来获取一个流</li><li>转换Stream，每次转换可得到一个新的Stream对象</li><li>对Stream进行聚合操作产生最终结果</li></ol><h4 id="Stream流的创建"><a href="#Stream流的创建" class="headerlink" title="Stream流的创建"></a>Stream流的创建</h4><p>有以下四种创建方式：</p><ol><li>基于现有集合，调用集合的stream()方法创建：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">Stream&lt;Integer&gt; integerStream = integerList.stream();</span><br></pre></td></tr></table></figure></li><li>基于数组，通过Stream工具类的stream()静态方法创建：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li>通过Stream接口的of(T.. values)静态方法创建：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; integerStream1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li><li>通过Stream接口的generate(Supplier&lt;? extends T&gt; s)静态方法创建：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Stream&lt;Integer&gt; limit  = Stream.generate(<span class="keyword">new</span> <span class="title class_">Random</span>()::nextInt).limit(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li></ol><h4 id="Stream中间操作（结果仍为Stream"><a href="#Stream中间操作（结果仍为Stream" class="headerlink" title="Stream中间操作（结果仍为Stream)"></a>Stream中间操作（结果仍为Stream)</h4><ul><li>筛选、切片</li></ul><table><thead><tr><th>方法声明</th><th>功能</th></tr></thead><tbody><tr><td>Stream filter&lt;Predicate&lt;? super T&gt; predicate)</td><td>过滤，返回一个包含匹配元素的流</td></tr><tr><td>Stream distinct()</td><td>去重，返回不含重复元素的流</td></tr><tr><td>Stream limit(long maxSize)</td><td>切片，返回不超过maxSize数量的元素组成的流</td></tr><tr><td>Stream skip(long n)</td><td>切片，返回丢弃前n个元素后的流</td></tr></tbody></table><ul><li>映射</li></ul><table><thead><tr><th>方法声明</th><th>功能</th></tr></thead><tbody><tr><td>Stream map(Function&lt;? super T, ? extends R&gt; mapper)</td><td>返回每个处理过元素组成的流</td></tr><tr><td>Stream flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td><td>返回每个被替换过元素组成的流，并将所有流合成一个流</td></tr></tbody></table><ul><li>排序</li></ul><table><thead><tr><th>方法声明</th><th>功能</th></tr></thead><tbody><tr><td>Stream sorted()</td><td>返回经过自然排序后元素组成的流</td></tr><tr><td>Stream sorted(Comparator&lt;? super T&gt; comparator)</td><td>返回经过比较器排序后元素组成的流</td></tr></tbody></table><h4 id="Stream终止操作"><a href="#Stream终止操作" class="headerlink" title="Stream终止操作"></a>Stream终止操作</h4><ul><li>匹配与查找</li></ul><table><thead><tr><th>方法声明</th><th>功能</th></tr></thead><tbody><tr><td>Optional findFirst()</td><td>返回该流的第一个元素</td></tr><tr><td>boolean allMatch(Predicate&lt;? super T&gt; predicate)</td><td>判断所有元素是否匹配</td></tr><tr><td>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</td><td>判断没有元素是否匹配</td></tr><tr><td>Optional max(Comparator&lt;? super T&gt; comparator)</td><td>根据比较器返回最大元素</td></tr><tr><td>Optional min(Comparator&lt;? super T&gt; comparator)</td><td>根据比较器返回最小元素</td></tr><tr><td>long count()</td><td>返回元素的个数</td></tr><tr><td>void forEach(Consumer&lt;? super T&gt; action)</td><td>对流中每个元素执行操作</td></tr></tbody></table><ul><li><p>规约（reduce）</p><table><thead><tr><th>方法声明</th><th>功能</th></tr></thead><tbody><tr><td>Optional reduce(BinaryOperator accumulator)</td><td>返回结合后的元素值</td></tr></tbody></table></li><li><p>收集</p><table><thead><tr><th>方法声明</th><th>功能</th></tr></thead><tbody><tr><td>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</td><td>使用收集器对元素进行处理</td></tr></tbody></table></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Stream接口概念辨析&quot;&gt;&lt;a href=&quot;#Stream接口概念辨析&quot; class=&quot;headerlink&quot; title=&quot;Stream接口概念辨析&quot;&gt;&lt;/a&gt;Stream接口概念辨析&lt;/h4&gt;&lt;p&gt;Java中有两类&lt;code&gt;Stream&lt;/code&gt;，一类</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java捕获InputMismatchException陷入死循环的bug处理</title>
    <link href="http://example.com/2020/09/12/a-InputMismatchException-problem/"/>
    <id>http://example.com/2020/09/12/a-InputMismatchException-problem/</id>
    <published>2020-09-12T09:13:23.000Z</published>
    <updated>2023-11-20T02:27:39.757Z</updated>
    
    <content type="html"><![CDATA[<h4 id="while-true-scanner-nextInt-导致InputMismatchException-死循环问题"><a href="#while-true-scanner-nextInt-导致InputMismatchException-死循环问题" class="headerlink" title="while(true) + scanner.nextInt() 导致InputMismatchException 死循环问题"></a>while(true) + scanner.nextInt() 导致InputMismatchException 死循环问题</h4><p>今天做一个练手项目时，需要用户输入数字来选择菜单。示例代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;\n\n\t\t在线考试系统&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t[1] 学员登录\t\t[2] 管理员登录&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t[0] 退出系统&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，上面这段代码，用户只有一次输入机会。为提高程序可用性，如果用户输入的不是数字，需要重新输入直到输入数字为止。因此考虑加上循环，修改后的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">        <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">           <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果用户正常输入数字，则没有问题。否则，若输入字母、其他字符等，则直接抛出运行时异常<code>InputMismatchException</code>，导致程序异常终止。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">请选择操作：试试水</span><br><span class="line">客户端关闭！</span><br><span class="line">Exception in thread &quot;main&quot; java.util.InputMismatchException</span><br><span class="line">at java.base/java.util.Scanner.throwFor(Scanner.java:939)</span><br><span class="line">at java.base/java.util.Scanner.next(Scanner.java:1594)</span><br><span class="line">at java.base/java.util.Scanner.nextInt(Scanner.java:2258)</span><br><span class="line">at java.base/java.util.Scanner.nextInt(Scanner.java:2212)</span><br><span class="line">at homework1.client.ClientView.processOption(ClientView.java:39)</span><br><span class="line">at homework1.client.ClientBaseView.mainPage(ClientBaseView.java:49)</span><br><span class="line">at homework1.test.ClientTest.main(ClientTest.java:23)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure><p>为避免因为这么一个小小错误引起程序终止，增加<code>try-catch</code>异常捕获：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">            <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误！请输入数字选项。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输入字符串进行测试，发现程序并未如预期般循环等待输入，而是直接陷入死循环：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="问题原因分析"><a href="#问题原因分析" class="headerlink" title="问题原因分析"></a>问题原因分析</h4><p>为什么呢？翻一下<code>Scanner</code>的源码，发现<code>nextInt()</code>方法在识别到非数字字符串时，会抛出这个<code>Input</code>异常，并且在抛出异常前刻意把缓冲区指针设置到本字符串的开头位置。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// java.util.Scanner.java </span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">(<span class="type">int</span> radix)</span> &#123;</span><br><span class="line">        <span class="comment">// Check cached result</span></span><br><span class="line">        <span class="keyword">if</span> ((typeCache != <span class="literal">null</span>) &amp;&amp; (typeCache <span class="keyword">instanceof</span> Integer)</span><br><span class="line">            &amp;&amp; <span class="built_in">this</span>.radix == radix) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> ((Integer)typeCache).intValue();</span><br><span class="line">            useTypeCache();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        setRadix(radix);</span><br><span class="line">        clearCaches();</span><br><span class="line">        <span class="comment">// Search for next int</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> next(integerPattern());</span><br><span class="line">            <span class="keyword">if</span> (matcher.group(SIMPLE_GROUP_INDEX) == <span class="literal">null</span>)</span><br><span class="line">                s = processIntegerToken(s);</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(s, radix);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">            position = matcher.start(); <span class="comment">// don&#x27;t skip bad token</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InputMismatchException</span>(nfe.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>重点看最后三行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#125; catch (NumberFormatException nfe) &#123;</span><br><span class="line">    position = matcher.start(); // don&#x27;t skip bad token</span><br><span class="line">    throw new InputMismatchException(nfe.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，在我们的程序中，如果用<code>nextInt()</code>接收一个非数字字符串输入，字符串并不会被<strong>消费</strong>掉。下次再接收时，仍然会读取到跟上次一样的字符串。这样程序就陷入了死循环。</p><h4 id="处理方案一：把错误字符串消费掉"><a href="#处理方案一：把错误字符串消费掉" class="headerlink" title="处理方案一：把错误字符串消费掉"></a>处理方案一：把错误字符串消费掉</h4><p><code>Scanner</code>没有帮我们做的事，我们可以自己做。在<code>Catch</code>代码块里调用一下<code>next()</code>方法，把错误字符串消费掉即可。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">            <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误！请输入数字选项。&quot;</span>);</span><br><span class="line">            scanner.next(); <span class="comment">// 增加这一句，消费掉输入错误的字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行效果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">请选择操作：xasx</span><br><span class="line">输入错误！请输入数字选项。</span><br><span class="line">请选择操作：afdsfas</span><br><span class="line">输入错误！请输入数字选项。</span><br><span class="line">请选择操作：1</span><br><span class="line">您的选择是: 1</span><br><span class="line">后续处理逻辑。。。</span><br></pre></td></tr></table></figure><p>解决！</p><h4 id="处理方案二：nextInt-换成next"><a href="#处理方案二：nextInt-换成next" class="headerlink" title="处理方案二：nextInt()换成next()"></a>处理方案二：nextInt()换成next()</h4><p>既然<code>nextInt()</code>方法有这些毛病，我们也可以放弃它，改用<code>next()</code>方法接收到字符串，然后自己针对字符串做处理。 代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> temp.matches(<span class="string">&quot;[0-9]+&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> Integer.parseInt(temp);</span><br><span class="line">            System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">            <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误！请输入数字选项。&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>两种方案都可以处理掉<code>while(true) + nextInt()</code>导致的<code>InputMismatchException</code>死循环问题，相对来说，第一种方案代码更简洁一些。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;while-true-scanner-nextInt-导致InputMismatchException-死循环问题&quot;&gt;&lt;a href=&quot;#while-true-scanner-nextInt-导致InputMismatchException-死循环问题&quot; clas</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java序列化多个对象到文件并正确读写的技巧</title>
    <link href="http://example.com/2020/08/19/java-serialize-and-deserialize-multiple-objects/"/>
    <id>http://example.com/2020/08/19/java-serialize-and-deserialize-multiple-objects/</id>
    <published>2020-08-19T13:45:03.000Z</published>
    <updated>2023-11-20T02:27:39.770Z</updated>
    
    <content type="html"><![CDATA[<p>我们一般使用<code>ObjectInputStream</code>的<code>Object readObject()</code>方法来从输入流中读出一个对象，这个方法有个缺陷是，无法通过返回值来判断是否读到了文件末尾。因此，我们要序列化多个对象时，需要额外一些小技巧来处理。大体来说，有四种方法能够正确序列化反序列化多个对象：</p><ul><li>把对象装入集合中，对整个集合进行序列化和反序列化</li><li>把对象放入对象数组中，对对象数组进行序列化和反序列化</li><li>依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止</li><li>依次序列化写入多个对象，读取时以FileInputStream的<code>int available()</code>返回值判断是否终止<br>下面举例说明。</li></ul><h3 id="数据准备-测试程序准备"><a href="#数据准备-测试程序准备" class="headerlink" title="数据准备&amp;测试程序准备"></a>数据准备&amp;测试程序准备</h3><p>首先准备一个要序列化的类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1105545465577482303L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String phone; <span class="comment">// transient 关键字表示该成员不参与序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后准备测试程序，主体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备要序列化的数据</span></span><br><span class="line">        User[] users = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">33</span>, <span class="string">&quot;185000011133&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">44</span>, <span class="string">&quot;185000011144&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">55</span>, <span class="string">&quot;185000011155&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;赵六&quot;</span>,<span class="number">66</span>, <span class="string">&quot;185000011166&quot;</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 准备输出流和输入流</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;./out/oos_1.txt&quot;</span>;</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName));</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">            <span class="comment">// 3. 序列化到文件,并反序列化读取并输出</span></span><br><span class="line"><span class="comment">//            testSerialize1(users, oos, ois);</span></span><br><span class="line"><span class="comment">//            testSerialize2(users, oos, ois);</span></span><br><span class="line">            testSerialize3(users, oos, ois);</span><br><span class="line"><span class="comment">//            testSerialize4(users, oos, ois, fis);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4. 关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != ois) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != oos) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="实现多个对象的序列化和反序列"><a href="#实现多个对象的序列化和反序列" class="headerlink" title="实现多个对象的序列化和反序列"></a>实现多个对象的序列化和反序列</h3><p>下面分别用4种方式实现多个对象的序列化和反序列化。</p><h4 id="1-把对象装入集合中，对整个集合进行序列化和反序列化（推荐）"><a href="#1-把对象装入集合中，对整个集合进行序列化和反序列化（推荐）" class="headerlink" title="1. 把对象装入集合中，对整个集合进行序列化和反序列化（推荐）"></a>1. 把对象装入集合中，对整个集合进行序列化和反序列化（推荐）</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法1： 使用集合保存多个对象，对集合进行序列化反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize1</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ArrayList&lt;User&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            list1.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        oos.writeObject(list1);</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1写入完毕！&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1读取数据为：&quot;</span> + obj);</span><br><span class="line">        ArrayList&lt;User&gt; list2 = (ArrayList&lt;User&gt;)obj;</span><br><span class="line">        <span class="keyword">for</span> (User user: list2) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>运行测试程序，输出为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">方法1写入完毕！</span><br><span class="line">方法1读取数据为：[User&#123;name=&#x27;张三&#x27;, age=33, phone=&#x27;null&#x27;&#125;, User&#123;name=&#x27;李四&#x27;, age=44, phone=&#x27;null&#x27;&#125;, User&#123;name=&#x27;王五&#x27;, age=55, phone=&#x27;null&#x27;&#125;, User&#123;name=&#x27;赵六&#x27;, age=66, phone=&#x27;null&#x27;&#125;]</span><br><span class="line">User&#123;name=&#x27;张三&#x27;, age=33, phone=&#x27;null&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;李四&#x27;, age=44, phone=&#x27;null&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;王五&#x27;, age=55, phone=&#x27;null&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;赵六&#x27;, age=66, phone=&#x27;null&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="2-把对象放入对象数组中，对对象数组进行序列化和反序列化"><a href="#2-把对象放入对象数组中，对对象数组进行序列化和反序列化" class="headerlink" title="2. 把对象放入对象数组中，对对象数组进行序列化和反序列化"></a>2. 把对象放入对象数组中，对对象数组进行序列化和反序列化</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法2： 使用Object数组保存多个对象，对整个数组进行序列化反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize2</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        oos.writeObject(users);</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2写入完毕！&quot;</span>);</span><br><span class="line">        Object[] objs = (Object[])ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2读取数据为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object obj: objs) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出跟上面类似。</p><h4 id="3-依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止"><a href="#3-依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止" class="headerlink" title="3. 依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止"></a>3. 依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法3： 依次写入多个对象,再追加一个null对象表示结束，读取时判断读到的对象是否为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize3</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">            oos.writeObject(user);</span><br><span class="line">        &#125;</span><br><span class="line">        oos.writeObject(<span class="literal">null</span>);</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法3写入完毕！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方法3读取数据为：&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((obj = ois.readObject()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出同方法2。</p><h4 id="4-依次序列化写入多个对象，读取时以FileInputStream的int-available-返回值判断是否终止"><a href="#4-依次序列化写入多个对象，读取时以FileInputStream的int-available-返回值判断是否终止" class="headerlink" title="4. 依次序列化写入多个对象，读取时以FileInputStream的int available()返回值判断是否终止"></a>4. 依次序列化写入多个对象，读取时以FileInputStream的<code>int available()</code>返回值判断是否终止</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法4： 依次写入多个对象，读取时使用fis.available()方法判断是否读取到末尾</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize4</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois, FileInputStream fis)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">            oos.writeObject(user);</span><br><span class="line">        &#125;</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法4写入完毕！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方法4读取数据为：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (fis.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>输出同方法2。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;我们一般使用&lt;code&gt;ObjectInputStream&lt;/code&gt;的&lt;code&gt;Object readObject()&lt;/code&gt;方法来从输入流中读出一个对象，这个方法有个缺陷是，无法通过返回值来判断是否读到了文件末尾。因此，我们要序列化多个对象时，需要额外一些小技</summary>
      
    
    
    
    
    <category term="Java" scheme="http://example.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>一次性搞定Git中忽略.DS_Store文件</title>
    <link href="http://example.com/2020/08/19/git-ignore-ds_store-files-in-mac/"/>
    <id>http://example.com/2020/08/19/git-ignore-ds_store-files-in-mac/</id>
    <published>2020-08-19T11:12:03.000Z</published>
    <updated>2023-11-20T02:27:39.763Z</updated>
    
    <content type="html"><![CDATA[<p>.DS_Store文件是Mac系统用来存储当前文件夹的显示属性元数据的，如图标位置等设置。.DS_Store广泛存在于每个文件夹下，一般供Finder、Spotlight使用。而对于基于Git托管的代码仓库来说，.DS_Store就是无用数据了。我们需要在Git中忽略它们。</p><p>忽略.DS_Store文件，我们通常有两种选择：</p><h4 id="1-当前项目忽略"><a href="#1-当前项目忽略" class="headerlink" title="1. 当前项目忽略"></a>1. 当前项目忽略</h4><p>在当前项目根目录的.gitignore文件中添加如下一行即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim .gitignore</span></span><br><span class="line">**/.DS_Store</span><br></pre></td></tr></table></figure><p>.gitignore文件常用规则可以<a href="/2020/08/19/common-rules-about-gitignore-file/" title="gitignore文件常用规则">看这里</a>。</p><p>对于已经在Git版本控制的中.DS_Store，希望Git能够忽略，但不删除本地文件，需要在terminal中输入以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .DS_Store</span><br></pre></td></tr></table></figure><p>Git如何屏蔽已经加入版本控制的文件可以<a href="/2020/04/23/gitignore-files-already-under-git-version-control/" title="正确设置.gitignore忽略已经纳入版本控制的文件">看这里</a>。</p><p>这种方式每当开新项目时都要配置，用起来比较麻烦。</p><h4 id="2-全局忽略"><a href="#2-全局忽略" class="headerlink" title="2. 全局忽略"></a>2. 全局忽略</h4><p>首先创建一个 ~&#x2F;.gitignore_global文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch ~/.gitignore_global</span><br></pre></td></tr></table></figure><p>然后在文件中添加如下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim ~/.gitignore_global</span></span><br><span class="line">**/.DS_Store</span><br></pre></td></tr></table></figure><p>最后，将.gitignore_global作为Git的全局忽略配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure><p>这种方式一劳永逸，不用每个项目都单独配置了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;.DS_Store文件是Mac系统用来存储当前文件夹的显示属性元数据的，如图标位置等设置。.DS_Store广泛存在于每个文件夹下，一般供Finder、Spotlight使用。而对于基于Git托管的代码仓库来说，.DS_Store就是无用数据了。我们需要在Git中忽略它们。</summary>
      
    
    
    
    
    <category term="Tools" scheme="http://example.com/tags/Tools/"/>
    
    <category term="Git" scheme="http://example.com/tags/Git/"/>
    
  </entry>
  
</feed>

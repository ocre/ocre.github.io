<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java捕获InputMismatchException陷入死循环的bug处理</title>
    <url>/2020/09/12/a-InputMismatchException-problem/</url>
    <content><![CDATA[<h4 id="while-true-scanner-nextInt-导致InputMismatchException-死循环问题"><a href="#while-true-scanner-nextInt-导致InputMismatchException-死循环问题" class="headerlink" title="while(true) + scanner.nextInt() 导致InputMismatchException 死循环问题"></a>while(true) + scanner.nextInt() 导致InputMismatchException 死循环问题</h4><p>今天做一个练手项目时，需要用户输入数字来选择菜单。示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;\n\n\t\t在线考试系统&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;---------------------------------&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t[1] 学员登录\t\t[2] 管理员登录&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;\t[0] 退出系统&quot;</span>);</span><br><span class="line">    System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，上面这段代码，用户只有一次输入机会。为提高程序可用性，如果用户输入的不是数字，需要重新输入直到输入数字为止。因此考虑加上循环，修改后的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">        System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">        <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">           <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">           <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果用户正常输入数字，则没有问题。否则，若输入字母、其他字符等，则直接抛出运行时异常<code>InputMismatchException</code>，导致程序异常终止。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请选择操作：试试水</span><br><span class="line">客户端关闭！</span><br><span class="line">Exception in thread &quot;main&quot; java.util.InputMismatchException</span><br><span class="line">	at java.base/java.util.Scanner.throwFor(Scanner.java:939)</span><br><span class="line">	at java.base/java.util.Scanner.next(Scanner.java:1594)</span><br><span class="line">	at java.base/java.util.Scanner.nextInt(Scanner.java:2258)</span><br><span class="line">	at java.base/java.util.Scanner.nextInt(Scanner.java:2212)</span><br><span class="line">	at homework1.client.ClientView.processOption(ClientView.java:39)</span><br><span class="line">	at homework1.client.ClientBaseView.mainPage(ClientBaseView.java:49)</span><br><span class="line">	at homework1.test.ClientTest.main(ClientTest.java:23)</span><br><span class="line"></span><br><span class="line">Process finished with exit code 1</span><br></pre></td></tr></table></figure>
<p>为避免因为这么一个小小错误引起程序终止，增加<code>try-catch</code>异常捕获：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">            <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误！请输入数字选项。&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输入字符串进行测试，发现程序并未如预期般循环等待输入，而是直接陷入死循环：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">请选择操作：输入错误！请输入数字选项。</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="问题原因分析"><a href="#问题原因分析" class="headerlink" title="问题原因分析"></a>问题原因分析</h4><p>为什么呢？翻一下<code>Scanner</code>的源码，发现<code>nextInt()</code>方法在识别到非数字字符串时，会抛出这个<code>Input</code>异常，并且在抛出异常前刻意把缓冲区指针设置到本字符串的开头位置。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.Scanner.java </span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">nextInt</span><span class="params">(<span class="type">int</span> radix)</span> &#123;</span><br><span class="line">        <span class="comment">// Check cached result</span></span><br><span class="line">        <span class="keyword">if</span> ((typeCache != <span class="literal">null</span>) &amp;&amp; (typeCache <span class="keyword">instanceof</span> Integer)</span><br><span class="line">            &amp;&amp; <span class="built_in">this</span>.radix == radix) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">val</span> <span class="operator">=</span> ((Integer)typeCache).intValue();</span><br><span class="line">            useTypeCache();</span><br><span class="line">            <span class="keyword">return</span> val;</span><br><span class="line">        &#125;</span><br><span class="line">        setRadix(radix);</span><br><span class="line">        clearCaches();</span><br><span class="line">        <span class="comment">// Search for next int</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> next(integerPattern());</span><br><span class="line">            <span class="keyword">if</span> (matcher.group(SIMPLE_GROUP_INDEX) == <span class="literal">null</span>)</span><br><span class="line">                s = processIntegerToken(s);</span><br><span class="line">            <span class="keyword">return</span> Integer.parseInt(s, radix);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException nfe) &#123;</span><br><span class="line">            position = matcher.start(); <span class="comment">// don&#x27;t skip bad token</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InputMismatchException</span>(nfe.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>重点看最后三行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#125; catch (NumberFormatException nfe) &#123;</span><br><span class="line">    position = matcher.start(); // don&#x27;t skip bad token</span><br><span class="line">    throw new InputMismatchException(nfe.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>也就是说，在我们的程序中，如果用<code>nextInt()</code>接收一个非数字字符串输入，字符串并不会被<strong>消费</strong>掉。下次再接收时，仍然会读取到跟上次一样的字符串。这样程序就陷入了死循环。</p>
<h4 id="处理方案一：把错误字符串消费掉"><a href="#处理方案一：把错误字符串消费掉" class="headerlink" title="处理方案一：把错误字符串消费掉"></a>处理方案一：把错误字符串消费掉</h4><p><code>Scanner</code>没有帮我们做的事，我们可以自己做。在<code>Catch</code>代码块里调用一下<code>next()</code>方法，把错误字符串消费掉即可。代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">            System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">            <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InputMismatchException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误！请输入数字选项。&quot;</span>);</span><br><span class="line">            scanner.next(); <span class="comment">// 增加这一句，消费掉输入错误的字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">请选择操作：xasx</span><br><span class="line">输入错误！请输入数字选项。</span><br><span class="line">请选择操作：afdsfas</span><br><span class="line">输入错误！请输入数字选项。</span><br><span class="line">请选择操作：1</span><br><span class="line">您的选择是: 1</span><br><span class="line">后续处理逻辑。。。</span><br></pre></td></tr></table></figure>
<p>解决！</p>
<h4 id="处理方案二：nextInt-换成next"><a href="#处理方案二：nextInt-换成next" class="headerlink" title="处理方案二：nextInt()换成next()"></a>处理方案二：nextInt()换成next()</h4><p>既然<code>nextInt()</code>方法有这些毛病，我们也可以放弃它，改用<code>next()</code>方法接收到字符串，然后自己针对字符串做处理。 代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">processOption</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;请选择操作：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">temp</span> <span class="operator">=</span> scanner.next();</span><br><span class="line">        <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">match</span> <span class="operator">=</span> temp.matches(<span class="string">&quot;[0-9]+&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (match) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">choice</span> <span class="operator">=</span> Integer.parseInt(temp);</span><br><span class="line">            System.out.println(<span class="string">&quot;您的选择是: &quot;</span> + choice);</span><br><span class="line">            <span class="keyword">if</span> (choice &gt;=<span class="number">0</span> &amp;&amp; choice &lt;=<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="comment">// 输入的选项合法，跳出循环</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;输入错误！请输入数字选项。&quot;</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 后续处理</span></span><br><span class="line">    System.out.println(<span class="string">&quot;后续处理逻辑。。。&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>两种方案都可以处理掉<code>while(true) + nextInt()</code>导致的<code>InputMismatchException</code>死循环问题，相对来说，第一种方案代码更简洁一些。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>ajax上传文件时碰到的一个小坑</title>
    <url>/2020/05/08/a-common-bug-when-upload-file-using-ajax/</url>
    <content><![CDATA[<p>今天调试一个ajax文件上传接口，拿到的数据看起来是标准的json字符串，但是浏览器执行始终跟期望不一样。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">		type        : <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">		data        : data,</span><br><span class="line">		url :         <span class="string">&#x27;upload.php&#x27;</span>,</span><br><span class="line">        <span class="attr">cache</span>:     <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line">		<span class="attr">contentType</span>: <span class="literal">false</span>,</span><br><span class="line">		success :     <span class="keyword">function</span>(<span class="params">data</span>)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(data.<span class="property">code</span>);</span><br><span class="line">			<span class="keyword">var</span> code = data.<span class="property">code</span>;</span><br><span class="line">			<span class="keyword">var</span> msg  = data.<span class="property">msg</span>;</span><br><span class="line">			<span class="keyword">switch</span>(code)&#123;</span><br><span class="line">				<span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">					$(<span class="string">&#x27;#health_doc&#x27;</span>).<span class="title function_">val</span>(msg);</span><br><span class="line">					$(<span class="string">&#x27;#show_plan_file&#x27;</span>).<span class="title function_">hide</span>();</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				<span class="attr">default</span>:</span><br><span class="line">					layer.<span class="title function_">alert</span>(msg, &#123;<span class="attr">icon</span>: <span class="number">5</span>&#125;);</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br></pre></td></tr></table></figure>

<p>上图代码中，<code>console.log(data)</code>打印正常,而<code>console.log(data.code)</code>打印结果为<code>undefined</code>。 于是，再追加一条打印语句<code>console.log(typeof data)</code>，发现结果竟然是<code>string</code>，看来json字符串没有被浏览器自动解析。经检查Response Header，找到问题了。原来是接口返回的<code>header</code>头不对，其他接口都返回<code>Content-Type: application/json</code>, 唯独这个接口返回的是<code>Content-Type: text/html</code>，导致返回的json字符串没有办法被浏览器自动解析。<br>再追究一层，发现Response Header的设置跟ajax请求时有关，我们为了实现文件上传，给ajax设置了<code>contentType</code>属性设置为<code>false</code>，这样后端就无法根据请求<code>contentType</code>自动给出正确的响应头<code>Content-Type</code>设置。</p>
<p>解决这个问题有两种方案：<br>一是在后端输出请求响应内容前，设置Http响应头信息为<code>application-json</code>。假设后端是php，可以如下设置：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>另一种方案是后端不处理，前端js拿到响应字符串后自己通过<code>JSON.parse(data)</code>手动转为json对象。</p>
]]></content>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>一个简单的ajax上传文件方案</title>
    <url>/2020/05/08/a-simple-example-to-upload-file-using-ajax/</url>
    <content><![CDATA[<p>一般在前端上传文件我习惯用百度的<a href="https://fex.baidu.com/webuploader/">WebUploader</a>，不过有时候也会用到一些简单的方案。这里就记录一个比较简单的ajax上传文件方案。</p>
<h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><ol>
<li>html部分<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择文件：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;upload_file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;upload_file&quot;</span>/&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>js部分<br>首先需要依赖<code>jquery</code>,请自行引入，这里不再描述。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;application/javascript&quot;</span>&gt;</span><br><span class="line">$(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 选择1：点击”提交“按钮时上传</span></span><br><span class="line">    $(<span class="string">&#x27;#submit&#x27;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">ajaxUpload</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 选择2：文件对象改变时触发上传</span></span><br><span class="line">    $(<span class="string">&#x27;#upload_file&#x27;</span>).<span class="title function_">change</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="title function_">ajaxUpload</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ajaxUpload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> files = $(<span class="string">&#x27;#upload_file&#x27;</span>).<span class="title function_">prop</span>(<span class="string">&#x27;files&#x27;</span>);</span><br><span class="line">        <span class="keyword">var</span> data = <span class="keyword">new</span> <span class="title class_">FormData</span>();</span><br><span class="line">        data.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, files[<span class="number">0</span>]);</span><br><span class="line">        </span><br><span class="line">        $.<span class="title function_">ajax</span>(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="attr">url</span>: <span class="string">&#x27;upload.php&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: data,</span><br><span class="line">            <span class="attr">cache</span>: <span class="literal">false</span>, <span class="comment">// 兼容ie8，防止ie8之前版本缓存get请求的处理方式</span></span><br><span class="line">            <span class="attr">contentType</span>: <span class="literal">false</span>, <span class="comment">// 避免jquery误解</span></span><br><span class="line">            <span class="attr">processData</span>: <span class="literal">false</span>, <span class="comment">// 避免发送的数据被默认转为&quot;application/x-www-form-urlencoded&quot;</span></span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span>(<span class="params">data</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> data);</span><br><span class="line">                <span class="comment">// 拿到后端传回的响应信息后，做后续业务处理</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ol>
<li>我这里在后端处理文件上传的语言是<code>upload.php</code>。它的主要内容如下：<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in upload.php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Content-type: application/json&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="variable">$uploadFile</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;csv_file&#x27;</span>];</span><br><span class="line">    <span class="variable">$originName</span> = <span class="title function_ invoke__">basename</span>(<span class="variable">$uploadFile</span>[<span class="string">&quot;name&quot;</span>]); <span class="comment">//被上传文件的名称</span></span><br><span class="line">    <span class="variable">$tmpName</span> = <span class="variable">$uploadFile</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//检查或创建保存目录</span></span><br><span class="line">    <span class="variable">$savePath</span> = <span class="string">&#x27;../upload/&#x27;</span> . <span class="title function_ invoke__">date</span>(<span class="string">&quot;Y_m_d/&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$savePath</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">mkdir</span>(<span class="variable">$savePath</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//文件重命名</span></span><br><span class="line">    <span class="variable">$newName</span> = <span class="variable">$originName</span>; <span class="comment">// 为简单起见，这里在保存文件时未修改文件名</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//保存文件</span></span><br><span class="line">		<span class="variable">$saveFile</span> = <span class="variable">$savePath</span>.<span class="variable">$newName</span>;</span><br><span class="line">		<span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$tmpName</span>, <span class="variable">$saveFile</span>))&#123;</span><br><span class="line">		    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="string">&#x27;code&#x27;</span>=&gt;<span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$newName</span>));<span class="comment">//上传成功，返回文件名。</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;文件写入失败，请检查上传目录是否可写&#x27;</span>, -<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">json_encode</span>(<span class="string">&#x27;code&#x27;</span>=&gt;-<span class="number">1</span>, <span class="string">&#x27;msg&#x27;</span>=&gt;<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>raw.githubusercontent.com拒绝连接</title>
    <url>/2020/10/10/a-solution-to-raw.githubusercontent.com-connection-refuse/</url>
    <content><![CDATA[<p>今天安装一个来自github的脚本，需要从raw.githubusercontent.com下载安装，但是一直提示拒绝连接。<br>一般这种情况就是域名查询过程中被墙了。<br>解决思路很简单，找到这个域名的香港ip，直接在host文件中配置一下，绕过域名查询就可以了。</p>
<p>香港ip可以从这里获取: <a href="https://site.ip138.com/raw.githubusercontent.com/">https://site.ip138.com/raw.githubusercontent.com/</a></p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Homebrew每次装软件都卡在更新界面怎么办？</title>
    <url>/2019/12/08/accelerate-homebrew-install/</url>
    <content><![CDATA[<p>自从用上Mac，Homebrew就成了一个绕不开的工具。Homebrew是Mac的软件包管理工具，作用相当于CentOS上的yum。Mac上的好多软件，都需要用Homebrew安装。基本上使用<code>brew install &lt;packageName&gt;</code>或者<code>brew cask install &lt;packageName&gt;</code>就能一步到位装好软件了。但是头疼的是，我在运行<code>brew install</code>的时候，经常会提示<code>Updating Homebrew...</code>，然后卡住好几分钟，也不知道后台实际上在干些什么，体验很不好。截图如下：<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9o9r4bbrdj30ta026dfs.jpg" alt="brew install 时卡住了。。。"></p>
<p>一般遇到这种情况，直接使用<code>control + C</code>快捷键就可以打断更新，直接进入后续的install环节。<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9oa2txfudj30v605mt9b.jpg" alt="control + C打断更新"><br><code>control + C</code>一时爽，可是如果每次都要这样操作，却有违俺样的美学。所谓知其然，还要知其所以然。于是收集各种网上资料，并结合自己的实践测试了一下，对卡顿原因有了一定的了解。</p>
<h2 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h2><p>检查Homebrew脚本代码 <code>/usr/local/Homebrew/Library/Homebrew/brew.sh</code>可以发现，Homebrew在执行install操作时，默认会先去更新自己。</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9ojpggsjrj30v40c0ac4.jpg"></p>
<p>而更新操作，实际上是调用git pull从Homebrew位于github的官方镜像仓库拉取最新的版本到本地仓库（即Homebrew的安装目录）。如果github被墙或者访问速度太慢，就会出现卡顿现象。<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9oapkonfej30ym09q0u7.jpg" alt="check official repository"></p>
<p>可以使用<code>brew update --verbose</code>测试一下实际的更新速度，感受一下实际的卡顿：</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9obm2zg75j312g0nudhq.jpg"></p>
<h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><p>弄明白原因后，就可以对症下药了。</p>
<p>总的来说，要解决这个卡顿问题，有三种方法： 一是简单粗暴直接禁用brew update，二是使用国内镜像源，三是延长update的检查时间间隔。</p>
<h3 id="方法1-禁用brew-update"><a href="#方法1-禁用brew-update" class="headerlink" title="方法1: 禁用brew update"></a>方法1: 禁用brew update</h3><p>设置环境变量<code>HOMEBREW_NO_AUTO_UPDATE</code>即可。<br>这里需要区分一下shell种类，可以使用<code>echo $SHELL</code>命令查看。<br>针对<code>/bin/zsh</code>, 执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export HOMEBREW_NO_AUTO_UPDATE=true&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>针对<code>/bin/bash</code>, 执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export HOMEBREW_NO_AUTO_UPDATE=true&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>禁用之后，如果需要更新brew包，可以执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew update &amp;&amp; brew upgrade &amp;&amp; brew cleanup ; say brew updated</span><br><span class="line">brew update &amp;&amp; brew upgrade brew-cask &amp;&amp; brew cleanup ; say brew-cask updated</span><br></pre></td></tr></table></figure>
<h3 id="方法2-更换更快的镜像源"><a href="#方法2-更换更快的镜像源" class="headerlink" title="方法2: 更换更快的镜像源"></a>方法2: 更换更快的镜像源</h3><p>可选的镜像源有：</p>
<ul>
<li>清华：<a href="git://mirrors.tuna.tsinghua.edu.cn/homebrew.git">git:&#x2F;&#x2F;mirrors.tuna.tsinghua.edu.cn&#x2F;homebrew.git</a></li>
<li>中科大：<a href="http://mirrors.ustc.edu.cn/homebrew.git">http://mirrors.ustc.edu.cn/homebrew.git</a></li>
<li>Coding.net：<a href="https://git.coding.net/homebrew/homebrew.git">https://git.coding.net/homebrew/homebrew.git</a><br>这里我使用了清华的<a href="https://mirrors.tuna.tsinghua.edu.cn/help/homebrew/">镜像源</a>，操作命令如下：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git -C &quot;$(brew --repo)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/brew.git</span><br><span class="line"></span><br><span class="line">git -C &quot;$(brew --repo homebrew/core)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-core.git</span><br><span class="line"></span><br><span class="line">git -C &quot;$(brew --repo homebrew/cask)&quot; remote set-url origin https://mirrors.tuna.tsinghua.edu.cn/git/homebrew/homebrew-cask.git</span><br></pre></td></tr></table></figure>
顺便也可以设置一下Homebrew二进制预编译包的镜像地址，具体需要通过设置环境变量<code>HOMEBREW_BOTTLE_DOMAIN</code>来实现。这里也需要区分一下shell版本：</li>
</ul>
<p>如果使用 <code>/bin/zsh</code>， 则执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.zshrc</span><br><span class="line">source ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>而如果使用为<code>/bin/bash</code>，则执行如下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &#x27;export HOMEBREW_BOTTLE_DOMAIN=https://mirrors.tuna.tsinghua.edu.cn/homebrew-bottles&#x27; &gt;&gt; ~/.bash_profile</span><br><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure>
<p>然后重新执行一下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd $home</span><br><span class="line">brew update</span><br></pre></td></tr></table></figure>
<p>装两个软件试试：<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9oi1oqzw3j30km0akt90.jpg" alt="brew_install_test"><br>卡顿有了明显改善。:)</p>
<h3 id="方法3-延长自动update的检查间隔时间"><a href="#方法3-延长自动update的检查间隔时间" class="headerlink" title="方法3: 延长自动update的检查间隔时间"></a>方法3: 延长自动update的检查间隔时间</h3><p>通过阅读源码或帮助文档manpage，发现可以通过设置环境变量<code>HOMEBREW_AUTO_UPDATE_SECS</code>来控制检查更新的间隔时间。<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9oikrji0tj315i0me78p.jpg" alt="auto_update_secs_env_var"></p>
<p>在近期发布的Homebrew 2.2.0版本，也提到了一个主要更新feature：</p>
<ul>
<li><a href="https://www.oschina.net/news/111734/homebrew-2-2-0-released">HOMEBREW_AUTO_UPDATE_SECS 的无操作情况明显更快，默认为 5 分钟（而不是 1 分钟）。</a></li>
</ul>
<p>这在homebrew&#x2F;brew的代码中也得到了证实：</p>
<p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1g9oiwq89r3j30y40b8myx.jpg" alt="update_secs"></p>
<p>可见，Homebrew官方自己也认为这个时间设置的太短了没啥意义。</p>
<p>考虑到我们装软件是个低频操作，不会天天装软件，犯不着每次装软件都去检查一次更新。这个环境变量的取值可以设置的大胆一些，比如一个月，或着两周。设置方法跟本文中其他环境变量的方式相同，这里不再赘述。</p>
<p>注意，这种方法只是尽可能延迟检查更新的时间，达到减少更新次数的目的，并不能完全避免卡顿，所以显得比较鸡肋。个人更喜欢第二种方法，更换更快的镜像源。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行操作sqlite</title>
    <url>/2020/04/04/access-sqlite3-from-command-line/</url>
    <content><![CDATA[<p><code>sqlite</code>是世界上最广泛部署的数据库引擎。它无需服务器，仅仅需要一个数据文件，就能够实现自给自足、零配置且带事务支持的数据库引擎。因为轻便简单，是各种嵌入式程序的首选数据库。通过命令行操作<code>sqlite</code>也十分简单。最常用的命令列举如下：</p>
<ol>
<li><p>打开数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlite3 your_db_filename.sqlite3</span><br></pre></td></tr></table></figure>
<p><code>sqlite</code>数据库文件一般以*.sqlite3<em>或</em>.db*结尾。</p>
</li>
<li><p>查看帮助</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.help</span><br></pre></td></tr></table></figure></li>
<li><p>查看数据库表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.table</span><br></pre></td></tr></table></figure></li>
<li><p>查看建表语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.schema your_table_name</span><br></pre></td></tr></table></figure></li>
<li><p>查询某个表的数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">select * from your_table_name;</span><br></pre></td></tr></table></figure>
<p>注意这里的sql语句后面必须带分号。</p>
</li>
</ol>
<p>同<code>select</code>一样，一般的标准sql语句都是支持的。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>intellij idea添加阿里巴巴编码规范插件</title>
    <url>/2020/03/31/add-alibaba-coding-guidelines-for-intellij-idea/</url>
    <content><![CDATA[<p>我们编写java程序都需要遵循一定的编码规范。阿里巴巴提供了一个优秀的IDEA插件，用来检测代码是否符合《阿里巴巴Java开发手册》里规定的编码规范。</p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>安装方法很简单：<br>依次打开IDEA -&gt; File -&gt; Settings -&gt; Plugins， 然后在搜索框里搜索<em>alibaba</em>，第一个就是“Alibaba Java Coding Guidelines”，点击安装即可。安装完成后，重启IDEA生效。 </p>
<h3 id="使用插件"><a href="#使用插件" class="headerlink" title="使用插件"></a>使用插件</h3><p>在代码窗口右键，点击”编码规约扫描“即可启动扫描程序，对不符合阿里编码规范的地方会在底部<em>Event Log</em>窗口展示出来。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Git手动打标签</title>
    <url>/2020/10/02/common-git-tag-usage/</url>
    <content><![CDATA[<p>使用git很久了，以前都是直接用<code>git-flow</code>来管理git工作流，对标签tag的管理都由<code>git-flow</code>脚本封装好，自动完成了。这次因为项目特殊，需要每日手动打标签tag，特地记录一下。</p>
<h5 id="git标签分类"><a href="#git标签分类" class="headerlink" title="git标签分类"></a>git标签分类</h5><p>git的标签分两种：轻量标签(lightweight) 和 附注标签(annotated)。轻量标签义如其名，仅仅是对某个commit的一个引用。附注标签则是存储于git数据库中的一个完整对象，包含了打标签者的名字、email、日期时间、以及标签信息，并且可以GPG签名验证。<br>一般我们建议创建附注标签。</p>
<h5 id="列举标签"><a href="#列举标签" class="headerlink" title="列举标签"></a>列举标签</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag</span><br></pre></td></tr></table></figure>

<h5 id="查看标签"><a href="#查看标签" class="headerlink" title="查看标签"></a>查看标签</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git show v20201002-1</span><br></pre></td></tr></table></figure>

<h5 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h5><p>创建附注标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -a v20201002-1 -m &quot;new feature: dropbox support&quot;</span><br></pre></td></tr></table></figure>
<p>创建轻量标签：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag v20201002-1w</span><br></pre></td></tr></table></figure>

<h5 id="删除标签"><a href="#删除标签" class="headerlink" title="删除标签"></a>删除标签</h5><p>从本地仓库删除：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git tag -d v20201002-1</span><br></pre></td></tr></table></figure>
<p>从远程仓库删除：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git push origin --delete v20201002-1</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>centos7安装并启用iptables</title>
    <url>/2020/04/02/centos7-enable-iptables/</url>
    <content><![CDATA[<p>centos从7之后默认使用<em>firewalld</em>作为防火墙配置服务, 很多Linux老手不熟悉，还是喜欢原汁原味的<em>iptables</em>。这里整理一下如何把<em>firewalld</em>换回<em>iptables</em>。</p>
<h3 id="安装iptables-service"><a href="#安装iptables-service" class="headerlink" title="安装iptables-service"></a>安装iptables-service</h3><p>首先检查是否安装了<em>iptables</em>，如果没有安装，需要先安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y iptables</span><br></pre></td></tr></table></figure>
<p>若已经安装了，先升级：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum update iptables</span><br></pre></td></tr></table></figure>
<p>再安装<em>iptables-service</em>:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y iptables-service</span><br></pre></td></tr></table></figure>

<h3 id="停用自带的firewalld"><a href="#停用自带的firewalld" class="headerlink" title="停用自带的firewalld"></a>停用自带的firewalld</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br></pre></td></tr></table></figure>

<h3 id="开启iptables-service"><a href="#开启iptables-service" class="headerlink" title="开启iptables-service"></a>开启iptables-service</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable iptables.service</span><br><span class="line">systemctl start iptables.service</span><br></pre></td></tr></table></figure>

<p>OK，接下来就可以用<em>iptables</em>愉快地玩耍了。更多iptables设置请参考<a href="/2020/04/02/iptables-common-configuration/" title="iptables常用配置">这篇文章</a>。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>gitignore文件常用规则</title>
    <url>/2020/08/19/common-rules-about-gitignore-file/</url>
    <content><![CDATA[<p>.gitignore文件是Git的忽略配置文件，几乎每个Giter都需要跟这个文件打交道，有必要熟悉并记住它的一些常用规则。具体罗列如下：</p>
<ul>
<li>所有空行或注释符号<code>#</code>开头的行都被忽略不计</li>
<li>规则按顺序从前到后依次生效</li>
<li>第一个<code>/</code>匹配Git项目根目录</li>
<li>以<code>/</code>结尾表示匹配的是目录</li>
<li>通配符<code>*</code>可匹配任意多个字符，通配符<code>?</code>匹配单个字符。<strong>注意</strong>：通配符不会匹配路径分隔符<code>/</code></li>
<li>两个连续星号<code>**</code>有特殊含义：<ul>
<li>以<code>**/</code>开头表示匹配所有目录下的，例如<code>**/readme.md</code>匹配所有目录下的<code>readme.md</code>文件。</li>
<li>以<code>/**</code>结尾表示匹配目录下的所有内容，例如<code>a/**</code>匹配目录a下的所有文件和目录、子目录等。</li>
<li><code>a/**/b</code>表示匹配目录a到目录b之间的0或多层目录，例如<code>a/**/b</code>可匹配 <code>a/b</code>, <code>a/x/b</code>,<code>a/x/y/b</code>等。</li>
</ul>
</li>
<li>以惊叹号<code>!</code>开头表示不忽略，即不忽略匹配到本行规则的文件或目录。一般用于在前面规则里被忽略了，但是又想加回到版本控制的文件或目录。<strong>注意</strong>：如果匹配到的父目录还是忽略状态，则本文件或目录保持忽略状态。</li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>权限控制的相关概念辨析</title>
    <url>/2020/03/05/concepts-about-authentication/</url>
    <content><![CDATA[<p>我们做后端开发，权限控制是绕不开的话题。几乎所有后台系统都需要权限控制模块。权限控制涉及的概念不多，但容易混淆，这里尝试简单梳理一下。为了便于大家理解，我们结合案例来加以说明。</p>
<h3 id="什么是权限控制"><a href="#什么是权限控制" class="headerlink" title="什么是权限控制?"></a>什么是权限控制?</h3><p>某个主体(subject)对某个客体(object)需要实施某种操作(operation)，系统对这种操作的限制就是权限控制。<br>权限控制涉及三个概念：</p>
<ul>
<li>**主体(subject)**：可以拥有权限的概念对象，比如 用户、角色、岗位、部门等。</li>
<li>**客体(object)**：可以被用来进行权限控制的概念对象，比如 文件、菜单、功能、操作等。</li>
<li>**操作(operation)**：主体对客体进行的访问动作，比如 读、写、执行、查询、修改、新增、删除等。</li>
</ul>
<p>主体能够做什么，就是权限。权限可以细分为不同的能力。比如，在Linux文件系统中，文件具备读、写、执行三种能力。</p>
<p>要充分理解权限控制，需要仔细分辨以下几组概念。</p>
<ul>
<li>认证 和 授权</li>
<li>访问 和 验证</li>
<li>操作权限 和 数据权限</li>
</ul>
<h3 id="认证-Authentication-VS-授权-Authorization"><a href="#认证-Authentication-VS-授权-Authorization" class="headerlink" title="认证(Authentication) VS 授权(Authorization)"></a>认证(Authentication) VS 授权(Authorization)</h3><p><strong>认证</strong>是识别操作者是谁的过程，解决<code>Who am I</code>的问题。<br><strong>授权</strong>是识别操作者能够做什么事，解决<code>What can I do</code>的问题。</p>
<p>认证是进入系统的第一步，通常就是指系统中的“登录”这一步。认证的常见实现方式有：表单验证、Http Basic验证、OAuth2等。在做授权之前，需要先完成认证。举个例子，我要在Github中新建一个project，第一步要做的就是登录Github，完成用户鉴权，让Github知道<strong>我是谁</strong>，然后Github才能判断我是否有权限创建一个project。</p>
<p>认证只关注我是谁，不管后面的业务权限如何分配。通过<strong>认证</strong>进入系统的用户，能够做什么事，则交给<strong>授权</strong>来处理。</p>
<h3 id="访问-Access-VS-验证-Validation"><a href="#访问-Access-VS-验证-Validation" class="headerlink" title="访问(Access) VS 验证(Validation)"></a>访问(Access) VS 验证(Validation)</h3><p>访问和验证可以看做是授权的两个步骤。访问解决<code>Can I call this operation</code>的问题，验证解决<code>Can I access the data behind this operation</code>的问题。对于接口来说，我能不能调用这个接口，是<strong>访问</strong>问题，它与数据无关，可以在网关层拦截。而我能够调用这个接口，但能不能操作接口后面的数据，则需要<strong>验证</strong>。再拿Github举例，假定我要删除一个project。首先，我作为登陆用户，可以访问<em>删除project</em>接口，但我只能删除属于我的项目，不能删除别人的项目，这就是<strong>验证</strong>要做的工作。验证一般需要在接口的业务逻辑层实现。</p>
<h3 id="操作权限-VS-数据权限"><a href="#操作权限-VS-数据权限" class="headerlink" title="操作权限 VS 数据权限"></a>操作权限 VS 数据权限</h3><p><strong>操作权限</strong> 就是控制用户可以访问的操作。<strong>数据权限</strong>则控制被访问数据的可见范围。<br>实际上，访问 和 验证 就分别对应了 操作权限 和 数据权限。</p>
<p>我们一般的权限管理系统，都是针对操作权限给出的解决方案。目前比较成熟的有 Apache Shiro、Spring Security等基于RBAC模型的框架。而对于数据权限，由于跟业务结合过于紧密，目前尚无统一的成熟框架。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本文介绍了权限控制相关的核心概念，并对认证和授权、访问和验证、操作权限和数据权限这几组容易混淆的概念做了澄清。希望能够帮助大家在做权限控制系统设计时少走弯路。</p>
]]></content>
      <tags>
        <tag>Architecture</tag>
      </tags>
  </entry>
  <entry>
    <title>java局部变量、实例变量、静态变量辨析</title>
    <url>/2020/05/05/differences-of-java-variables/</url>
    <content><![CDATA[<p>根据声明位置的不同，我们一般可以将java的变量分为两个类型：<strong>成员变量</strong>和<strong>局部变量</strong>。</p>
<h3 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h3><p>成员变量是指声明在类中、类方法之外的变量，包括：</p>
<ul>
<li>实例变量： 无static修饰。</li>
<li>类变量(静态变量)：有static修饰。<br>局部变量是指声明在类方法中的变量，包括：</li>
<li>方法参数变量：也就是形参。</li>
<li>方法局部变量：声明在方法体{}内，方法体嵌套的代码块外。</li>
<li>代码块局部变量：声明在方法体嵌套的代码块内。</li>
</ul>
<h3 id="各种变量的特征"><a href="#各种变量的特征" class="headerlink" title="各种变量的特征"></a>各种变量的特征</h3><p>接下来用一个表格阐述一下这5种类型的变量各自的特征。</p>
<table>
<thead>
<tr>
<th></th>
<th>声明&#x2F;定义方式</th>
<th>作用域&amp;生命周期</th>
<th>访问权限</th>
<th>默认值&amp;初始化</th>
<th>内存分配</th>
</tr>
</thead>
<tbody><tr>
<td>方法参数变量</td>
<td>方法形参</td>
<td>方法执行时创建，执行完释放</td>
<td>方法体内可见</td>
<td>无，必须明确初始化</td>
<td>栈区(java虚拟机栈)</td>
</tr>
<tr>
<td>方法局部变量</td>
<td>方法体{}内</td>
<td>方法执行时创建，执行完释放</td>
<td>方法体内可见</td>
<td>无，必须明确初始化</td>
<td>栈区(java虚拟机栈)</td>
</tr>
<tr>
<td>代码块局部变量</td>
<td>方法体内的某个代码块{}内</td>
<td>代码块执行时创建，执行完释放</td>
<td>代码块内可见</td>
<td>无，必须明确初始化</td>
<td>栈区(java虚拟机栈)</td>
</tr>
<tr>
<td>实例变量</td>
<td>类中，方法体外</td>
<td>对象创建时创建，对象销毁时释放</td>
<td>由修饰符决定</td>
<td>有，引用类型为null，基本数据类型为java预定义的默认值</td>
<td>随对象一起分配在堆上</td>
</tr>
<tr>
<td>静态变量</td>
<td>类中，方法体外，带static修饰符</td>
<td>类加载时创建，类卸载时销毁</td>
<td>由修饰符定</td>
<td>有，引用类型为null，基本数据类型为java预定义的默认值</td>
<td>方法区(静态存储区)</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Django常用命令</title>
    <url>/2020/04/04/django-common-usage/</url>
    <content><![CDATA[<p>最近在用<code>Django</code>做项目，整理了一下常用的命令，以备自查。</p>
<h4 id="工程构建-运行"><a href="#工程构建-运行" class="headerlink" title="工程构建&amp;运行"></a>工程构建&amp;运行</h4><ol>
<li>查看<code>Django</code>版本<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m django --version</span><br></pre></td></tr></table></figure></li>
<li>创建工程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">django-admin startproject your_project_name</span><br></pre></td></tr></table></figure></li>
<li>创建App<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py startapp your_app_name</span><br></pre></td></tr></table></figure></li>
<li>本地测试运行工程<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py runserver 8000</span><br></pre></td></tr></table></figure></li>
<li>创建后台管理员<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="数据迁移migration"><a href="#数据迁移migration" class="headerlink" title="数据迁移migration"></a>数据迁移migration</h4><ol>
<li>执行迁移<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure></li>
<li>创建迁移<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations your_app_name</span><br></pre></td></tr></table></figure></li>
<li>检查迁移sql<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py sqlmigration your_app_name your_migration_sequence_no</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="日常调试-测试"><a href="#日常调试-测试" class="headerlink" title="日常调试 &amp; 测试"></a>日常调试 &amp; 测试</h4><ol>
<li>打开命令行AP<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure></li>
<li>执行自动测试<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py test your_app_name</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Conda简介及基本用法</title>
    <url>/2020/02/18/conda-basic-usage/</url>
    <content><![CDATA[<h2 id="什么是Conda？"><a href="#什么是Conda？" class="headerlink" title="什么是Conda？"></a>什么是Conda？</h2><p>Conda是一种通用包管理系统，旨在构建和管理任何语言和任何类型的软件。Conda主要提供包管理和环境管理两种能力。包管理与pip的使用类似，环境管理则允许用户同时安装多个版本的python，并支持快速切换。</p>
<h2 id="Conda常用命令"><a href="#Conda常用命令" class="headerlink" title="Conda常用命令"></a>Conda常用命令</h2><h3 id="Conda包管理"><a href="#Conda包管理" class="headerlink" title="Conda包管理"></a>Conda包管理</h3><p>1.查看已安装的所有包: conda list<br>2.查看已安装的特定包：conda list scrapy<br>3.搜索云上的包: conda search scrapy<br>4.安装包: conda install scrapy<br>5.一次安装多个包: conda install numpy pandas scipy<br>6.安装固定版本的包: conda install numpy&#x3D;1.10<br>7.从指定频道安装包: conda install scrapy -c conda-forge<br>8.升级一个包: conda update scrapy<br>9.升级全部包: conda upgrade –all</p>
<h3 id="Conda环境管理"><a href="#Conda环境管理" class="headerlink" title="Conda环境管理"></a>Conda环境管理</h3><p>1.查看所有虚拟环境： conda env list<br>2.激活特定环境：activate env_name<br>3.退出环境：deactivate env_name<br>4.创建虚拟环境：conda create -n env_name <list of package names><br>5.创建虚拟环境并指定特定Python版本：conda create -n env_name python2&#x3D;2.7<br>6.删除虚拟环境：conda env remove -n env_name</p>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Conda</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker简介</title>
    <url>/2020/01/12/docker-basic-concepts/</url>
    <content><![CDATA[<h2 id="Docker-基本概念"><a href="#Docker-基本概念" class="headerlink" title="Docker 基本概念"></a>Docker 基本概念</h2><p>理解Docker, 必须先搞懂以下三个基本概念:</p>
<ul>
<li><em><strong>镜像(Image)</strong></em>: 相当于一套root文件系统。</li>
<li><em><strong>容器(Container)</strong></em>: 容器是镜像运行的实体，实际上就是一个普通进程。</li>
<li><em><strong>仓库(Repository)</strong></em>: 存储Docker镜像的中心仓库。比如Docker Hub就是公共的镜像仓库。</li>
</ul>
<p>容器和镜像的关系类似于面向对象语言的类和实例。</p>
<h2 id="Docker-结构图"><a href="#Docker-结构图" class="headerlink" title="Docker 结构图"></a>Docker 结构图</h2><p>Docker采用C&#x2F;S模式管理远程Docker容器。<br>Docker容器可被创建、启动、停止、删除、暂停。<br>Docker容器通过Docker镜像来创建。</p>
<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200112212304-731097.png" alt="Docker运行结构图"></p>
]]></content>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>命令行导出MySQL数据库表数据示例</title>
    <url>/2022/06/22/dump-mysql-database-table/</url>
    <content><![CDATA[<h2 id="命令行导出MySQL数据库表数据示例"><a href="#命令行导出MySQL数据库表数据示例" class="headerlink" title="命令行导出MySQL数据库表数据示例"></a>命令行导出MySQL数据库表数据示例</h2><ul>
<li><p>导出所有数据库所有表:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --all-databases &gt; ./all_dbs_data.sql</span><br></pre></td></tr></table></figure>


</li>
<li><p>导出<code>db1</code>, <code>db2</code>数据库:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --databases db1 db2 &gt; ./db1_db2_data.sql</span><br></pre></td></tr></table></figure>


</li>
<li><p>导出<code>db1</code>数据库的<code>t1</code>,<code>t2</code>表:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --databases db1 --tables t1 t2 &gt; ./db1_t1_t2_data.sql</span><br></pre></td></tr></table></figure>


</li>
<li><p>导出<code>db1</code>数据库的<code>t1</code>表中<code>id=1</code>的数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --databases db1 --tables t1 --where=&#x27;id=1&#x27; &gt; ./t1_w1.sql</span><br></pre></td></tr></table></figure>


</li>
<li><p>只导出表结构, 不含数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -uroot -ppassword --no-data --databases db1 --tables t1 &gt; ./t1_structure.sql</span><br></pre></td></tr></table></figure>


</li>
<li><p>导出远程MySQL服务器的数据:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -hhost -Pport -uroot -ppassword --databases db1 &gt; ./remote_db1_data.sql</span><br></pre></td></tr></table></figure>


</li>
<li><p>从<code>host1</code>服务器导出<code>db1.tb1</code>表数据,然后导入到<code>host2</code>服务器的<code>db2.tb1</code>表(会自动建表):</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqldump -hhost1 -Pport1 -uroot1 -ppassword1 --databases db1 --tables t1 | mysql -hhost2 -Pport2 -uroot2 -ppassword2 db2</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>example</tag>
      </tags>
  </entry>
  <entry>
    <title>一次性搞定Git中忽略.DS_Store文件</title>
    <url>/2020/08/19/git-ignore-ds_store-files-in-mac/</url>
    <content><![CDATA[<p>.DS_Store文件是Mac系统用来存储当前文件夹的显示属性元数据的，如图标位置等设置。.DS_Store广泛存在于每个文件夹下，一般供Finder、Spotlight使用。而对于基于Git托管的代码仓库来说，.DS_Store就是无用数据了。我们需要在Git中忽略它们。</p>
<p>忽略.DS_Store文件，我们通常有两种选择：</p>
<h4 id="1-当前项目忽略"><a href="#1-当前项目忽略" class="headerlink" title="1. 当前项目忽略"></a>1. 当前项目忽略</h4><p>在当前项目根目录的.gitignore文件中添加如下一行即可:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim .gitignore</span></span><br><span class="line">**/.DS_Store</span><br></pre></td></tr></table></figure>
<p>.gitignore文件常用规则可以<a href="/2020/08/19/common-rules-about-gitignore-file/" title="gitignore文件常用规则">看这里</a>。</p>
<p>对于已经在Git版本控制的中.DS_Store，希望Git能够忽略，但不删除本地文件，需要在terminal中输入以下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .DS_Store</span><br></pre></td></tr></table></figure>
<p>Git如何屏蔽已经加入版本控制的文件可以<a href="/2020/04/23/gitignore-files-already-under-git-version-control/" title="正确设置.gitignore忽略已经纳入版本控制的文件">看这里</a>。</p>
<p>这种方式每当开新项目时都要配置，用起来比较麻烦。</p>
<h4 id="2-全局忽略"><a href="#2-全局忽略" class="headerlink" title="2. 全局忽略"></a>2. 全局忽略</h4><p>首先创建一个 ~&#x2F;.gitignore_global文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">touch ~/.gitignore_global</span><br></pre></td></tr></table></figure>
<p>然后在文件中添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim ~/.gitignore_global</span></span><br><span class="line">**/.DS_Store</span><br></pre></td></tr></table></figure>
<p>最后，将.gitignore_global作为Git的全局忽略配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global core.excludesfile ~/.gitignore_global</span><br></pre></td></tr></table></figure>
<p>这种方式一劳永逸，不用每个项目都单独配置了。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中实现计数统计的4种方法</title>
    <url>/2020/02/26/four-ways-to-count-in-python/</url>
    <content><![CDATA[<p>我们在日常开发过程中经常会遇到这样的需求，统计某个IP的访问次数，统计某个商户的订单数 等等。这类统计统称为计数统计。<br>作为一门优秀的高级语言，Python提供了至少4种方式来方便地实现计数统计。下面我们举例说明。<br>首先给出问题: 给定下面的输入和输出，实现<code>name_count</code>方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Input:</span></span><br><span class="line">names = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;cindy&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;cindy&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Inteface</span></span><br><span class="line">result = name_count(names)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Output:</span></span><br><span class="line">&#123;<span class="string">&#x27;alice&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;bob&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;cindy&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;ocre&#x27;</span>: <span class="number">3</span>, <span class="string">&#x27;tom&#x27;</span>: <span class="number">1</span>&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="1-使用dict字典实现计数统计"><a href="#1-使用dict字典实现计数统计" class="headerlink" title="1. 使用dict字典实现计数统计"></a>1. 使用dict字典实现计数统计</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">name_count</span>(<span class="params">names</span>):</span><br><span class="line">    name_counts = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">            name_counts[name] = <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            name_counts[name] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> name_counts</span><br></pre></td></tr></table></figure>

<h3 id="2-使用defaultdict实现计数统计"><a href="#2-使用defaultdict实现计数统计" class="headerlink" title="2. 使用defaultdict实现计数统计"></a>2. 使用defaultdict实现计数统计</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name_count</span>(<span class="params">names</span>):</span><br><span class="line">    name_counts = defaultdict(<span class="keyword">lambda</span>: <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">        name_counts[name] += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> name_counts</span><br></pre></td></tr></table></figure>

<h3 id="3-使用set和list实现计数统计"><a href="#3-使用set和list实现计数统计" class="headerlink" title="3. 使用set和list实现计数统计"></a>3. 使用set和list实现计数统计</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">name_count</span>(<span class="params">names</span>):</span><br><span class="line">    name_set = <span class="built_in">set</span>(names)</span><br><span class="line">    name_list = []</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> name_set:</span><br><span class="line">        name_list.append(name, names.count(name))</span><br><span class="line">    <span class="keyword">return</span> name_list</span><br></pre></td></tr></table></figure>

<h3 id="4-使用Counter实现计数统计"><a href="#4-使用Counter实现计数统计" class="headerlink" title="4.使用Counter实现计数统计"></a>4.使用Counter实现计数统计</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">name_count</span>(<span class="params">names</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">dict</span>(Counter(names))</span><br></pre></td></tr></table></figure>

<p>可见，使用<code>Counter</code>类的第4种方法代码最简洁。<br>有了以上4种方法，平时面对小规模数据集的计数统计问题时就能够手到擒来了。</p>
<p>更多统计实现方式等待发现！</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>一步步打造高效coding环境 - git的安装和配置</title>
    <url>/2020/03/30/git-setup-and-basic-configuration-for-win10/</url>
    <content><![CDATA[<h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>从<a href="https://git-scm.com/downloads">git官方</a>下载。<br>安装时一路next即可。</p>
<h3 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h3><ol>
<li><p>配置user和email账号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;your name&quot;</span><br><span class="line">git config --global user.email &quot;your email address&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>创建SSH key</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your email address&quot;</span><br></pre></td></tr></table></figure>
<p>以上命令将在用户目录下生成一个隐藏目录<code>.ssh</code>，里边有<code>id_rsa</code>和<code>id_rsa.pub</code>两个密钥文件。这两个文件就是本机SSH的密钥对，前者是私钥，务必保密，后者是公钥，可以放心告诉其他人。</p>
</li>
<li><p>关联GitHub<br>登录GitHub，点击右上角用户头像打开<code>settings</code> -&gt; <code>SSH and GPG keys</code>页面，点击  <code>Add SSH Key</code>,将上一步生成的公钥<code>id_rsa.pub</code>文件内容拷贝到输入框，点<code>Add Key</code>保存即可。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>使用git stash暂存和恢复工作进度</title>
    <url>/2020/05/03/git-stash-usage/</url>
    <content><![CDATA[<p>我们有时候正在开发一个feature，突然同事插进来说发现一个重大bug，需要立即修复。但是我们的feature才编码一半，不能提交。这时候就轮到<code>git stash</code>闪亮登场了。<br><code>git stash</code>命令可以让我们先把当前的修改内容暂存在本地，保持working directory干净状态，接着就可以切换分支去修bug了。修完bug后，再把分支切回来，使用<code>git stash pop</code>命令恢复之前的修改内容，继续我们的feature编码。<br><code>git stash</code>命令支持调用多次，它有一个类似栈的概念，每调用一次会把当前未暂存的修改压栈，然后可以使用<code>git stash pop</code> 从栈顶拿出最近一次压栈的修改内容。</p>
<h3 id="git-stash常见用法"><a href="#git-stash常见用法" class="headerlink" title="git stash常见用法"></a>git stash常见用法</h3><ul>
<li><code>git stash</code>  - 暂存当前修改</li>
<li><code>git stash save &#39;some message&#39;</code> - 功能同<code>git stash</code>，可额外添加一个注释信息便于找回</li>
<li><code>git stash list</code> - 查看当前有哪些暂存的修改，可以列出stash_id，供后续恢复时使用</li>
<li><code>git stash pop</code> - 取出最新的修改内容</li>
<li><code>git stash pop --index</code>  - 恢复最新的修改内容到工作区和暂存区</li>
<li><code>git stash pop &#39;stash_id&#39;</code> - 恢复到指定的stash_id对应的修改内容</li>
<li><code>git stash apply</code> - 功能同<code>git stash pop</code>但不删除刚从栈中取出的这个stash</li>
<li><code>git stash drop</code> - 删除最新的修改内容stash</li>
<li><code>git stash drop &#39;stash_id&#39;</code> - 根据stash_id删除栈记录</li>
<li><code>git stash clear</code> - 清空stash栈（删除所有stash记录）</li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>正确设置.gitignore忽略已经纳入版本控制的文件</title>
    <url>/2020/04/23/gitignore-files-already-under-git-version-control/</url>
    <content><![CDATA[<p>初建git项目时，考虑不完整，常常会将logs、cache等目录也纳入版本控制中。后续进入开发过程中，才意识到要将这些目录屏蔽掉。于是想到<code>.gitignore</code>文件。<br>简单设置.gitignore 文件后，执行git push，发现被屏蔽的目录下文件仍然赫然在列，忽略设置并未生效。咋回事呢？</p>
<h4 id="不生效原因"><a href="#不生效原因" class="headerlink" title="不生效原因"></a>不生效原因</h4><p>被纳入版本管理的文件，在git中会有缓存，即使声明了要ignore掉也不行</p>
<h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><p>知道是缓存搞怪，清掉本地缓存重新push就ok了。具体操作如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;update .gitignore and clear local cache&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP计算货币金额的方法</title>
    <url>/2020/04/24/how-to-calculate-money-with-php/</url>
    <content><![CDATA[<p>涉及到计算金额，PHP提供了两类方法。一类是使用<code>floor()</code>和<code>round()</code>进行四舍五入，还有一类是以<code>bc</code>打头的一系列函数。</p>
<h3 id="使用floor-和-round-计算金额"><a href="#使用floor-和-round-计算金额" class="headerlink" title="使用floor() 和 round()计算金额"></a>使用floor() 和 round()计算金额</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//计算折扣</span></span><br><span class="line"><span class="variable">$value</span> = <span class="string">&#x27;9.95&#x27;</span>;<span class="comment">//折扣</span></span><br><span class="line"><span class="variable">$money</span> = <span class="string">&#x27;39.555&#x27;</span>;<span class="comment">//原始价格，当然到这一步的价格，一般都是小数点后两位的，此处保留三位，主要是为了对比</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;原始价格：&#x27;</span>. <span class="variable">$money</span> * (<span class="variable">$value</span>/<span class="number">10</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;直接四舍五入：&#x27;</span>.<span class="title function_ invoke__">round</span>(<span class="variable">$money</span> * (<span class="variable">$value</span> / <span class="number">10</span>),<span class="number">2</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;截取小数点后1位：&#x27;</span>.<span class="title function_ invoke__">floor</span>(<span class="variable">$money</span> * <span class="variable">$value</span>)/<span class="number">10</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;截取小数点后2位&#x27;</span>.<span class="title function_ invoke__">floor</span>(<span class="variable">$money</span> * (<span class="variable">$value</span> / <span class="number">10</span>) * <span class="number">100</span>)/<span class="number">100</span>;</span><br><span class="line"><span class="keyword">die</span>;</span><br></pre></td></tr></table></figure>

<h3 id="使用bc类函数计算金额"><a href="#使用bc类函数计算金额" class="headerlink" title="使用bc类函数计算金额"></a>使用bc类函数计算金额</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * PHP精确计算  主要用于货币的计算用</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $n1 第一个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $symbol 计算符号 + - * / %</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $n2 第二个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> string $scale  精度 默认为小数点后两位</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  string</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">price_calc</span>(<span class="params"><span class="variable">$n1</span>, <span class="variable">$symbol</span>, <span class="variable">$n2</span>, <span class="variable">$scale</span> = <span class="string">&#x27;2&#x27;</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$symbol</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;+&quot;</span>:<span class="comment">//加法</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">bcadd</span>(<span class="variable">$n1</span>, <span class="variable">$n2</span>, <span class="variable">$scale</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;-&quot;</span>:<span class="comment">//减法</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">bcsub</span>(<span class="variable">$n1</span>, <span class="variable">$n2</span>, <span class="variable">$scale</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;*&quot;</span>:<span class="comment">//乘法</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">bcmul</span>(<span class="variable">$n1</span>, <span class="variable">$n2</span>, <span class="variable">$scale</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;/&quot;</span>:<span class="comment">//除法</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">bcdiv</span>(<span class="variable">$n1</span>, <span class="variable">$n2</span>, <span class="variable">$scale</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;%&quot;</span>:<span class="comment">//求余、取模</span></span><br><span class="line">            <span class="variable">$res</span> = <span class="title function_ invoke__">bcmod</span>(<span class="variable">$n1</span>, <span class="variable">$n2</span>, <span class="variable">$scale</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$res</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$res</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title>使用netlify自动发布hexo博客</title>
    <url>/2019/12/08/hexo-with-netlify/</url>
    <content><![CDATA[<p>使用hexo博客发布一篇博文的流程为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n &quot;a new post&quot;</span><br><span class="line">hexo g -d</span><br></pre></td></tr></table></figure>
<p>以上操作将博文的.md文件编译成.html文件，连同资源文件一起打包发布到网站空间里。对于.md源文件，默认是没有版本控制的。 为了防止丢失、误删，以及使用多个电脑管理博客，我们需要为hexo工程建一个单独的git仓库，并同步到github、coding等托管平台。实际使用中，除了上面列出来的两条命令外，还需要执行以下操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;add a new post, bla bla bla&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>

<p>我正在尝试一种新方式，使用netlify来做持续集成和自动部署。<br>在source&#x2F;_posts目录下新建一个.md文件用来写博文，可以用任何markdown编辑器来写，写完后直接<code>add commit push</code>即可。具体命令为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;add a new post, bla bla bla&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<p>这种新方式非常灵活，不需要hexo命令，也就不需要在每台电脑上安装hexo以及所依赖的node.js, npm等。只需要电脑上有git即可操作。</p>
<p>netlify配置步骤，可参考官方blog：<a href="https://www.netlify.com/blog/2015/10/26/a-step-by-step-guide-hexo-on-netlify/">A Step-by-Step Guide: Hexo on Netlify</a></p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用系统命令把文件内容复制到剪贴板</title>
    <url>/2023/11/20/how-to-copy-file-content-to-clipboard/</url>
    <content><![CDATA[<p>换电脑后需要给<code>github</code>配置新的<code>ssh key</code>以便于通过<code>ssh</code>协议免密<code>push</code>代码。使用<code>ssh-keygen -t rsa -C &quot;xx@xx.com&quot;</code> 在本机生成<code>ssh密钥对</code>后，需要把<code>~/.id_rsa.pub</code>公钥文件的内容复制出来，再粘贴到<code>github</code>账号里。通常做法是用诸如记事本、notpad++等文本编辑软件直接打开<code>id_rsa.pub</code>文件，然后<code>Ctrl+A</code>、<code>Ctrl+C</code>复制到系统剪贴板即可。不过为了显得有技术范(装逼)，想试试直接用命令行执行这一动作。一时记不起来windows下如何用命令行复制文件内容了，查了些资料，整理如下。</p>
<h4 id="Windows-PowerShell"><a href="#Windows-PowerShell" class="headerlink" title="Windows PowerShell"></a>Windows PowerShell</h4><p>对于<code>PowerShell</code>, 直接使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub | clip</span><br></pre></td></tr></table></figure>

<h4 id="Windows-CommandLine"><a href="#Windows-CommandLine" class="headerlink" title="Windows CommandLine"></a>Windows CommandLine</h4><p>对于传统的<code>cmd</code>命令行，直接使用如下命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">clip &lt; id_rsa.pub</span><br></pre></td></tr></table></figure>

<h3 id="Linux-Shell"><a href="#Linux-Shell" class="headerlink" title="Linux Shell"></a>Linux Shell</h3><p>对于<code>Linux</code>系统来说，反倒比较麻烦一点点，需要先安装外部小工具，<code>xsel</code>、<code>xclip</code>, 使用<code>yum</code>或<code>apt-get</code>安装都可以。<br>如果是<code>xclip</code>，直接用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub | xclip</span><br></pre></td></tr></table></figure>
<p>如果是<code>xsel</code>, 使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat id_rsa.pub | xsel</span><br></pre></td></tr></table></figure>
<p>内容将复制到系统剪贴板。注意，一般云厂商提供的服务器没有配置输入输出设备，这俩命令都无效。</p>
]]></content>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>小议编码时for循环和while循环的选择</title>
    <url>/2020/05/04/how-to-choose-for-while/</url>
    <content><![CDATA[<p>大家都知道for循环和while循环是等价的，我们平时写代码既可以用for循环也可以用while循环，正所谓条条大路通罗马。可是，既然java选择保留了这两种循环，至少意味着它们在使用场合上还是有一些侧重的。先上个例子：<br><strong>猜数字游戏：系统先生成一个1-100之间的随机数(不让用户知道)，然后让用户来猜测输入的数字是几，如果用户输入正确则游戏结束，否则，给出大于、小于的提示，继续让用户输入。</strong><br>这个题目，如果用for循环来写，大概是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">guessNumberUsingFor</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----猜数字游戏开始------&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">givenNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Random().nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    java.util.<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请猜一个数字：&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">inputNumber</span> <span class="operator">=</span> scanner.nextInt(); inputNumber != givenNumber; inputNumber = scanner.nextInt()) &#123;</span><br><span class="line">        System.out.println((inputNumber &lt; givenNumber) ? <span class="string">&quot;猜小了,再猜：&quot;</span> : <span class="string">&quot;猜大了，再猜：&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;啊哈，猜对了！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----猜数字游戏结束------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>用while循环的版本如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">guessNumberUsingWhile</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;-----猜数字游戏开始------&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">givenNumber</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Random().nextInt(<span class="number">100</span>) + <span class="number">1</span>;</span><br><span class="line">    java.util.<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.util.Scanner(System.in);</span><br><span class="line">    System.out.println(<span class="string">&quot;请猜一个数字：&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">inputNumber</span> <span class="operator">=</span> scanner.nextInt();</span><br><span class="line">    <span class="keyword">while</span> (inputNumber != givenNumber) &#123;</span><br><span class="line">        System.out.println((inputNumber &lt; givenNumber) ? <span class="string">&quot;猜小了,再猜：&quot;</span> : <span class="string">&quot;猜大了，再猜：&quot;</span>);</span><br><span class="line">        inputNumber = scanner.nextInt();</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;啊哈，猜对了！&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;-----猜数字游戏结束------&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个例子，for版本似乎没有while版本顺滑，症结在于for循环版本把一些比较<strong>重</strong>的赋值、更新语句（这里是<code>scanner.nextInt()</code>）揉进了for循环的变量初始化和更新值的过程中，显得有违常识，影响了代码的可读性。对于习惯了<code>for(int i=0; i &lt; 10; i++) &#123;&#125;</code>这样的人来说，极有可能会忽视掉<code>inputNumber = scanner.nextInt()</code>这条最重要的业务处理语句。而while版本，判断逻辑非常清晰，读起来一气呵成，没有任何认知障碍。</p>
<p>再看第二个例子：<br>** 计算1到100的整数之和 **<br>for循环版本如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sumUsingFor</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>while循环版本为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sumUsingWhile</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;sum = &quot;</span> + sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子中，for循环的优势就比较明显了。首先，单单从代码行数上来讲，for循环7行，while循环需要9行，少了两行代码。其次，while循环里的<code>i++;</code>语句，稍微不仔细的话就可能忘记写了，造成无限循环！而且这错误属于逻辑错误，编译器也帮不了你。</p>
<p>从上面两个例子可以看出，选择合适的循环语句是需要费点脑子的。那么，到底什么时候该用for，什么时候适合用while，有没有什么规矩呢？有的。<br><strong>一般来说，while循环更适合于明确循环条件而不明确循环次数的场合，for循环则更适合于明确循环次数或范围的场合。</strong></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas中如何合并DataFrame的两列</title>
    <url>/2023/11/20/how-to-merge-two-dataframe-columns-with-pandas/</url>
    <content><![CDATA[<p>如下DataFrame, 一列日期，一列时间，现需要把日期和时间合并为一列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">&#x27;2023-01-05&#x27;</span>,<span class="string">&#x27;0930&#x27;</span>,<span class="number">100</span>],[<span class="string">&#x27;2023-01-05&#x27;</span>,<span class="string">&#x27;0935&#x27;</span>,<span class="number">200</span>],[<span class="string">&#x27;2023-01-05&#x27;</span>,<span class="string">&#x27;0940&#x27;</span>,<span class="number">333</span>]],columns=[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>,<span class="string">&#x27;数量&#x27;</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">       日期    时间   数量</span><br><span class="line">0  2023-01-05  0930  100</span><br><span class="line">1  2023-01-05  0935  200</span><br><span class="line">2  2023-01-05  0940  333</span><br></pre></td></tr></table></figure>

<p>最简单的做法是直接两列按字符串拼接：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间1&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + df[<span class="string">&#x27;时间&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>如果要合并的列不是字符串，则需显式转化一下再合并：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间2&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>].astype(<span class="built_in">str</span>) + <span class="string">&#x27; &#x27;</span> + df[<span class="string">&#x27;时间&#x27;</span>].astype(<span class="built_in">str</span>)</span><br></pre></td></tr></table></figure>
<p>还可以这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间3&#x27;</span>] = df[[<span class="string">&#x27;日期&#x27;</span>,<span class="string">&#x27;时间&#x27;</span>]].apply(<span class="keyword">lambda</span> x: <span class="string">&#x27; &#x27;</span>.join(x), axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间4&#x27;</span>] = df.apply(<span class="keyword">lambda</span> x: x[<span class="string">&#x27;日期&#x27;</span>] + <span class="string">&#x27; &#x27;</span> + x[<span class="string">&#x27;时间&#x27;</span>], axis=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p>如果要合并的列中有<code>nan</code>,则可以使用这个：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df[<span class="string">&#x27;日期时间5&#x27;</span>] = df[<span class="string">&#x27;日期&#x27;</span>].<span class="built_in">str</span>.cat(df[<span class="string">&#x27;时间&#x27;</span>], sep=<span class="string">&#x27; &#x27;</span>, na_rep=<span class="string">&#x27;?&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>最后效果如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; <span class="built_in">df</span></span></span><br><span class="line">       日期    时间   数量      日期时间1        日期时间2        日期时间3         日期时间4        日期时间5</span><br><span class="line">0  2023-01-05  0930  100  2023-01-05 0930  2023-01-05 0930  2023-01-05 0930  2023-01-05 0930  2023-01-05 0930</span><br><span class="line">1  2023-01-05  0935  200  2023-01-05 0935  2023-01-05 0935  2023-01-05 0935  2023-01-05 0935  2023-01-05 0935</span><br><span class="line">2  2023-01-05  0940  333  2023-01-05 0940  2023-01-05 0940  2023-01-05 0940  2023-01-05 0940  2023-01-05 0940</span><br></pre></td></tr></table></figure>

<p>完毕！</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>Django修改request对象的两种方法</title>
    <url>/2020/04/15/how-to-modify-django-request/</url>
    <content><![CDATA[<p>Django使用<code>request.GET</code>或<code>request.POST</code>来获取参数，而这两个属性都是不可变的<code>django.http.QueryDict</code>对象，默认是不支持修改的。而我们有时候需要修改请求参数，怎么做呢？</p>
<h4 id="方法1：拷贝副本-修改-赋值回去"><a href="#方法1：拷贝副本-修改-赋值回去" class="headerlink" title="方法1：拷贝副本-&gt; 修改 -&gt; 赋值回去"></a>方法1：拷贝副本-&gt; 修改 -&gt; 赋值回去</h4><p>可以利用<code>QueryDict</code>的<code>copy()</code>方法，得到一个可变的<code>QueryDict</code>副本，在副本上修改参数值后，再赋值给<code>request.GET</code>对象。 代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">local_product_list</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  获取本地产品列表</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  params = request.GET.copy()</span><br><span class="line">  params[<span class="string">&#x27;local&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">  request.GET = params</span><br><span class="line">  <span class="keyword">return</span> product_list(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_list</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  获取产品列表</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h4 id="方法2：修改不可变属性"><a href="#方法2：修改不可变属性" class="headerlink" title="方法2：修改不可变属性"></a>方法2：修改不可变属性</h4><p>直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">local_product_list</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  获取本地产品列表</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  mutable_value = request.GET._mutable</span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> mutable_value:</span><br><span class="line">    <span class="comment"># 原来不可变，改为可变</span></span><br><span class="line">    request.GET._mutable = <span class="literal">True</span></span><br><span class="line">  <span class="comment"># 修改参数值</span></span><br><span class="line">  request.GET[<span class="string">&#x27;local&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> mutable_value:</span><br><span class="line">    <span class="comment"># 原来不可变，这里改回去，保持原值</span></span><br><span class="line">    request.GET._mutable = <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> product_list(request)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">product_list</span>(<span class="params">request</span>):</span><br><span class="line">  <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">  获取产品列表</span></span><br><span class="line"><span class="string">  &quot;&quot;&quot;</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><code>QueryDict</code>的<code>update()</code>方法跟我们常用的<code>dict.update()</code>有所不同。<br>以下两段代码的效果是不一样的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>q2 = QueryDict(<span class="string">&#x27;local=False&#x27;</span>, mutable=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q2</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;local&#x27;</span>: [<span class="string">&#x27;False&#x27;</span>]&#125;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q2[<span class="string">&#x27;local&#x27;</span>] = <span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q2</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;local&#x27;</span>: [<span class="literal">True</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>q3 = QueryDict(<span class="string">&#x27;local=False&#x27;</span>, mutable=<span class="literal">True</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q3</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;local&#x27;</span>: [<span class="string">&#x27;False&#x27;</span>]&#125;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q3.update(&#123;<span class="string">&#x27;local&#x27;</span>: <span class="literal">True</span>&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>q3</span><br><span class="line">&lt;QueryDict: &#123;<span class="string">&#x27;local&#x27;</span>: [<span class="string">&#x27;False&#x27;</span>, <span class="literal">True</span>]&#125;&gt;</span><br></pre></td></tr></table></figure>
<p>这是因为， <code>request.GET[&#39;local&#39;] = True</code>是直接修改原<code>local</code>参数的值，而<code>request.GET.update(&#123;&#39;local&#39;: True&#125;)</code>是<strong>追加</strong>新的值到<code>local</code>参数值的数组中。请务必小心！</p>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo引用自己的文章</title>
    <url>/2020/01/07/how-to-quote-my-old-post-in-hexo/</url>
    <content><![CDATA[<p>用Hexo写Blog文章时，经常需要引用自己的另一篇文章，如何做呢？<br>可以使用Hexo自带的<code>post_link</code>标签。用法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link url_slug show_title %&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>url_slug</code>表示Hexo项目<code>source/_posts</code>目录中markdown文件的名字。比如，我有一篇Blog <a href="/2019/12/08/hexo-with-netlify/" title="使用netlify自动发布hexo博客">使用netlify自动发布hexo博客</a>, 它对应的markdown文件是<em>hexo-with-netlify.md</em>, 则<code>url_slug</code>就是<em>hexo-with-netlify</em>。<br><code>show_title</code>表示你想要在这里显示给用户看的文章标题，可以不用跟原博客标题保持一致。<br>拿刚刚这篇文章来说，我在引用它时，需要输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% post_link hexo-with-netlify 使用netlify自动发布hexo博客 %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas中如何合并DataFrame多行记录</title>
    <url>/2023/11/20/how-to-reduce-dataframe-columns-with-pandas/</url>
    <content><![CDATA[<p>如下DataFrame, 有三个列<code>site</code>、<code>material</code>、<code>LT</code>，现需要根据<code>material</code>把<code>site</code>去重后合并，并取出<code>LT</code>最大值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;A123&#x27;</span>,<span class="number">123</span>],</span><br><span class="line">       [<span class="string">&#x27;FOC&#x27;</span>,<span class="string">&#x27;A123&#x27;</span>,<span class="number">456</span>],</span><br><span class="line">       [<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;B456&#x27;</span>,<span class="number">112</span>],</span><br><span class="line">       [<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;B456&#x27;</span>,<span class="number">245</span>],</span><br><span class="line">       [<span class="string">&#x27;FJZ&#x27;</span>,<span class="string">&#x27;B456&#x27;</span>,<span class="number">110</span>],</span><br><span class="line">       [<span class="string">&#x27;FOC&#x27;</span>,<span class="string">&#x27;C789&#x27;</span>,<span class="number">202</span>],</span><br><span class="line">       [<span class="string">&#x27;FOC&#x27;</span>,<span class="string">&#x27;C789&#x27;</span>,<span class="number">205</span>]],columns=[<span class="string">&#x27;site&#x27;</span>,<span class="string">&#x27;material&#x27;</span>,<span class="string">&#x27;LT&#x27;</span>])</span><br></pre></td></tr></table></figure>
<p>原始DataFrame数据如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  site material   LT</span><br><span class="line">0  FJZ     A123  123</span><br><span class="line">1  FOC     A123  456</span><br><span class="line">2  FJZ     B456  112</span><br><span class="line">3  FJZ     B456  245</span><br><span class="line">4  FJZ     B456  110</span><br><span class="line">5  FOC     C789  202</span><br><span class="line">6  FOC     C789  205</span><br></pre></td></tr></table></figure>

<p>直接<code>groupby</code>后<code>join</code>:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;material&#x27;</span>).agg(&#123;<span class="string">&#x27;site&#x27;</span>: <span class="string">&#x27;,&#x27;</span>.join, <span class="string">&#x27;LT&#x27;</span>: <span class="built_in">max</span>&#125;).reset_index()</span><br></pre></td></tr></table></figure>
<p>处理后数据如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  material         site   LT</span><br><span class="line">0     A123      FJZ,FOC  456</span><br><span class="line">1     B456  FJZ,FJZ,FJZ  245</span><br><span class="line">2     C789      FOC,FOC  205</span><br></pre></td></tr></table></figure>
<p>第二行数据中，<code>site</code>列的<code>FJZ</code>出现了重复。<br>这里我们换一种思路，由于<code>site</code>列涉及去重、拼接两个步骤，可以先定义一个处理函数，把这两个步骤串起来。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">agg_func</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;,&#x27;</span>.join(<span class="built_in">set</span>(items))</span><br></pre></td></tr></table></figure>
<p>然后再调用这个函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df.groupby(<span class="string">&#x27;material&#x27;</span>).agg(&#123;<span class="string">&#x27;site&#x27;</span>: agg_func, <span class="string">&#x27;LT&#x27;</span>: <span class="built_in">max</span>&#125;).reset_index()</span><br></pre></td></tr></table></figure>
<p>最后效果如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  material     site   LT</span><br><span class="line">0     A123  FJZ,FOC  456</span><br><span class="line">1     B456      FJZ  245</span><br><span class="line">2     C789      FOC  205</span><br></pre></td></tr></table></figure>

<p>完毕！</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas DataFrame替换指定列的nan</title>
    <url>/2023/12/04/how-to-replace-nan-in-dataframe/</url>
    <content><![CDATA[<p>平时习惯针对整个DataFrame把nan替换成0，用<code>df.fillna(0, inplace=True)</code>就OK了。今天突然有人问，如何只替换某一列的<code>nan</code>。测试并记录如下。<br>构建测试DataFrame，由3列组成 <code>name</code>、<code>age</code>、<code>score</code>, 后两列都有<code>nan</code>值。接下来测试如何只处理<code>age</code>列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;name&#x27;</span>:[<span class="string">&#x27;aby&#x27;</span>,<span class="string">&#x27;boy&#x27;</span>,<span class="string">&#x27;cilia&#x27;</span>],<span class="string">&#x27;age&#x27;</span>:[<span class="number">18</span>,np.nan,<span class="number">20</span>],<span class="string">&#x27;score&#x27;</span>:[<span class="number">9.5</span>,<span class="number">8.0</span>,np.nan]&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line">df[<span class="string">&#x27;age&#x27;</span>].fillna(<span class="number">0</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>
<p>处理前，DataFrame如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    name   age  score</span><br><span class="line">0    aby  18.0    9.5</span><br><span class="line">1    boy   NaN    8.0</span><br><span class="line">2  cilia  20.0    NaN</span><br></pre></td></tr></table></figure>
<p>处理后，DataFrame如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    name   age  score</span><br><span class="line">0    aby  18.0    9.5</span><br><span class="line">1    boy   0.0    8.0</span><br><span class="line">2  cilia  20.0    NaN</span><br></pre></td></tr></table></figure>
<p>以上示例代码表明，可直接用<code>fillna()</code>方法针对某一列<code>DataSeries</code>做替换，参数同<code>DataFrame</code>一样。</p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>数据分析</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS 7 Yum安装低版本的MySQL（MySQL 5.6）</title>
    <url>/2020/01/19/how-to-yum-install-old-version-mysql/</url>
    <content><![CDATA[<p>我有一台阿里云RDS数据库到期了，考虑到目前业务规模，续费的性价比太低，不如在自己的ECS云服务器上装MySQL再把数据迁移过来。为了避免数据文件迁移时产生兼容性问题，要尽量保证自建MySQL跟RDS上的MySQL的主版本保持一致。<br>我的RDS上MySQL是5.6版本，而Mysql Yum仓库默认已经升级到8.0版本了，在Yum安装前需要做一些额外设置。</p>
<h2 id="添加MySQL-Yum源"><a href="#添加MySQL-Yum源" class="headerlink" title="添加MySQL Yum源"></a>添加MySQL Yum源</h2><p>首先，从 <a href="https://dev.mysql.com/downloads/repo/yum/">MySQL官方Yum仓库</a>选择适合当前CentOS版本的rpm包。</p>
<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200119215509-263995.png" alt="1579442107075"></p>
<p>下载到ECS云服务器上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -i -c https://dev.mysql.com/get/mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>
<p>添加Yum仓库。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm -Uvh mysql80-community-release-el7-3.noarch.rpm</span><br></pre></td></tr></table></figure>

<h2 id="设置默认安装版本"><a href="#设置默认安装版本" class="headerlink" title="设置默认安装版本"></a>设置默认安装版本</h2><p>查询可安装的MySQL版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum repolist all | grep mysql</span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200119220746-868577.png" alt="1579442778319"></p>
<p>图中enabled状态的版本为Yum安装时的默认版本。如果默认版本不是5.6，需手工编辑<code>/etc/yum.repos.d/mysql-community.repo</code>文件来调整所需版本的启用状态，比如，要想安装5.6版本，则需要将以下代表5.6版本的代码段的enabled设置为1，同时将其他代码片段的enabled值置0。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Enable to use MySQL 5.6</span></span><br><span class="line">[mysql56-community]</span><br><span class="line">name=MySQL 5.6 Community Server</span><br><span class="line">baseurl=http://repo.mysql.com/yum/mysql-5.6-community/el/7/$basearch/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-mysql</span><br></pre></td></tr></table></figure>

<p>调整完毕后，可重新执行<code>yum repolist all | grep mysql</code>命令复查一下，看默认版本是否符合预期。</p>
<h2 id="执行安装"><a href="#执行安装" class="headerlink" title="执行安装"></a>执行安装</h2><p>MySQL默认版本设置检查无误后，执行以下命令即可安装MySQL：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install mysql-community-server</span><br></pre></td></tr></table></figure>
<p>检查MySQL版本号：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure>
<p>我这里输出为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql  Ver 14.14 Distrib 5.6.47, for Linux (x86_64) using  EditLine wrapper</span><br></pre></td></tr></table></figure>
<p>版本号为5.6.XX，符合预期，安装成功！</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://dev.mysql.com/doc/mysql-yum-repo-quick-guide/en/">A Quick Guide to Using the MySQL Yum Repository</a></p>
]]></content>
      <tags>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>如何理解编程接口的幂等性？</title>
    <url>/2020/03/05/how-to-understand-idempotence-in-programing/</url>
    <content><![CDATA[<p>幂等性是编程中一个很重要的概念。特别是我们在设计编程接口时，往往需要考虑接口是否满足幂等性。那么，什么是幂等性呢？幂等性具体应用于哪些场景？实现幂等性有哪些可行的方案？本文一一为您揭秘。</p>
<h3 id="什么是幂等性"><a href="#什么是幂等性" class="headerlink" title="什么是幂等性"></a>什么是幂等性</h3><p>幂等原本是一个数学概念，用数学公式表示为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">f(f(x)) = f(x)</span><br></pre></td></tr></table></figure>
<p>引入到计算机编程领域，幂等性是指客户端对服务端接口调用一次和调用多次，对服务端状态的影响是相同的。对于HTTP请求，一次请求和多次请求，如果对被请求资源本身的影响完全相同，则可认为请求是幂等的。同样地，对于一个微服务接口，如果多次调用和一次调用的效果一样，则认为这个接口是幂等的。<br>我们用幂等性的上述定义来检查数据库的增删改查。显然，查询和删除是幂等的。新增和更新操作，则不是幂等的。举反例如下：</p>
<ul>
<li>新增客户记录时，每执行一次insert操作，都会在数据库表中添加一条记录。</li>
<li>更新文章浏览量时，需要在原有浏览量数值上执行+1操作，每执行一次，浏览量数值都会随之改变。</li>
</ul>
<p>幂等是服务端对外的一种承诺，承诺只要调用服务端成功，无论客户端调用多少次，都不用担心因重复调用打乱服务端的状态。</p>
<h3 id="什么场景下需要幂等性"><a href="#什么场景下需要幂等性" class="headerlink" title="什么场景下需要幂等性"></a>什么场景下需要幂等性</h3><ol>
<li>不允许重复提交时。 比如电商系统下订单时，用户重复点击下单按钮，后台应避免重复下单、重复扣款。</li>
<li>客户端引入失败重试机制时。在某些情况下，服务端执行操作成功而未来得及把操作结果返回给客户端，客户端误认为服务端操作失败，自动发起重试。</li>
</ol>
<h3 id="如何实现幂等性"><a href="#如何实现幂等性" class="headerlink" title="如何实现幂等性"></a>如何实现幂等性</h3><p>实现幂等性，总体思路就是先判断再插入&#x2F;更新。也就是<code>check if exist then insert</code>和<code>check if not updated then update</code>类似的操作。这类操作往往不是原子的，需要加锁。具体有以下几种方案：</p>
<ol>
<li><p>使用唯一索引<br>适用于业务上要求只存在一条记录的数据表，比如用手机号来作为客户的唯一标识，则针对手机号建立唯一索引，这样在插入相同手机号的客户记录时，数据库就会报错并回滚插入操作，从而保证幂等性。</p>
</li>
<li><p>token校验<br>借助外部系统存储的token来判断是否重复提交。具体做法是，服务端先生成一个token保存下来，然后发给客户端使用。客户端在提交时，请求中必须带上该token。服务端收到客户端请求后，在执行具体操作前，先校验客户端传入的token，看是否和服务端已存储的token一致。若一致则表明是第一次请求，可以开绿灯放行，并在操作完成后删除或更新token。若不一致或未找到，则认为是重复提交，不予放行。我们常见的<code>csrf_token</code>就是为防止表单重复提交而使用的。</p>
</li>
<li><p>悲观锁<br>悲观锁一般配合事务一起使用，用于记录更新频繁的场景。在更新某条记录前，需要先使用<code>select ... where id=111 for update</code>语法来对记录加锁，然后再执行更新操作。</p>
</li>
<li><p>乐观锁<br>乐观锁只需要在更新数据的瞬间锁表，往往比悲观锁更高效。一般用增加记录版本号的方式来实现乐观锁。比如下面这个微博计数表：</p>
</li>
</ol>
<table>
<thead>
<tr>
<th>weibo_id</th>
<th>repost_count</th>
<th>version</th>
</tr>
</thead>
<tbody><tr>
<td>1001</td>
<td>37</td>
<td>4</td>
</tr>
</tbody></table>
<p>每次转发，都需要将转发数+1。这里我们用<code>version</code>字段来保存记录版本号。更新时，为保证幂等性，需执行如下SQL:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update t_weibo_count set repost_count=repost_count+1, version=version+1 where id=1001 and version=4</span><br></pre></td></tr></table></figure>
<p>这样，如果是第一次请求，<code>version</code>匹配，更新成功，<code>version</code>+1。而后续的请求，无论执行多少次，因为<code>version</code>在第一次请求后已经+1，和SQL中的<code>version</code>对不上，因此更新不会被执行。</p>
<ol start="5">
<li><p>分布式锁<br>分布式锁可以变相地认为是一种token校验机制。业务系统在插入或更新数据前，需要先获得锁。操作完成后，需要释放锁。在锁定期间，其他客户端只能等待。分布式锁一般用redis和zookeeper实现。</p>
</li>
<li><p>有限状态机<br>有些领域对象比如订单，它的状态较为固定，转化途径也比较确定。我们在构造订单更新SQL时，可以带上订单状态字段，类似上面乐观锁的情况。若订单状态不匹配，则认为是重复操作，不予执行。</p>
</li>
</ol>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>幂等性规定多次操作和一次操作对系统状态的影响是想同的。幂等性同时也是接口对外部调用方的一种承诺。在接口和系统设计中，我们需要充分衡量某个接口是否需要实现成幂等性的。实现幂等性的主要思路就是先判断再插入&#x2F;更新，可通过判断唯一索引、单次有效token、是否有锁、状态是否匹配等方式来识别并无视重复操作，达到幂等性的要求。</p>
]]></content>
      <tags>
        <tag>API</tag>
        <tag>Programing</tag>
      </tags>
  </entry>
  <entry>
    <title>centos8安装docker</title>
    <url>/2020/03/31/install-docker-for-centos8/</url>
    <content><![CDATA[<ol>
<li>安装依赖<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class="line">yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure></li>
<li>安装docker engine community<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>
此时，若报错：<em>requires containerd.io &gt;&#x3D; 1.2.2-3</em> ，那就先通过rpm安装装新版的 containerd.io：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dnf install https://download.docker.com/linux/centos/7/x86_64/stable/Packages/containerd.io-1.2.6-3.3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>
再安装docker-ce和docker-ce-cli：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y docker-ce docker-ce-cli</span><br></pre></td></tr></table></figure>
检查安装：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker -v</span><br></pre></td></tr></table></figure></li>
<li>设置开机启动docker服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure></li>
<li>启动docker服务<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure></li>
</ol>
<p>Have fun!</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装配置maven</title>
    <url>/2020/05/08/install-maven-for-mac/</url>
    <content><![CDATA[<p>在mac下安装maven，有两种可选方案：</p>
<h3 id="maven的安装"><a href="#maven的安装" class="headerlink" title="maven的安装"></a>maven的安装</h3><h4 id="方法1，通过官网压缩包安装"><a href="#方法1，通过官网压缩包安装" class="headerlink" title="方法1，通过官网压缩包安装"></a>方法1，通过官网压缩包安装</h4><ol>
<li>访问<a href="http://maven.apache.org/download.cgi">官网</a>下载maven压缩包，<code>.zip</code>或<code>.tar.gz</code>后缀的都可以。</li>
<li>解压压缩包到你日常放置绿色软件的目录</li>
<li><code>vim ~/.bash_profile</code>，添加<code>M2_HOME</code>环境变量:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export M2_HOME=/Users/xxx/Documents/maven/apache-maven-3.6.3</span><br><span class="line">export PATH=$PATH:$M2_HOME/bin</span><br></pre></td></tr></table></figure>
注意把上边命令中的路径替换为你电脑上的路径。<br><code>wq</code>保存退出后，执行以下命令使配置生效：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bash_profile</span><br></pre></td></tr></table></figure></li>
<li><code>mvn -v</code>检查安装是否成功</li>
</ol>
<h4 id="方法2，通过brew直接安装"><a href="#方法2，通过brew直接安装" class="headerlink" title="方法2，通过brew直接安装"></a>方法2，通过brew直接安装</h4><p>brew安装很简单，不需要再配置<code>M2_HOME</code>等环境变量。</p>
<p>注意，brew 安装时会自动安装maven的依赖 openjdk，可能比较慢，如果已经通过非brew的方式安装了jdk，建议还是走官网压缩包安装的方式。</p>
<p>brew安装命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查找maven</span></span><br><span class="line">brew search maven</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看版本信息和依赖包</span></span><br><span class="line">brew info maven</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">brew install maven</span><br></pre></td></tr></table></figure>

<p>最后，使用<code>mvn -v</code>检查安装是否成功。</p>
<h3 id="安装完成后的配置"><a href="#安装完成后的配置" class="headerlink" title="安装完成后的配置"></a>安装完成后的配置</h3><p>一般我们需要配置本地仓库和加速镜像即可。所有配置项都在<code>settings.xml</code>文件中定义。</p>
<h4 id="配置本地仓库"><a href="#配置本地仓库" class="headerlink" title="配置本地仓库"></a>配置本地仓库</h4><p>修改<code>settings.xml</code>文件，配置以下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>/Users/xxx/maven_repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="配置加速镜像"><a href="#配置加速镜像" class="headerlink" title="配置加速镜像"></a>配置加速镜像</h4><p>修改<code>settings.xml</code>文件，配置以下内容:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aliyun --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>在阿里云OS里安装nodejs</title>
    <url>/2022/07/26/install-nodejs-for-aliyunos/</url>
    <content><![CDATA[<h2 id="安装Node环境"><a href="#安装Node环境" class="headerlink" title="安装Node环境"></a>安装Node环境</h2><p>安装方式分两种: 一种是nvm安装多版本, 一种是使用二进制文件安装. 这里采用nvm方式安装.<br>步骤如下:</p>
<p>首先, 使用git拉取nvm代码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/cnpm/nvm.git ~/.nvm &amp;&amp; cd ~/.nvm &amp;&amp; git checkout `git describe --abbrev=0 --tags`</span><br></pre></td></tr></table></figure>
<p>然后, 激活nvm:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">echo &quot;. ~/.nvm/nvm.sh&quot; &gt;&gt; /etc/profile</span><br><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure>
<p>激活后即可ls出所支持的node版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm list-remote</span><br></pre></td></tr></table></figure>
<p>选择一个版本号执行安装, 安装命令如下:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install v14.20.0</span><br></pre></td></tr></table></figure>
<p>检查已安装版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure>
<p>切换到目标版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use v14.20.0</span><br></pre></td></tr></table></figure>
<p>查看当前node版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure>

<h2 id="退出后找不到-node-及-npm-命令问题"><a href="#退出后找不到-node-及-npm-命令问题" class="headerlink" title="退出后找不到 node 及 npm 命令问题"></a>退出后找不到 node 及 npm 命令问题</h2><p>退出云服务器再次登录后, 执行<code>node -v</code>, 会报错: <code>node: command not found</code>.<br>这时, 需要先<code>nvm use v14.20.0</code>一下, 然后查找一下node可执行文件路径:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">whereis node</span><br></pre></td></tr></table></figure>
<p>比如我的路径是: <code>/root/.nvm/versions/node/v14.20.0/bin/node</code>,<br>这里可以建立一个指向node可执行文件路径的软链接:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln -s /root/.nvm/versions/node/v14.20.0/bin/node /usr/local/bin/node</span><br></pre></td></tr></table></figure>
<p>这样就可以在重新登录后继续使用<code>node</code>命令了. </p>
<p><code>nvm</code>命令也需要按上述步骤处理一下.</p>
<h4 id="小尾巴"><a href="#小尾巴" class="headerlink" title="小尾巴"></a>小尾巴</h4><p>显然, 这种处理方式不完美, 每次切换到不同node版本后, 需要重新建一遍软链接, 指向当前node版本.</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>iptables常用配置</title>
    <url>/2020/04/02/iptables-common-configuration/</url>
    <content><![CDATA[<h3 id="iptables初始设置"><a href="#iptables初始设置" class="headerlink" title="iptables初始设置"></a>iptables初始设置</h3><p>这是一份来自网友<a href="https://www.cnblogs.com/kreo/p/4368811.html">清园</a>的iptables初始设置清单，供<strong>有选择地</strong>参考：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看iptables现有规则</span></span><br><span class="line">iptables -L -n</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">先允许所有,不然有可能会杯具</span></span><br><span class="line">iptables -P INPUT ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清空所有默认规则</span></span><br><span class="line">iptables -F</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">清空所有自定义规则</span></span><br><span class="line">iptables -X</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有计数器归0</span></span><br><span class="line">iptables -Z</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许来自于lo接口的数据包(本地访问)</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放22端口</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放21端口(FTP)</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 21 -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放80端口(HTTP)</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开放443端口(HTTPS)</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许ping</span></span><br><span class="line">iptables -A INPUT -p icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">允许接受本机请求之后的返回数据 RELATED,是为FTP设置的</span></span><br><span class="line">iptables -A INPUT -m state --state  RELATED,ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">其他入站一律丢弃</span></span><br><span class="line">iptables -P INPUT DROP</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有出站一律绿灯</span></span><br><span class="line">iptables -P OUTPUT ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">所有转发一律丢弃</span></span><br><span class="line">iptables -P FORWARD DROP</span><br></pre></td></tr></table></figure>

<h3 id="iptables常用规则"><a href="#iptables常用规则" class="headerlink" title="iptables常用规则"></a>iptables常用规则</h3><h4 id="1-删除现有规则"><a href="#1-删除现有规则" class="headerlink" title="1. 删除现有规则"></a>1. 删除现有规则</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -F</span><br></pre></td></tr></table></figure>
<h4 id="2-阻止某个特定ip"><a href="#2-阻止某个特定ip" class="headerlink" title="2. 阻止某个特定ip"></a>2. 阻止某个特定ip</h4><p>比如，要阻止<em>101.101.101.101</em>这个ip的访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT -s 101.101.101.101 -j DROP</span><br></pre></td></tr></table></figure>

<h4 id="3-只允许内网访问某端口"><a href="#3-只允许内网访问某端口" class="headerlink" title="3. 只允许内网访问某端口"></a>3. 只允许内网访问某端口</h4><p>比如，对于<em>mysql</em>默认端口<em>3306</em>,只能从内网访问：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -A INPUT --dport 3306 -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line">iptables -A INPUT --dport 3306 -j DROP</span><br></pre></td></tr></table></figure>
<p>更多规则可参考<a href="https://www.jianshu.com/p/ee4ee15d3658">这篇文章</a>。</p>
<h3 id="iptables规则的保存"><a href="#iptables规则的保存" class="headerlink" title="iptables规则的保存"></a>iptables规则的保存</h3><p>首先确保启用<code>iptables</code>服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable iptables.service</span><br><span class="line">systemctl start iptables.service</span><br></pre></td></tr></table></figure>
<p>然后使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure>
<p>命令把规则保存到<code>/etc/sysconfig/iptables</code>文件里。这样这样当计算机重启时，可自动重新加载。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>java annotation (1)</title>
    <url>/2019/12/11/java%20annotation%201/</url>
    <content><![CDATA[<p>在各种流行的Java开发框架比如Spring boot中，大量使用了注解Annotation来做自动化配置。学习Spring有必要先了解一下注解。<br>注解是从Java 1.5版本开始加入到Java语言中的，因其便利性逐渐被Java开发者广泛接受。那么，注解到底是什么东西呢？</p>
<h2 id="注解的定义"><a href="#注解的定义" class="headerlink" title="注解的定义"></a>注解的定义</h2><p>就个人理解，注解就是贴在程序源码上的语法标签，为编译器和JVM提供关于被贴代码（类、方法、构造函数、变量、参数等等）的一些辅助信息，这些信息可以帮助编译器做一些额外处理（比如@Overrride注解告诉编译器需要检查是否真的做了方法覆盖），或者让JVM在加载这段代码时做必要的前置工作（比如@DependsOn注解告知JVM需要先加载所依赖的类）。<br>我看到的比较靠谱的注解定义<a href="https://www.geeksforgeeks.org/annotations-in-java/">在这里</a>。</p>
<h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h2><p>Java语言提供如下元注解：</p>
<ul>
<li>@Override<br>典型的标记类注解，作用是明确告知编译器该方法Override了基类、接口、Object等的共有方法。编译器将对该注解标记的方法进行检查，若发现不符合Override定义，会直接报错。</li>
<li>@Deprecated<br>标记类注解，标记方法已被弃用。如果有人继续使用该方法，编译器将抛出警告⚠️。</li>
<li>@SuppressWarnings<br>让编译器忽略指定的一种或多种编译器警告。</li>
<li>@Retention<br>指定被它标记的注解的存储位置，从而决定它的生命周期。比如<code>RetentionPolicy.SOURCE</code>  定义注解只存储在源码中，不会被编译进.class文件，那么注解的生命周期也就被限制在源码编译成字节码之前。 默认值为<code>RetentionPolicy.CLASS</code>。</li>
<li>@Target<br>指定被它标记的注解的作用目标。目前取值有<code>TYPE</code>,<code>FIELD</code>,<code>METHOD</code>,<code>PARAMETER</code>,<code>CONSTRUCTOR</code>,<code>LOCAL_VARIABLE</code>,<code>ANNOTATION_TYPE</code>,<code>PACKAGE</code>,<code>TYPE_PARAMETER</code>,<code>TYPE_USE</code>。</li>
<li>@Documented<br>标记文档生成工具在生成的文档中包含被它标记的注解。</li>
<li>@Inherited<br>定义Java子类在继承父类时，同时继承拥有这个元注解的注解。注意，只针对普通类之间的继承，接口继承、接口实现时不会继承注解。</li>
<li>@Repeatable<br>定义注解可以多次重复应用于相同的目标Target。</li>
<li>@Native<br>标记目标常量可以被native代码引用。</li>
<li>@FunctionalInterface<br>该注解用于标记函数式接口。加上该注解后，若编写的接口不符合函数式接口的定义，编译器将报错。</li>
<li>@SafeVarargs<br>针对可变参数构造函数或方法生效，让编译器忽略unchecked警告⚠️。</li>
</ul>
<h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><p>  我们可以通过组合现有注解的方式来定义新的注解。注解的定义语法如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Access Specifier] @interface &lt;AnnotationName&gt; &#123;</span><br><span class="line">  DataType &lt;Method Name&gt;() [default Value];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>参照以上语法和现有元注解，我们可以自定义如下新注解：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@Target(ElementType.TYPE)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line">public @interface HelloAnnotation &#123;</span><br><span class="line">  String value() default &quot;Hi&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后，可以像其他注解一样使用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@HelloAnnotation(&quot;Hello&quot;)</span><br><span class="line">public class MyApplication &#123;</span><br><span class="line">  public static void main(String[] args) &#123;</span><br><span class="line">    HelloAnnotation annotation = MyApplication.class.getAnnotation(HelloAnnotation.class);</span><br><span class="line">    System.out.println(annotation.value());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac下安装tomcat</title>
    <url>/2020/09/28/install-tomcat-macos-catalina/</url>
    <content><![CDATA[<blockquote>
<p>提示：Tomcat依赖Java运行环境，没装java的先安装java</p>
</blockquote>
<ol>
<li><p>从<a href="https://tomcat.apache.org/download-native.cgi">Tomcat官网</a>下载所需版本。因为是Mac系统，我们选择*.tar.gz<em>后缀或</em>.zip*后缀的。</p>
</li>
<li><p>下载完成后Finder进入下载文件夹（默认为~&#x2F;Downloads），双击所下载的tar.gz压缩文件，Mac会自动解压并创建同名目录，比如，我的是<code>apache-tomcat-8.5.58</code>。</p>
</li>
<li><p>解压缩之后，其实就算安装完毕了。可直接运行<code>bin/startup.sh</code>启动tomcat。我比较追求完美，把tomcat移动到了专门安装软件的<code>/usr/local</code>目录下，具体操作见后续步骤。</p>
</li>
<li><p>移动tomcat至<code>/usr/local</code>目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mv ~/Downloads/apache-tomcat-8.5.58 /usr/local/</span><br></pre></td></tr></table></figure></li>
<li><p>创建软连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/local/apache-tomcat-8.5.58 /Library/Tomcat</span><br></pre></td></tr></table></figure></li>
<li><p>测试启动、关闭脚本<br>终端直接输入启动脚本并执行，如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/Library/Tomcat/bin/startup.sh</span><br></pre></td></tr></table></figure>
<p>关闭脚本跟启动脚本在同一个目录下，名字为<code>shutdown.sh</code>。</p>
</li>
<li><p>验证安装。<br>打开 <code>http://localhost:8080/</code>，看到Tomcat页面则说明安装成功。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习笔记-异常</title>
    <url>/2020/06/09/java-exception-notes/</url>
    <content><![CDATA[<h3 id="异常机制的基本概念"><a href="#异常机制的基本概念" class="headerlink" title="异常机制的基本概念"></a>异常机制的基本概念</h3><p>异常就是指<strong>不正常</strong>的意思，在Java中指的是程序执行过程中发生的不正常情况。</p>
<h4 id="异常VS错误"><a href="#异常VS错误" class="headerlink" title="异常VS错误"></a>异常VS错误</h4><p>Java将程序的不正常行为按严重程度分为错误（Error）和异常（Exception）两大类。<br>java.lang.Throwable是描述错误Error和异常Exception的超类。<br>Error类指的是Jvm无法处理的严重错误，一旦发生Error，通常Jvm无能为力，只能挂掉。<br>Exception类通常用来描述因编程错误或偶然外部因素导致的轻微错误，一般可以通过编程解决。</p>
<h4 id="异常的分类"><a href="#异常的分类" class="headerlink" title="异常的分类"></a>异常的分类</h4><p>Java官方提供的异常类很多，但通常可以按异常检测的时间点分为两大类：</p>
<ul>
<li>检测性异常，也就是说编译器可以检测到的异常，比如IOException等。</li>
<li>非检测性异常，RuntimeException，也叫运行时异常。 比如，被0除时会抛出ArithmeticException,空指针时的NullPointException,等等。</li>
</ul>
<h4 id="异常的继承结构"><a href="#异常的继承结构" class="headerlink" title="异常的继承结构"></a>异常的继承结构</h4><p>前面已经说过，所有异常都继承自Exception类，而Exception又继承自Throwable类。<br>再加上我们平时最常用的几个Runtime异常，构成的异常继承结构图如下：<br><img src="https://cdn132.vieek.com/2020-06-09-%E6%88%AA%E5%B1%8F2020-06-09%20%E4%B8%8A%E5%8D%8811.48.04.png" alt="常见异常的继承结构"></p>
<h3 id="异常的代码结构"><a href="#异常的代码结构" class="headerlink" title="异常的代码结构"></a>异常的代码结构</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ①</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    ②</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    ③</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="finally的注意事项"><a href="#finally的注意事项" class="headerlink" title="finally的注意事项"></a>finally的注意事项</h4><ul>
<li>finally</li>
</ul>
<h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><p>异常的处理，一般有三种方式：</p>
<ul>
<li>异常避免</li>
<li>异常捕获</li>
<li>异常抛出<br>如果拿感冒来比喻异常，这三种方式就好比我们的对待感冒的策略一样。首先，我们平时注意锻炼、保暖，以避免得上感冒，这相当于异常的避免。而万一得了感冒，我们可以吃点感冒药，这相当于异常的捕获。如果感冒严重了吃感冒药也不顶用，那就只能去医院看医生了，这就相当于抛出异常。</li>
</ul>
<h4 id="异常避免"><a href="#异常避免" class="headerlink" title="异常避免"></a>异常避免</h4><p>一般使用<strong>if语句</strong>来提前判断，避免异常。比如下面的语句，通过判断b是否等于0，来避免ArithmeticException：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (b != <span class="number">0</span>) &#123;</span><br><span class="line">    System.out.println(a / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再比如，提前判断引用变量是否为空，来避免空指针异常NullPointException：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">null</span> != fis) &#123;</span><br><span class="line">    fis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h4><p>使用<strong>catch语句</strong>来捕获异常并处理；使用finally做善后处理。</p>
<p>catch语句注意：</p>
<ul>
<li>多个catch语句，小异常类应放到前面。</li>
</ul>
<p>tips: <em>finally语句在函数return之前必然执行。</em></p>
<p>考点：请问下面代码返回结果是几？</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    System.out.println(<span class="number">3</span> / <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (ArithmeticException e) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果是 2， 因为finally抢在return 1之前return了。</p>
<h4 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h4><p>若方法决定自己不处理异常，则需要将异常抛出。</p>
<h4 id="什么时候抛出异常，什么时候捕获异常？"><a href="#什么时候抛出异常，什么时候捕获异常？" class="headerlink" title="什么时候抛出异常，什么时候捕获异常？"></a>什么时候抛出异常，什么时候捕获异常？</h4><p>经验：</p>
<ol>
<li>方法重写时，若被重写的方法未抛出异常，则重写后的方法也不应该抛出异常。</li>
<li>如果方法之间有好多层调用关系，可以抛出异常，交由最外层方法捕获。</li>
</ol>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>有时候我们需要自定义异常。</p>
<h4 id="为什么要自定义异常呢"><a href="#为什么要自定义异常呢" class="headerlink" title="为什么要自定义异常呢"></a>为什么要自定义异常呢</h4><p>Java官方提供的异常不够用。现实业务开发中，异常各种各样，需要自定义。</p>
<h4 id="如何自定义"><a href="#如何自定义" class="headerlink" title="如何自定义"></a>如何自定义</h4><p>编码示例：</p>
<pre><code class="java">public class XXXException extends Exception &#123;
    static final long serialVersionUID = 1111111L;
    
    public XXXException() &#123;
    &#125;
    
    public XXXException(String message) &#123;
        super(message);
    &#125;
&#125;
</code></pre>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java IO流笔记（一）</title>
    <url>/2020/06/12/java-io-note-1/</url>
    <content><![CDATA[<h3 id="IO流的概念和分类"><a href="#IO流的概念和分类" class="headerlink" title="IO流的概念和分类"></a>IO流的概念和分类</h3><h4 id="什么是流"><a href="#什么是流" class="headerlink" title="什么是流"></a>什么是流</h4><p>读写数据时像流水一样，从一端到另一端，因此叫做“流”。</p>
<h4 id="流的分类"><a href="#流的分类" class="headerlink" title="流的分类"></a>流的分类</h4><p>按处理内容分为：</p>
<ul>
<li>字节流</li>
<li>字符流。 （双字节）</li>
</ul>
<p>按输入输出类别分为：</p>
<ul>
<li>输入流</li>
<li>输出流</li>
</ul>
<p>按跟数据源的关系分为:</p>
<ul>
<li>节点流</li>
<li>处理流</li>
</ul>
<h3 id="IO流的体系结构"><a href="#IO流的体系结构" class="headerlink" title="IO流的体系结构"></a>IO流的体系结构</h3><p>主要的IO流类可以用下面一张表整合：</p>
<table>
<thead>
<tr>
<th>分类</th>
<th>字节输入流</th>
<th>字节输出流</th>
<th>字符输入流</th>
<th>字符输出流</th>
</tr>
</thead>
<tbody><tr>
<td>抽象基类</td>
<td>InputStream</td>
<td>OutputStream</td>
<td>Reader</td>
<td>Writer</td>
</tr>
<tr>
<td>访问文件</td>
<td>FileInputStream</td>
<td>FileOutputStream</td>
<td>FileReader</td>
<td>FileWriter</td>
</tr>
<tr>
<td>访问数组</td>
<td>ByteArrayInputStream</td>
<td>ByteArrayOutputStream</td>
<td>CharArrayReader</td>
<td>CharArrayWriter</td>
</tr>
<tr>
<td>访问管道</td>
<td>PipedInputStream</td>
<td>PipedOutputStream</td>
<td>PipedReader</td>
<td>PipedWriter</td>
</tr>
<tr>
<td>访问字符串</td>
<td>–</td>
<td>–</td>
<td>StringReader</td>
<td>StringWriter</td>
</tr>
<tr>
<td>缓冲流</td>
<td>BufferedInputStream</td>
<td>BufferedOutputStream</td>
<td>BufferedReader</td>
<td>BufferedWriter</td>
</tr>
<tr>
<td>转换流</td>
<td>–</td>
<td>–</td>
<td>InputStreamReader</td>
<td>InputStreamWriter</td>
</tr>
<tr>
<td>对象流</td>
<td>ObjectInputStream</td>
<td>ObjectOutputStream</td>
<td>–</td>
<td>–</td>
</tr>
<tr>
<td></td>
<td>FilterInputStream</td>
<td>FilterOutputStream</td>
<td>FilterReader</td>
<td>FilterWriter</td>
</tr>
<tr>
<td>打印流</td>
<td>–</td>
<td>PrintStream</td>
<td>–</td>
<td>PrintWriter</td>
</tr>
<tr>
<td>推回输入流</td>
<td>PushbackInputStream</td>
<td>–</td>
<td>PushbackReader</td>
<td>–</td>
</tr>
<tr>
<td>特殊流</td>
<td>DataInputStream</td>
<td>DataOutputStream</td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>我们常用需要掌握的结构：<br><img src="https://cdn132.vieek.com/2020-06-11-%E6%88%AA%E5%B1%8F2020-06-11%20%E4%B8%8B%E5%8D%883.37.28.png" alt="继承结构图"></p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java File类笔记</title>
    <url>/2020/06/12/java-file-note-1/</url>
    <content><![CDATA[<p>java.io.File类是对文件极其常用操作的抽象。</p>
<h4 id="File类的常用方法"><a href="#File类的常用方法" class="headerlink" title="File类的常用方法"></a>File类的常用方法</h4><p>直接上代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 1. 构造函数</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;./README.md&quot;</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;File(&quot;</span> + filename + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./README.md&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (f1.exists()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;getName(): &quot;</span> + f1.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;getPath(): &quot;</span> + f1.getPath());</span><br><span class="line">            System.out.println(<span class="string">&quot;getAbsolutePath(): &quot;</span> + f1.getAbsolutePath());</span><br><span class="line">            System.out.println(<span class="string">&quot;getCanonicalPath(): &quot;</span> + f1.getCanonicalPath());</span><br><span class="line">            System.out.println(<span class="string">&quot;lastModified(): &quot;</span> + f1.lastModified());</span><br><span class="line">            System.out.println(<span class="string">&quot;length(): &quot;</span> + f1.length());</span><br><span class="line">            System.out.println(<span class="string">&quot;isFile(): &quot;</span> + f1.isFile());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="区分getName-、getPath-、getAbsolutePath-、getCanonicalPath"><a href="#区分getName-、getPath-、getAbsolutePath-、getCanonicalPath" class="headerlink" title="区分getName()、getPath()、getAbsolutePath()、getCanonicalPath()"></a>区分getName()、getPath()、getAbsolutePath()、getCanonicalPath()</h4><p><img src="https://cdn132.vieek.com/2020-06-11-%E6%88%AA%E5%B1%8F2020-06-11%20%E4%B8%8B%E5%8D%8812.31.50.png" alt="区分path、absolutePath、canonicalPath"></p>
<h4 id="文件的创建和删除"><a href="#文件的创建和删除" class="headerlink" title="文件的创建和删除"></a>文件的创建和删除</h4><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> <span class="string">&quot;./test-file.md&quot;</span>;</span><br><span class="line"><span class="type">File</span> <span class="variable">f1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(filename);</span><br><span class="line"><span class="keyword">if</span> (f1.exists()) &#123;</span><br><span class="line">    System.out.println(f1.delete() ? <span class="string">&quot;文件删除成功！&quot;</span> : <span class="string">&quot;文件删除失败！&quot;</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    System.out.println(f1.createNewFile() ? <span class="string">&quot;文件创建成功！&quot;</span> : <span class="string">&quot;文件创建失败！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="目录的创建和删除"><a href="#目录的创建和删除" class="headerlink" title="目录的创建和删除"></a>目录的创建和删除</h4><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. 目录创建、删除</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">f2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./test-dir/test-subdir&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (f2.exists()) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName(): &quot;</span> + f2.getName());</span><br><span class="line">        <span class="comment">// 这里只能删除最内层的非空目录</span></span><br><span class="line">        System.out.println(f2.delete()? <span class="string">&quot;目录删除成功！&quot;</span> : <span class="string">&quot;目录删除失败！&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(f2.mkdirs() ? <span class="string">&quot;目录创建成功！&quot;</span> : <span class="string">&quot;目录创建失败！&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="listFiles-指定文件过滤FileFilter"><a href="#listFiles-指定文件过滤FileFilter" class="headerlink" title="listFiles()指定文件过滤FileFilter"></a>listFiles()指定文件过滤FileFilter</h4><p>示例代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">File</span> <span class="variable">f4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./.idea&quot;</span>);</span><br><span class="line">    <span class="type">FileFilter</span> <span class="variable">filter</span> <span class="operator">=</span> (pathname) -&gt; &#123; <span class="keyword">return</span> pathname.getName().endsWith(<span class="string">&quot;.xml&quot;</span>);&#125;;</span><br><span class="line">    File[] fileList2 = f4.listFiles(filter);</span><br><span class="line">    <span class="keyword">for</span> (File f: fileList2) &#123;</span><br><span class="line">        System.out.println(f.getName());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="目录及子目录的递归遍历"><a href="#目录及子目录的递归遍历" class="headerlink" title="目录及子目录的递归遍历"></a>目录及子目录的递归遍历</h4><p>示例代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 递归打印目录和子目录下所有文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> filter</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">show_dirs</span><span class="params">(File file, FileFilter filter)</span> &#123;</span><br><span class="line">      File[] files = file.listFiles(filter);</span><br><span class="line">      <span class="keyword">for</span> (File f: files) &#123;</span><br><span class="line">          <span class="keyword">if</span> (f.isFile()) &#123;</span><br><span class="line">              System.out.println(f.getName());</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (f.isDirectory()) &#123;</span><br><span class="line">              System.out.println(<span class="string">&quot;Dir[&quot;</span> + f.getName() + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">              show_dirs(f, filter);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">FileFilter</span> <span class="variable">filter2</span> <span class="operator">=</span> (pathname) -&gt; &#123; <span class="keyword">return</span> pathname.isDirectory() || pathname.getName().endsWith(<span class="string">&quot;.class&quot;</span>); &#125;;</span><br><span class="line">      show_dirs(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;./out&quot;</span>), filter2);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Stream接口学习笔记</title>
    <url>/2020/09/15/java-stream-interface-note/</url>
    <content><![CDATA[<h4 id="Stream接口概念辨析"><a href="#Stream接口概念辨析" class="headerlink" title="Stream接口概念辨析"></a>Stream接口概念辨析</h4><p>Java中有两类<code>Stream</code>，一类是IO流，常见的有InputStream、OutputStream等，还有一类是Java8 新增的<code>Stream接口</code>。<br>Stream接口位于<code>java.util.stream</code>包中,是对集合功能的增强。<br>如何增强呢？ 简单来说，它支持集合元素的筛选、切片、映射、排序、匹配查找、聚合等多种复杂常见操作，使用<code>Lambda表达式</code>简化代码编写，并支持并行和串行两种模式的操作。</p>
<h4 id="Stream接口使用步骤"><a href="#Stream接口使用步骤" class="headerlink" title="Stream接口使用步骤"></a>Stream接口使用步骤</h4><ol>
<li>创建Stream，通过一个数据源来获取一个流</li>
<li>转换Stream，每次转换可得到一个新的Stream对象</li>
<li>对Stream进行聚合操作产生最终结果</li>
</ol>
<h4 id="Stream流的创建"><a href="#Stream流的创建" class="headerlink" title="Stream流的创建"></a>Stream流的创建</h4><p>有以下四种创建方式：</p>
<ol>
<li>基于现有集合，调用集合的stream()方法创建：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; integerList = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">Stream&lt;Integer&gt; integerStream = integerList.stream();</span><br></pre></td></tr></table></figure></li>
<li>基于数组，通过Stream工具类的stream()静态方法创建：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">IntStream</span> <span class="variable">intStream</span> <span class="operator">=</span> IntStream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li>
<li>通过Stream接口的of(T.. values)静态方法创建：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; integerStream1 = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>);</span><br></pre></td></tr></table></figure></li>
<li>通过Stream接口的generate(Supplier&lt;? extends T&gt; s)静态方法创建：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Stream&lt;Integer&gt; limit  = Stream.generate(<span class="keyword">new</span> <span class="title class_">Random</span>()::nextInt).limit(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="Stream中间操作（结果仍为Stream"><a href="#Stream中间操作（结果仍为Stream" class="headerlink" title="Stream中间操作（结果仍为Stream)"></a>Stream中间操作（结果仍为Stream)</h4><ul>
<li>筛选、切片</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Stream filter&lt;Predicate&lt;? super T&gt; predicate)</td>
<td>过滤，返回一个包含匹配元素的流</td>
</tr>
<tr>
<td>Stream distinct()</td>
<td>去重，返回不含重复元素的流</td>
</tr>
<tr>
<td>Stream limit(long maxSize)</td>
<td>切片，返回不超过maxSize数量的元素组成的流</td>
</tr>
<tr>
<td>Stream skip(long n)</td>
<td>切片，返回丢弃前n个元素后的流</td>
</tr>
</tbody></table>
<ul>
<li>映射</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Stream map(Function&lt;? super T, ? extends R&gt; mapper)</td>
<td>返回每个处理过元素组成的流</td>
</tr>
<tr>
<td>Stream flatMap(Function&lt;? super T,? extends Stream&lt;? extends R&gt;&gt; mapper)</td>
<td>返回每个被替换过元素组成的流，并将所有流合成一个流</td>
</tr>
</tbody></table>
<ul>
<li>排序</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Stream sorted()</td>
<td>返回经过自然排序后元素组成的流</td>
</tr>
<tr>
<td>Stream sorted(Comparator&lt;? super T&gt; comparator)</td>
<td>返回经过比较器排序后元素组成的流</td>
</tr>
</tbody></table>
<h4 id="Stream终止操作"><a href="#Stream终止操作" class="headerlink" title="Stream终止操作"></a>Stream终止操作</h4><ul>
<li>匹配与查找</li>
</ul>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Optional findFirst()</td>
<td>返回该流的第一个元素</td>
</tr>
<tr>
<td>boolean allMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>判断所有元素是否匹配</td>
</tr>
<tr>
<td>boolean noneMatch(Predicate&lt;? super T&gt; predicate)</td>
<td>判断没有元素是否匹配</td>
</tr>
<tr>
<td>Optional max(Comparator&lt;? super T&gt; comparator)</td>
<td>根据比较器返回最大元素</td>
</tr>
<tr>
<td>Optional min(Comparator&lt;? super T&gt; comparator)</td>
<td>根据比较器返回最小元素</td>
</tr>
<tr>
<td>long count()</td>
<td>返回元素的个数</td>
</tr>
<tr>
<td>void forEach(Consumer&lt;? super T&gt; action)</td>
<td>对流中每个元素执行操作</td>
</tr>
</tbody></table>
<ul>
<li><p>规约（reduce）</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>Optional reduce(BinaryOperator accumulator)</td>
<td>返回结合后的元素值</td>
</tr>
</tbody></table>
</li>
<li><p>收集</p>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>功能</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;R,A&gt; R collect(Collector&lt;? super T,A,R&gt; collector)</td>
<td>使用收集器对元素进行处理</td>
</tr>
</tbody></table>
</li>
</ul>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>面向对象的常用设计原则</title>
    <url>/2020/09/15/java-oop-7-principles/</url>
    <content><![CDATA[<blockquote>
<p>世上唯一不变的是变化。</p>
</blockquote>
<p>相对于其他实物，软件从写下第一行代码开始就不断反复变化。为了应对各种变化，需要一些通用的设计原则和模式来指导日常开发。<br>面向对象诞生至今早已超过半个世纪，大量前辈们早就探索和总结出了一些列设计原则和设计模式。学好面向对象开发好比学好一门武功，设计原则是内功心法，设计模式是招式套路。心法和套路相辅相成，都是不可或缺的一环。</p>
<p>面向对象有七个设计原则：</p>
<ol>
<li>开放封闭原则</li>
<li>里氏替换原则</li>
<li>依赖倒置原则</li>
<li>接口隔离原则</li>
<li>迪米特法则(最少知道原则)</li>
<li>单一职责原则</li>
<li>合成复用原则<br>下面分别简单描述一下。</li>
</ol>
<h4 id="开放封闭原则-OCP"><a href="#开放封闭原则-OCP" class="headerlink" title="开放封闭原则 OCP"></a>开放封闭原则 OCP</h4><p>这个原则是所有面向对象原则的核心。<br>任何一个软件实体（小到一个类、大到一个系统）都要对扩展开放，对修改封闭。换句话说，要在尽量不修改原有代码的基础上，对功能进行扩充。<br>一般实践过程中，常常通过接口、抽象类定义抽象层，然后通过实现类进行功能扩展。每次增加新功能只需要增加一个实现类即可。</p>
<h4 id="里氏替换原则-LSP"><a href="#里氏替换原则-LSP" class="headerlink" title="里氏替换原则 LSP"></a>里氏替换原则 LSP</h4><p>所有引用基类的地方必须能透明地使用其派生类的对象。说人话，就是所有父类引用都可以换成子类的引用。<br>违反里氏替换原则的一个小例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj typeof SubClass1) &#123;</span><br><span class="line">    <span class="comment">// do a</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (obj typeof SubClass2) &#123;</span><br><span class="line">    <span class="comment">// do b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="依赖倒置原则-DIP"><a href="#依赖倒置原则-DIP" class="headerlink" title="依赖倒置原则 DIP"></a>依赖倒置原则 DIP</h4><p>这个原则有两层含义：</p>
<ul>
<li>高层模块不应依赖于低层模块，二者都应依赖于抽象。</li>
<li>抽象不应依赖于细节，细节应依赖于抽象</li>
<li>针对接口编程，不要针对实现编程</li>
</ul>
<p>我们在编码中，应该尽量依赖于抽象类和接口，而不是实现类。</p>
<h4 id="接口隔离原则-ISP"><a href="#接口隔离原则-ISP" class="headerlink" title="接口隔离原则 ISP"></a>接口隔离原则 ISP</h4><p>不能强迫用户去依赖他们不使用的接口。<br>换句话说，接口里包含的方法定义应尽可能少！ 大接口要拆分成小接口。</p>
<h4 id="迪米特法则-最少知道原则-Law-of-Demeter-，LoD"><a href="#迪米特法则-最少知道原则-Law-of-Demeter-，LoD" class="headerlink" title="迪米特法则(最少知道原则) Law of Demeter ，LoD"></a>迪米特法则(最少知道原则) Law of Demeter ，LoD</h4><p>只与你直接的朋友们通信，不要跟“陌生人”说话。</p>
<p>一个实体应尽可能少地与其他实体发生相互作用，使系统各模块相互独立。</p>
<h4 id="单一职责原则-SIP"><a href="#单一职责原则-SIP" class="headerlink" title="单一职责原则 SIP"></a>单一职责原则 SIP</h4><p>这个原则是主要针对类来说的，让一个类只专注于一个职责。 如果有多个职责怎么办，通过其他原则拆分、重构它！<br>所谓类的职责，是指引起该类变化的一个原因。</p>
<h4 id="合成复用原则-Composite-Aggregate-Reuse-Principle-，CARP"><a href="#合成复用原则-Composite-Aggregate-Reuse-Principle-，CARP" class="headerlink" title="合成复用原则 Composite&#x2F;Aggregate Reuse Principle ，CARP"></a>合成复用原则 Composite&#x2F;Aggregate Reuse Principle ，CARP</h4><p>多使用组合&#x2F;聚合，少使用类继承。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><ol>
<li><a href="https://blog.csdn.net/qq_34760445/article/details/82931002">面向对象设计的七大设计原则详解</a></li>
</ol>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Java tips 1 - final变量的几种初始化方式</title>
    <url>/2020/04/01/java-tips-1-how-to-initialize-a-final-variable/</url>
    <content><![CDATA[<h3 id="final成员变量的初始化方式"><a href="#final成员变量的初始化方式" class="headerlink" title="final成员变量的初始化方式"></a>final成员变量的初始化方式</h3><h4 id="方法1：在定义变量时直接赋值"><a href="#方法1：在定义变量时直接赋值" class="headerlink" title="方法1：在定义变量时直接赋值"></a>方法1：在定义变量时直接赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="方法2：在构造函数中初始化"><a href="#方法2：在构造函数中初始化" class="headerlink" title="方法2：在构造函数中初始化"></a>方法2：在构造函数中初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="方法3：在构造代码块中初始化"><a href="#方法3：在构造代码块中初始化" class="headerlink" title="方法3：在构造代码块中初始化"></a>方法3：在构造代码块中初始化</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">char</span> value[];</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = <span class="string">&quot;&quot;</span>.value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>注意： 构造代码块会在构造函数之前被执行。</strong> （<a href="/2020/04/01/java-tips-2-initialization-order/" title="Java静态代码块、构造代码块、构造函数执行顺序">构造代码块、静态代码块执行顺序</a>）</p>
<h3 id="final静态变量的初始化方式"><a href="#final静态变量的初始化方式" class="headerlink" title="final静态变量的初始化方式"></a>final静态变量的初始化方式</h3><h4 id="方法1：-在定义时直接赋值"><a href="#方法1：-在定义时直接赋值" class="headerlink" title="方法1： 在定义时直接赋值"></a>方法1： 在定义时直接赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">6849794470754667710L</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="方法2：-在静态代码块中赋值"><a href="#方法2：-在静态代码块中赋值" class="headerlink" title="方法2： 在静态代码块中赋值"></a>方法2： 在静态代码块中赋值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">MyString</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> serialVersionUID;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serialVersionUID = -<span class="number">6849794470754667710L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关于静态代码块、构造代码块、构造函数的执行顺序，请参考我的另一篇blog：<a href="/2020/04/01/java-tips-2-initialization-order/" title="Java静态代码块、构造代码块、构造函数执行顺序">构造代码块、静态代码块执行顺序</a>。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java序列化多个对象到文件并正确读写的技巧</title>
    <url>/2020/08/19/java-serialize-and-deserialize-multiple-objects/</url>
    <content><![CDATA[<p>我们一般使用<code>ObjectInputStream</code>的<code>Object readObject()</code>方法来从输入流中读出一个对象，这个方法有个缺陷是，无法通过返回值来判断是否读到了文件末尾。因此，我们要序列化多个对象时，需要额外一些小技巧来处理。大体来说，有四种方法能够正确序列化反序列化多个对象：</p>
<ul>
<li>把对象装入集合中，对整个集合进行序列化和反序列化</li>
<li>把对象放入对象数组中，对对象数组进行序列化和反序列化</li>
<li>依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止</li>
<li>依次序列化写入多个对象，读取时以FileInputStream的<code>int available()</code>返回值判断是否终止<br>下面举例说明。</li>
</ul>
<h3 id="数据准备-测试程序准备"><a href="#数据准备-测试程序准备" class="headerlink" title="数据准备&amp;测试程序准备"></a>数据准备&amp;测试程序准备</h3><p>首先准备一个要序列化的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">1105545465577482303L</span>;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String phone; <span class="comment">// transient 关键字表示该成员不参与序列化</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age, String phone)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.phone = phone;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, phone=&#x27;&quot;</span> + phone + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>然后准备测试程序，主体代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializableTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 准备要序列化的数据</span></span><br><span class="line">        User[] users = &#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">33</span>, <span class="string">&quot;185000011133&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;李四&quot;</span>,<span class="number">44</span>, <span class="string">&quot;185000011144&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;王五&quot;</span>,<span class="number">55</span>, <span class="string">&quot;185000011155&quot;</span>),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;赵六&quot;</span>,<span class="number">66</span>, <span class="string">&quot;185000011166&quot;</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 2. 准备输出流和输入流</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;./out/oos_1.txt&quot;</span>;</span><br><span class="line">            oos = <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(fileName));</span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(fileName);</span><br><span class="line">            ois = <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fis);</span><br><span class="line">            <span class="comment">// 3. 序列化到文件,并反序列化读取并输出</span></span><br><span class="line"><span class="comment">//            testSerialize1(users, oos, ois);</span></span><br><span class="line"><span class="comment">//            testSerialize2(users, oos, ois);</span></span><br><span class="line">            testSerialize3(users, oos, ois);</span><br><span class="line"><span class="comment">//            testSerialize4(users, oos, ois, fis);</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 4. 关闭流</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != ois) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">null</span> != oos) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="实现多个对象的序列化和反序列"><a href="#实现多个对象的序列化和反序列" class="headerlink" title="实现多个对象的序列化和反序列"></a>实现多个对象的序列化和反序列</h3><p>下面分别用4种方式实现多个对象的序列化和反序列化。</p>
<h4 id="1-把对象装入集合中，对整个集合进行序列化和反序列化（推荐）"><a href="#1-把对象装入集合中，对整个集合进行序列化和反序列化（推荐）" class="headerlink" title="1. 把对象装入集合中，对整个集合进行序列化和反序列化（推荐）"></a>1. 把对象装入集合中，对整个集合进行序列化和反序列化（推荐）</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法1： 使用集合保存多个对象，对集合进行序列化反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize1</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        ArrayList&lt;User&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            list1.add(user);</span><br><span class="line">        &#125;</span><br><span class="line">        oos.writeObject(list1);</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1写入完毕！&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法1读取数据为：&quot;</span> + obj);</span><br><span class="line">        ArrayList&lt;User&gt; list2 = (ArrayList&lt;User&gt;)obj;</span><br><span class="line">        <span class="keyword">for</span> (User user: list2) &#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>运行测试程序，输出为：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">方法1写入完毕！</span><br><span class="line">方法1读取数据为：[User&#123;name=&#x27;张三&#x27;, age=33, phone=&#x27;null&#x27;&#125;, User&#123;name=&#x27;李四&#x27;, age=44, phone=&#x27;null&#x27;&#125;, User&#123;name=&#x27;王五&#x27;, age=55, phone=&#x27;null&#x27;&#125;, User&#123;name=&#x27;赵六&#x27;, age=66, phone=&#x27;null&#x27;&#125;]</span><br><span class="line">User&#123;name=&#x27;张三&#x27;, age=33, phone=&#x27;null&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;李四&#x27;, age=44, phone=&#x27;null&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;王五&#x27;, age=55, phone=&#x27;null&#x27;&#125;</span><br><span class="line">User&#123;name=&#x27;赵六&#x27;, age=66, phone=&#x27;null&#x27;&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-把对象放入对象数组中，对对象数组进行序列化和反序列化"><a href="#2-把对象放入对象数组中，对对象数组进行序列化和反序列化" class="headerlink" title="2. 把对象放入对象数组中，对对象数组进行序列化和反序列化"></a>2. 把对象放入对象数组中，对对象数组进行序列化和反序列化</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法2： 使用Object数组保存多个对象，对整个数组进行序列化反序列化</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize2</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        oos.writeObject(users);</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2写入完毕！&quot;</span>);</span><br><span class="line">        Object[] objs = (Object[])ois.readObject();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法2读取数据为：&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object obj: objs) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>输出跟上面类似。</p>
<h4 id="3-依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止"><a href="#3-依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止" class="headerlink" title="3. 依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止"></a>3. 依次序列化写入多个对象，并追加一个null对象，反序列化读取时若读到null就停止</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法3： 依次写入多个对象,再追加一个null对象表示结束，读取时判断读到的对象是否为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize3</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">            oos.writeObject(user);</span><br><span class="line">        &#125;</span><br><span class="line">        oos.writeObject(<span class="literal">null</span>);</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法3写入完毕！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方法3读取数据为：&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((obj = ois.readObject()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出同方法2。</p>
<h4 id="4-依次序列化写入多个对象，读取时以FileInputStream的int-available-返回值判断是否终止"><a href="#4-依次序列化写入多个对象，读取时以FileInputStream的int-available-返回值判断是否终止" class="headerlink" title="4. 依次序列化写入多个对象，读取时以FileInputStream的int available()返回值判断是否终止"></a>4. 依次序列化写入多个对象，读取时以FileInputStream的<code>int available()</code>返回值判断是否终止</h4><p>把下面这个方法加入到上面的<code>SerializableTest</code>类中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 方法4： 依次写入多个对象，读取时使用fis.available()方法判断是否读取到末尾</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oos</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ois</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fis</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testSerialize4</span><span class="params">(User[] users, ObjectOutputStream oos, ObjectInputStream ois, FileInputStream fis)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="keyword">for</span> (User user: users) &#123;</span><br><span class="line">            oos.writeObject(user);</span><br><span class="line">        &#125;</span><br><span class="line">        oos.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;方法4写入完毕！&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;方法4读取数据为：&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (fis.available() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> ois.readObject();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>输出同方法2。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java静态代码块、构造代码块、构造函数执行顺序</title>
    <url>/2020/04/01/java-tips-2-initialization-order/</url>
    <content><![CDATA[<h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>静态代码块</strong>：类中以*static {}*形式包围起来的代码块，Jvm加载类时执行，仅执行一次。<br><strong>构造代码块</strong>：类中以*{}*形式包围起来的代码块，不包括方法中的普通代码块。每次创建对象时都要执行。<br><strong>构造函数</strong>：每次创建对象时就会执行构造函数，构造函数的作用时给对象初始化。</p>
<h3 id="单个类中的执行顺序"><a href="#单个类中的执行顺序" class="headerlink" title="单个类中的执行顺序"></a>单个类中的执行顺序</h3><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>静态代码块 &gt; 构造代码块 &gt; 构造函数</p>
<h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>执行以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloTest</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行 HelloTest() 构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备new第一个对象&quot;</span>);</span><br><span class="line">        <span class="type">HelloTest</span> <span class="variable">one</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloTest</span>();</span><br><span class="line">        System.out.println(<span class="string">&quot;准备new第二个对象&quot;</span>);</span><br><span class="line">        <span class="type">HelloTest</span> <span class="variable">two</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloTest</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>结果输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">准备new第一个对象</span><br><span class="line">执行静态代码块</span><br><span class="line">执行构造代码块</span><br><span class="line">执行 HelloTest() 构造函数</span><br><span class="line">准备new第二个对象</span><br><span class="line">执行构造代码块</span><br><span class="line">执行 HelloTest() 构造函数</span><br></pre></td></tr></table></figure>

<h3 id="继承关系下的执行顺序"><a href="#继承关系下的执行顺序" class="headerlink" title="继承关系下的执行顺序"></a>继承关系下的执行顺序</h3><p>考虑父子继承情况，顺序又会是怎么样呢？</p>
<h4 id="执行顺序-1"><a href="#执行顺序-1" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>父类静态代码块 &gt; 子类静态代码块 &gt; 父类构造代码块 &gt; 父类构造函数 &gt; 子类构造代码块 &gt; 子类构造函数</p>
<h4 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h4><p>执行以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloA</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行HelloA的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行HelloA的构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行HelloA的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">HelloB</span> <span class="keyword">extends</span> <span class="title class_">HelloA</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HelloB</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行HelloB的构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行HelloB的构造代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行HelloB的静态代码块&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">HelloB</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HelloB</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">执行HelloA的静态代码块</span><br><span class="line">执行HelloB的静态代码块</span><br><span class="line">执行HelloA的构造代码块</span><br><span class="line">执行HelloA的构造函数</span><br><span class="line">执行HelloB的构造代码块</span><br><span class="line">执行HelloB的构造函数</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>安装配置java</title>
    <url>/2020/03/30/jdk-setup-for-win10/</url>
    <content><![CDATA[<p>java的安装配置比较简单。步骤如下：</p>
<h3 id="安装java"><a href="#安装java" class="headerlink" title="安装java"></a>安装java</h3><p>从<a href="https://www.oracle.com/java/">Oracle官网</a>下载最新版本，直接安装即可。</p>
<h3 id="配置java"><a href="#配置java" class="headerlink" title="配置java"></a>配置java</h3><p>右键“我的电脑“选择”属性”，打开左侧菜单左下方的”高级系统设置“，再点击”环境变量(N)…“，完成以下两个步骤:</p>
<ol>
<li>新建环境变量 JAVA_HOME<br>新建-&gt;变量名”JAVA_HOME”，变量值C:\Java\jdk1.8.0_05（即JDK的安装路径）</li>
<li>设置环境变量 Path<br>编辑-&gt;变量名”Path”，在原变量值的最后面加上 %JAVA_HOME%\bin<br>然后，一路确定保存即可。</li>
</ol>
<h3 id="测试验证"><a href="#测试验证" class="headerlink" title="测试验证"></a>测试验证</h3><p>打开 cmd，输入<code>java -version</code> 观察命令是否有效，以及版本号是否跟我们安装的版本一致。再输入<code>javac -version</code>检查命令是否存在，以及版本号是否正确。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy中的JSON Lines文本格式是什么鬼？</title>
    <url>/2020/02/18/json-lines/</url>
    <content><![CDATA[<h1 id="什么是JSON-Lines"><a href="#什么是JSON-Lines" class="headerlink" title="什么是JSON Lines"></a>什么是JSON Lines</h1><p><a href="http://jsonlines.org/">JSON Lines</a>是一种类似JSON的文本格式。它采用<code>\\n</code>作为分隔符存储多个JSON对象的列表，每个JSON对象仍然使用JSON格式表示。它有三个硬性约束：<br>1.使用UTF-8编码。<br>2.每一行都是一个有效的JSON对象。<br>3.行分隔符为<code>\\n</code>。</p>
<p>JSON Line文件的建议扩展名是<code>.jsonl</code>。一般建议使用gzip或者bzip2进行压缩，生成<code>.jsonl.gz</code>或<code>.jsonl.bz2</code>文件，进一步节省存储空间。</p>
<h1 id="为什么使用JSON-Lines"><a href="#为什么使用JSON-Lines" class="headerlink" title="为什么使用JSON Lines"></a>为什么使用JSON Lines</h1><p>我们平时习惯用<code>CSV</code>和<code>JSON</code>文本格式来存储列表类对象。同样的数据，<code>CSV</code>相比<code>JSON</code>更简洁，更节省空间，但是可读性很差（数据列分隔符随便定义没有统一标准，数据列定义只在第一行体现，不够直观），并且不支持嵌套数据。而<code>JSON</code>格式的可读性更好，能够支持嵌套数据，但是在存储数据列表时，需要识别数组首尾的<code>[</code>和<code>]</code>，涉及到读取、解析、存储整个文件，不适合大文件的高效存取。因此，<code>JSON Lines</code>应运而生。采用 JSON Lines 保存数据集，则文件中每一行就是一条<code>JSON</code>数据，可以一边读取一边解析、操作。而在添加数据时，只需要 append 数据到文件尾部即可。</p>
<h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>一个简单的<code>JSON Lines</code>格式文件内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;: &quot;Gilbert&quot;, &quot;wins&quot;: [[&quot;straight&quot;, &quot;7♣&quot;], [&quot;one pair&quot;, &quot;10♥&quot;]]&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Alexa&quot;, &quot;wins&quot;: [[&quot;two pair&quot;, &quot;4♠&quot;], [&quot;two pair&quot;, &quot;9♠&quot;]]&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;May&quot;, &quot;wins&quot;: []&#125;</span><br><span class="line">&#123;&quot;name&quot;: &quot;Deloise&quot;, &quot;wins&quot;: [[&quot;three of a kind&quot;, &quot;5♣&quot;]]&#125;</span><br></pre></td></tr></table></figure>

<h1 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h1><p><code>JSON Lines</code>文本格式由于同时具备可读性和便于流式处理的特点，常常被用于以下场景：<br>1.日志记录<br>2.流数据API<br>3.爬虫数据存储</p>
]]></content>
      <tags>
        <tag>JSON</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>我是如何一步步配置nodejs的</title>
    <url>/2023/11/20/log-my-nodejs-config-step-by-step/</url>
    <content><![CDATA[<p>需要在新电脑安装<code>node.js</code>环境，记录步骤如下。</p>
<h4 id="下载安装NodeJs"><a href="#下载安装NodeJs" class="headerlink" title="下载安装NodeJs"></a>下载安装NodeJs</h4><p><code>node.js</code>版本更新较频繁，上一次安装我用的还是10.x, 现在已经17.x了。<br>由于之前遇到过安装太高版本的<code>node.js</code>后装不上<code>node-sass</code>的问题，这次特意先查询了一下网上资料，发现16.x系列有对应的成功案例，所以选了16系列。<br>先从官网下载了<code>node.js</code>16系列目前最新版本<code>V16.20.2</code>的<code>msi</code>安装包，双击安装包一路next安装即可。<br>安装完后，打开新的<code>cmd</code>窗口，运行<code>node -v</code>和<code>npm -v</code>命令检查一下是否成功。我得到的命令行反馈版本号分别是<code>v16.20.2</code>和<code>8.19.4</code>。</p>
<h4 id="配置npm缓存目录到非系统盘"><a href="#配置npm缓存目录到非系统盘" class="headerlink" title="配置npm缓存目录到非系统盘"></a>配置npm缓存目录到非系统盘</h4><p>血泪教训，之前没在意npm缓存目录，所有包文件都默认装到的C盘，导致后来我C盘空间极度紧张。而且npm的包大部分都是一堆小文件，删起来特别费时间。这次特意解决这个问题。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set prefix &quot;D:\Tools\AppData\nodejs\node_global&quot;</span><br><span class="line">npm config set cache &quot;D:\Tools\AppData\nodejs\node_cache&quot;</span><br></pre></td></tr></table></figure>
<p>然后配置系统环境变量，在用户变量<code>Path</code>中增加路径：<code>D:\Tools\AppData\nodejs\node_global</code>，在系统变量中新增<code>NODE_PATH</code>指向<code>D:\Tools\AppData\nodejs\node_global\node_modules</code>。这里主要是为了解决之后<code>npm install -g xxx</code>找不到命令的问题。</p>
<h4 id="配置npm镜像加速"><a href="#配置npm镜像加速" class="headerlink" title="配置npm镜像加速"></a>配置npm镜像加速</h4><p>受够了外网蜗牛般的速度，果断换成国内镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="关闭strict-ssl模式"><a href="#关闭strict-ssl模式" class="headerlink" title="关闭strict-ssl模式"></a>关闭strict-ssl模式</h4><p>解决报错<code>Warning: Setting the NODE_TLS_REJECT_UNAUTHORIZED environment variable to &#39;0&#39; makes TLS connections and HTTPS requests insecure by disabling certificate verification.</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set strict-ssl false</span><br></pre></td></tr></table></figure>

<h4 id="安装node-sass"><a href="#安装node-sass" class="headerlink" title="安装node-sass"></a>安装node-sass</h4><p>首先设置国内镜像地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm config set sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure>
<p>然后执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install node-sass@6.0.1 -g</span><br><span class="line">npm install sass-loader@10.2.0 -g</span><br></pre></td></tr></table></figure>

<h4 id="可选安装-hexo、vue等"><a href="#可选安装-hexo、vue等" class="headerlink" title="可选安装 hexo、vue等"></a>可选安装 hexo、vue等</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install -g @vue/cli</span><br></pre></td></tr></table></figure>

<p>完毕！</p>
]]></content>
      <tags>
        <tag>DevOps</tag>
      </tags>
  </entry>
  <entry>
    <title>log this hexo setup</title>
    <url>/2019/12/08/log-this-hexo-setup/</url>
    <content><![CDATA[<h2 id="setup-your-hexo-blog-with-github-pages-hosting"><a href="#setup-your-hexo-blog-with-github-pages-hosting" class="headerlink" title="setup your hexo blog with github pages hosting"></a>setup your hexo blog with github pages hosting</h2><h3 id="install-hexo"><a href="#install-hexo" class="headerlink" title="install hexo"></a>install hexo</h3><p>first, install these two npm packages: hexo-cli, hex-deployer-git </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<h3 id="create-a-hexo-project"><a href="#create-a-hexo-project" class="headerlink" title="create a hexo project"></a>create a hexo project</h3><p>create a hexo project with the same name as your github repo</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init ocre.github.io</span><br></pre></td></tr></table></figure>
<p>create a new post</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new &quot;my first hexo blog&quot;</span><br></pre></td></tr></table></figure>

<p>verify your hexo project:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>and you will get a running hexo site at <a href="http://localhost:4000/">http://localhost:4000/</a></p>
<h3 id="create-github-pages-repo"><a href="#create-github-pages-repo" class="headerlink" title="create github pages repo"></a>create github pages repo</h3><p>create a new github repoistory named as ‘your_github_username’.github.io</p>
<h3 id="deploy-to-github"><a href="#deploy-to-github" class="headerlink" title="deploy to github"></a>deploy to github</h3><p>modify git config in _config.yml</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Deployment</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># Docs: https://hexo.io/docs/deployment.html</span></span></span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:ocre/ocre.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>test deploy</p>
<figure class="highlight shell"><figcaption><span>script</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>verify it via <a href="https://ocre.github.io/">https://ocre.github.io</a></p>
<p>Mission Complete!</p>
]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac系统让文件夹自动排列整齐</title>
    <url>/2020/06/30/mac-os-align-directories/</url>
    <content><![CDATA[<p>在Mac系统的Finder（访达）里边，每次新建文件夹，或者拖入一个文件夹，文件夹都是停留在光标位置，甚至遮挡其他文件，显得很乱。</p>
<p><img src="https://cdn132.vieek.com/2020-06-30-015732.png" alt="image-20200630094340546"></p>
<p>今天找到一个终极解决办法，可以让文件和文件夹自动排列整齐。<br>设置步骤如下：</p>
<ol>
<li>打开Finder的<strong>齿轮⚙</strong>小图标，点击<strong>查看显示选项</strong>：</li>
</ol>
<p><img src="https://cdn132.vieek.com/2020-06-30-015755.png" alt="image-20200630094617334"></p>
<ol start="2">
<li><p>修改下图中的<strong>分组方式</strong>和<strong>排序方式</strong>取值,全部改为**”名称”**：</p>
<p>修改前：</p>
<p><img src="https://cdn132.vieek.com/2020-06-30-015804.png" alt="image-20200630094822493"></p>
<p>修改后：</p>
<p><img src="https://cdn132.vieek.com/2020-06-30-015810.png" alt="image-20200630095023309"></p>
</li>
<li><p>一定要点击底部的<strong>“用作默认”</strong>按钮。</p>
<p><img src="https://cdn132.vieek.com/2020-06-30-015816.png" alt="snapshot_2020-06-30 上午9.51.06"></p>
</li>
</ol>
<p>经过以上简单三步设置就可以了。<br>看一下设置后的效果：</p>
<p><img src="https://cdn132.vieek.com/2020-06-30-015822.png" alt="image-20200630095619431"></p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac OS Catalina修改默认截图名称</title>
    <url>/2020/06/30/mac-os-catalina-change-snapshot-name/</url>
    <content><![CDATA[<p>在Mac系统中，截图是一件极其简单的事。无需安装任何额外软件，直接使用<code>command+shift+4</code>就可以用光标框选任意屏幕大小进行截图了，截图会自动保存到桌面上。<br>用户操作简单，通常意味着Mac系统默默帮我们做了很多事情。如果是中文系统，默认截图文件命名为类似<strong>“截屏 2020-06-30 上午 08.54.32”</strong>这样的格式，对于轻微强迫症的我来说，**”截屏”<strong>两个汉字做前缀稍微觉得不喜，可以按如下命令修改为</strong>“snapshot_”**:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;snapshot_&quot;</span><br></pre></td></tr></table></figure>
<p>这样以后的截图文件名就改为<strong>“snapshot_2020-06-30 上午 08.54.32”</strong>这样的格式了。<br>如果对后面的日期格式也不满意，还可以去掉日期：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">defaults write com.apple.screencapture &quot;include-date&quot; 0</span><br></pre></td></tr></table></figure>
<p>这样截图文件命名将变成<strong>“snapshot_1”</strong>、<strong>“snapshot_2”</strong>，后面的数字按截图先后顺序依次递增。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>安装和配置maven</title>
    <url>/2020/03/30/maven-setup-for-win10/</url>
    <content><![CDATA[<p>安装完JDK，我们接下来安装maven。<br>maven是java生态系统下的最普及的包管理软件，可以对Java项目进行构建和依赖管理。</p>
<h3 id="下载安装maven"><a href="#下载安装maven" class="headerlink" title="下载安装maven"></a>下载安装maven</h3><p><em>注意，maven是基于java构建的一个开源项目，因此安装maven之前需要先安装JDK。</em></p>
<h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>首先从<a href="https://maven.apache.org/download.cgi">maven官网</a>下载最新版maven。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>maven是绿色软件，无需安装，直接解压即可。建议将maven解压到专门保存可执行程序的目录，比如 <em>D:\Tools\apache-maven</em> 这样的。</p>
<h3 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h3><h4 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h4><p>首先，新建环境变量 <code>MAVEN_HOME</code>，取值为: <code>D:\Tools\apache-maven</code>。（请根据你的maven实际解压目录调整）。<br>然后，编辑环境变量<code>Path</code>，追加<code>%MAVEN_HOME%\bin</code>。<br>最后，使用<code>mvn -version</code>来测试环境变量是否配置完成。</p>
<h4 id="配置本地仓库目录"><a href="#配置本地仓库目录" class="headerlink" title="配置本地仓库目录"></a>配置本地仓库目录</h4><p>maven本地仓库默认在C盘，为避免C盘空间不够，建议设置到其他磁盘分区。可如下操作：<br>首先，新建文件夹<em>D:\Tools\apache-maven\repository</em>用作本地仓库。<br>然后，修改配置文件 <em>D:\Tools\apache-maven\conf\settings.xml</em>的localRepository如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment"> | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">&lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Tools\apache-maven\repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可执行 <code>mvn help:system</code> 命令检查配置是否生效。</p>
<h4 id="配置远程仓库"><a href="#配置远程仓库" class="headerlink" title="配置远程仓库"></a>配置远程仓库</h4><p>maven默认的中央仓库在国外，国内访问很慢。可以考虑使用阿里云的远程仓库来替代。<br>首先，在<em>settings.xml</em>文件的<em>mirrors</em>节点下增加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- aliyun --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/central/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>可再次执行 <code>mvn help:system</code> 命令检查远程仓库配置是否生效。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>身份证号输入框中间用星号显示</title>
    <url>/2020/10/19/mask-input-field-value-with-star/</url>
    <content><![CDATA[<p>接到一个需求，有一个输入框，用来显示用户的身份证号。要求显示时只显示身份证号的前4位和后4位，中间用星号代替。支持用户修改身份证号。</p>
<p>实现思路如下：</p>
<ol>
<li>写两个input输入框，姑且称为input1和input2，input1用来保存正确的身份证号、表单验证、提交都读取input1的值。input2用来显示星号处理过的身份证号，并处理用户按键编辑。</li>
<li>给input2绑定3个事件，keyup、focusin、focusout。focusin时从input1读取正确身份证号填充给input2，keyup时将用户修改后的身份证号写回到input1，focusout时触发input1的表单验证。</li>
</ol>
<p>具体代码如下：<br>首先，上index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;dataForm&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;word&quot;</span>&gt;</span>身份证:<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">class</span>=<span class="string">&quot;int-text valid&quot;</span> <span class="attr">id</span>=<span class="string">&quot;p_legalCertNum&quot;</span> <span class="attr">name</span>=<span class="string">&quot;plegalCertNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">aria-invalid</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;height: 0.5px;width: 0;padding: 0;margin: 0;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;legalCertNum&quot;</span> <span class="attr">name</span>=<span class="string">&quot;legalCertNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;511102199010162531&quot;</span> /&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">label</span> <span class="attr">id</span>=<span class="string">&quot;legalCertNumError&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;ash&quot;</span> <span class="attr">id</span>=<span class="string">&quot;legalCertNumText&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Javascript代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/jquery.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;js/jquery.validate.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">$(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	<span class="keyword">var</span> formValidator=$(<span class="string">&quot;#dataForm&quot;</span>).<span class="title function_">validate</span>(&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">rules</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="attr">legalCertNum</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">required</span>:<span class="literal">false</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">regexp</span>: <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">digits</span>:<span class="literal">false</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		<span class="attr">messages</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			<span class="attr">legalCertNum</span>:&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">				<span class="attr">regexp</span>: <span class="string">&#x27;身份证号格式错误&#x27;</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">			&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">		&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">	&#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="keyword">var</span> $realInput = $(<span class="string">&#x27;#legalCertNum&#x27;</span>), $showInput = $(<span class="string">&#x27;#p_legalCertNum&#x27;</span>), _that = <span class="variable language_">this</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// init value on page load</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">val</span>(<span class="variable language_">this</span>.<span class="title function_">_maskIdCard</span>($realInput.<span class="title function_">val</span>()));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// register events</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">bind</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $realInput.<span class="title function_">val</span>($showInput.<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">bind</span>(<span class="string">&#x27;focusin&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $(<span class="variable language_">this</span>).<span class="title function_">val</span>($(<span class="string">&#x27;#legalCertNum&#x27;</span>).<span class="title function_">val</span>());</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $showInput.<span class="title function_">bind</span>(<span class="string">&#x27;focusout&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  formValidator.<span class="title function_">element</span>($realInput[<span class="number">0</span>]);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  $(<span class="variable language_">this</span>).<span class="title function_">val</span>(_that.<span class="title function_">_maskIdCard</span>($realInput.<span class="title function_">val</span>()));</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>个人最常用的PostgreSQL命令整理</title>
    <url>/2023/11/29/most-useful-postgresql-commands/</url>
    <content><![CDATA[<h3 id="psql命令"><a href="#psql命令" class="headerlink" title="psql命令"></a>psql命令</h3><p>列出所有数据库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -l</span><br></pre></td></tr></table></figure>
<p>进入指定数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -d my_db_name</span><br></pre></td></tr></table></figure>
<p>带用户名密码进入指定数据库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -h your_host_name_or_ip -p your_port -U username -W</span><br></pre></td></tr></table></figure>

<p>执行sql文件：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -d my_db_name -f a.sql</span><br></pre></td></tr></table></figure>

<p>通过一条终端指令执行简单操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -d my_db_name -c &quot;\dt&quot;</span><br></pre></td></tr></table></figure>
<p>上述指令可替代如下三条指令构成的操作序列：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -d my_db_name</span><br><span class="line">\dt</span><br><span class="line">\q</span><br></pre></td></tr></table></figure>
<p>单步执行SQL指令，每一步都要敲回车确认:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -s</span><br></pre></td></tr></table></figure>
<p>查看版本号：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">psql -V</span><br></pre></td></tr></table></figure>

<h3 id="数据库信息查看"><a href="#数据库信息查看" class="headerlink" title="数据库信息查看"></a>数据库信息查看</h3><p>查看有哪些用户:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\du</span><br></pre></td></tr></table></figure>
<p>切换数据库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\c my_db_name</span><br></pre></td></tr></table></figure>
<p>查看有哪些数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\l</span><br></pre></td></tr></table></figure>
<p>查看当前数据库下有哪些表:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\dt</span><br></pre></td></tr></table></figure>
<p>查看某个表的信息:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\d my_table_name</span><br></pre></td></tr></table></figure>
<p>查看有哪些索引:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\di</span><br></pre></td></tr></table></figure>
<p>查看有哪些表空间：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\db</span><br></pre></td></tr></table></figure>
<p>退出psql：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\q</span><br></pre></td></tr></table></figure>
<p>执行外部SQL文件:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\i a.sql</span><br></pre></td></tr></table></figure>
<p>把后续执行结果写入外部文件,直到退出psql:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\o output_file.txt</span><br></pre></td></tr></table></figure>
<p>查看可用指令列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\?</span><br></pre></td></tr></table></figure>
<p>查看某个命令的语法帮助:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\h create table</span><br></pre></td></tr></table></figure>

<h3 id="数据库使用状态查看"><a href="#数据库使用状态查看" class="headerlink" title="数据库使用状态查看"></a>数据库使用状态查看</h3><p>查看数据库占用空间大小:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pg_database_size(&#x27;my_test_db&#x27;);</span><br></pre></td></tr></table></figure>
<p>查看所有数据库占用空间的大小:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select datname, pg_database_size(datname) AS size from pg_database;</span><br></pre></td></tr></table></figure>
<p>查看所有数据库占用空间大小，并以KB、MB等可读方式显示:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select datname, pg_size_pretty(pg_database_size(datname)) as size from pg_database;</span><br></pre></td></tr></table></figure>
<p>查看表或索引大小:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pg_relation_size(&#x27;my_table_or_index_name&#x27;);</span><br></pre></td></tr></table></figure>
<p>查看表的总大小，包括索引:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pg_size_pretty(pg_total_relation_size(my_table));</span><br></pre></td></tr></table></figure>
<p>查看表空间大小:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select pg_size_pretty(pg_tablespace_size(&#x27;pg_default&#x27;));</span><br></pre></td></tr></table></figure>

<h3 id="数据库、用户设置"><a href="#数据库、用户设置" class="headerlink" title="数据库、用户设置"></a>数据库、用户设置</h3><p>创建用户:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create user my_test_user with password &#x27;my_password&#x27;;</span><br></pre></td></tr></table></figure>
<p>创建数据库:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database my_test_db;</span><br></pre></td></tr></table></figure>
<p>把数据库分配给用户:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database my_test_db owner my_test_user;</span><br></pre></td></tr></table></figure>
<p>直接创建用户并设置属主：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database my_test_db_2 owner my_test_user;</span><br></pre></td></tr></table></figure>
<p>别忘了把权限赋予用户:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">grant all privileges on database my_test_db to my_test_user;</span><br></pre></td></tr></table></figure>
<p>如果用新创建的数据库用户登录报以下错误：<br><code>psql: error: connection to server on socket &quot;/var/run/postgresql/.s.PGSQL.5432&quot; failed: FATAL:  Peer authentication failed for user &quot;my_test_user&quot;</code><br>这是因为，该机器上psql的连接建立于Unix Socket上默认使用peer authentication，必须要用和数据库用户相同的系统用户进行登录。<br>解决办法也简单，要么创建对应的操作系统用户<code>my_test_user</code>后<code>sudo su - my_test_user</code>再用<code>psql -d my_test_db</code>登录，要么把登录认证方式从<code>peer authentiction</code>改为<code>md5</code>。</p>
<p>如果要收回权限，使用下面语句:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">revoke all on database my_test_db from my_test_user;</span><br></pre></td></tr></table></figure>
<p>删除数据库用户，使用下面语句：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop user my_test_user;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
  <entry>
    <title>2020年新电脑常用软件清单</title>
    <url>/2020/03/30/most-common-softwares-for-win10/</url>
    <content><![CDATA[<p>大家都知道，新买的电脑只提供最基础的Win10系统程序，要满足我们日常使用，往往需要安装一大堆软件。找软件、装软件的过程索然无味，而且通常需要耗费大量时间。笔者最近就被新电脑折腾得够呛，因此基于自身认知和立场，整理出一份常用的软件清单，抛砖引玉，供大家参考。</p>
<h2 id="系统基础"><a href="#系统基础" class="headerlink" title="系统基础"></a>系统基础</h2><p>在畅快折腾之前，有必要安装一些基本的系统工具来扩展和优化系统的使用体验。</p>
<h3 id="1-应用市场-软件商店"><a href="#1-应用市场-软件商店" class="headerlink" title="1. 应用市场&#x2F;软件商店"></a>1. 应用市场&#x2F;软件商店</h3><p>应用市场又叫软件商店，它好比一个大集市，里边的软件应有尽有，有了应用市场，我们就不用到处费力的找软件的官网，再一个一个下载了。因此强烈建议优先安装应用市场，再通过应用市场安装其他软件。应用商店可选择第三方大牌的，也可以使用品牌电脑自带的。</p>
<ul>
<li><code>腾讯应用宝</code> 或 <code>360软件管家</code><br>笔者为了图省事，直接使用了联想自带的<code>联想软件商店</code>，跟上面两款功能都差不多。</li>
</ul>
<h3 id="2-硬件驱动"><a href="#2-硬件驱动" class="headerlink" title="2. 硬件驱动"></a>2. 硬件驱动</h3><p>新电脑自身不缺驱动，然而常常需要外接打印机等外设。这时候可以选择安装：</p>
<ul>
<li><code>驱动精灵</code></li>
</ul>
<h3 id="3-安全防护"><a href="#3-安全防护" class="headerlink" title="3. 安全防护"></a>3. 安全防护</h3><p>众所周知，针对Windows系统的病毒、木马很多，所以有必要安装一款合适的网络安全防护软件。可以选择综合性的杀毒+防火墙，如：</p>
<ul>
<li><code>腾讯电脑管家</code> 或 <code>360电脑管家</code><br>也可以安装专门的杀毒软件，如：</li>
<li><code>金山毒霸</code> 或 <code>Macfee</code></li>
</ul>
<h3 id="4-输入法"><a href="#4-输入法" class="headerlink" title="4. 输入法"></a>4. 输入法</h3><p>不用纠结了，直接<code>搜狗输入法</code>即可。话说，微软自带的输入法也不错。</p>
<h3 id="5-文件管理"><a href="#5-文件管理" class="headerlink" title="5. 文件管理"></a>5. 文件管理</h3><h4 id="文件查找工具"><a href="#文件查找工具" class="headerlink" title="文件查找工具"></a>文件查找工具</h4><p>墙裂推荐 <code>everything</code>， 小巧快速，比windows任务管理器好用一千倍。</p>
<h4 id="压缩-解压工具"><a href="#压缩-解压工具" class="headerlink" title="压缩&#x2F;解压工具"></a>压缩&#x2F;解压工具</h4><p>以前用过很长时间的<code>winrar</code>，因为没购买License，一直被<code>winrar</code>弹出的各种广告骚扰。新电脑我果断安装了免费的<code>7zip</code>，轻量小巧且无存在感，比较符合这种工具软件的定位。</p>
<h4 id="音视频播放"><a href="#音视频播放" class="headerlink" title="音视频播放"></a>音视频播放</h4><p>视频播放器太多了，<code>暴风影音</code>、<code>QQ影音</code>、<code>PotPlayer</code>等随便选一个即可。能播放大部分格式的视频，甚至快过气的DVD。<br>音频播放一般不需要安装特定的软件，视频播放器就可以直接代劳了。</p>
<h2 id="上网冲浪"><a href="#上网冲浪" class="headerlink" title="上网冲浪"></a>上网冲浪</h2><p>网络时代，一台不联网的电脑，跟废品没多大差别。很多人买电脑的主要动机就是上网冲浪，包括查资料，追剧看电影，打游戏等等。</p>
<h3 id="1-浏览器"><a href="#1-浏览器" class="headerlink" title="1. 浏览器"></a>1. 浏览器</h3><p>不必说了，<code>chrome</code>是首选。因为其他各种知名浏览器，如<code>360急速浏览器</code>、<code>QQ浏览器</code>，大多是对chrome的同胞兄弟<code>chromium</code>开源项目的封装和扩展。</p>
<h3 id="2-网络视频"><a href="#2-网络视频" class="headerlink" title="2. 网络视频"></a>2. 网络视频</h3><p>大家看网剧，通常都有喜欢的特定平台应用，比如<code>腾讯视频</code>、<code>爱奇艺</code>、<code>优酷PC客户端</code>、<code>搜狐视频</code>、<code>PP视频</code>、<code>芒果TV</code>等。可根据自身喜好安装。</p>
<h3 id="3-聊天通讯"><a href="#3-聊天通讯" class="headerlink" title="3. 聊天通讯"></a>3. 聊天通讯</h3><p>以下两大利器没得说，都是必装的：</p>
<ul>
<li>微信电脑版</li>
<li><code>QQ</code> 或 <code>TIM</code></li>
</ul>
<h3 id="4-网络存储"><a href="#4-网络存储" class="headerlink" title="4. 网络存储"></a>4. 网络存储</h3><p>首选 <code>百度网盘</code>。</p>
<h3 id="5-网络下载"><a href="#5-网络下载" class="headerlink" title="5. 网络下载"></a>5. 网络下载</h3><p>我一般只用 <code>迅雷</code>。</p>
<h3 id="6-邮件收发"><a href="#6-邮件收发" class="headerlink" title="6. 邮件收发"></a>6. 邮件收发</h3><p>推荐 <code>foxmail</code>。没错，就是微信之父张小龙做的那个。</p>
<h2 id="高效办公"><a href="#高效办公" class="headerlink" title="高效办公"></a>高效办公</h2><p>常用办公软件。</p>
<h3 id="1-办公套件"><a href="#1-办公套件" class="headerlink" title="1. 办公套件"></a>1. 办公套件</h3><p>不必说，以下两者功能几乎一模一样，完全可相互替代。二选一即可：</p>
<ul>
<li><code>Microsoft Office</code></li>
<li><code>WPS Office</code></li>
</ul>
<h3 id="2-远程办公"><a href="#2-远程办公" class="headerlink" title="2. 远程办公"></a>2. 远程办公</h3><ul>
<li>阿里的<code>钉钉</code></li>
<li>头条的<code>飞书</code></li>
<li>腾讯的<code>TIM</code>，以及比较古老的<code>RTX</code></li>
</ul>
<h3 id="3-远程协助"><a href="#3-远程协助" class="headerlink" title="3. 远程协助"></a>3. 远程协助</h3><p>屏幕远程协助推荐 <code>team view</code>。</p>
<p>上面这些软件，基本上覆盖了大家日常上网和办公的高频场景，日常使用应该问题不大了。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>修改MySQL的自增ID</title>
    <url>/2020/04/12/mysql-change-auto-increment-id/</url>
    <content><![CDATA[<p>近期在做一个数据迁移的项目时，需要把产品分类数据导入新表中。因为数据是爬虫抓取下来的，有些字段数据内容不完整或格式错误，因此执行了多次导入才最终导入成功。期间需要清空错误数据然后重新导入，如果不重置自增ID，则每次导入同样的数据，ID会越来越大。 那么如何设置自增ID呢？<br>首先，可以用如下语句查看当前的自增ID是多少：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> AUTO_INCREMENT <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">WHERE</span> TABLE_SCHEMA <span class="operator">=</span> <span class="string">&#x27;your-database-name&#x27;</span> <span class="keyword">AND</span> TABLE_NAME <span class="operator">=</span> <span class="string">&#x27;your-table-name&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>然后，我们来修改自增ID：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> your<span class="operator">-</span><span class="keyword">table</span><span class="operator">-</span>name AUTO_INCREMENT<span class="operator">=</span><span class="number">1000</span>;</span><br></pre></td></tr></table></figure>
<p>以上语句就可以把自增ID设置为1000。<br>至于最终设置的对不对，用上面第一条SQL查一下就知道了。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云RDS Mysql物理备份文件恢复到自建数据库</title>
    <url>/2020/01/19/mysql-data-recovery-from-physical-db-files/</url>
    <content><![CDATA[<p>今天需要将Mysql数据从RDS迁移到ECS云服务器上自建Mysql中。因我的RDS已到期停机，无法通过mysqldump等命令导出数据，好在RDS给提供了数据库物理文件的每日全量备份，姑且用之。<br>整个操作流程可分为三个：下载解压物理文件备份， 使用Percona XtraBackup恢复数据，启动MySQL并校验数据。</p>
<h2 id="下载解压备份文件"><a href="#下载解压备份文件" class="headerlink" title="下载解压备份文件"></a>下载解压备份文件</h2><p>在RDS的备份恢复界面找到最新备份:</p>
<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200119225737-71726.png" alt="1579445856935"></p>
<p>获取下载地址并使用wget或curl下载到ECS机器上。下载得到的是一个tar.gz压缩包，使用如下命令解压缩：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar -izxvf &#x27;&lt;backup_file_name.tar.gz&gt;&#x27; -C &#x27;&lt;MySQL data dir&gt;&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">for</span> example，my <span class="built_in">command</span> is:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tar -izxvf /mnt/backup_data/db_backup/rds_data_20200118.tar.gz -C /var/lib/mysql</span></span><br></pre></td></tr></table></figure>
<p>这里我直接解压到了默认的MySQL数据目录&#x2F;var&#x2F;lib&#x2F;mysql.（我的MySQL是新装的，还没启动，因此默认数据目录下是空的）。</p>
<h2 id="使用Percona-XtraBackup恢复数据"><a href="#使用Percona-XtraBackup恢复数据" class="headerlink" title="使用Percona XtraBackup恢复数据"></a>使用Percona XtraBackup恢复数据</h2><p>首先，需要安装Percona XtraBackup。这里需要注意，不同的MySQL版本，需要不同的Percona XtraBackup版本。比如，MySQL 5.6及之前的版本需要<a href="https://www.percona.com/doc/percona-xtrabackup/2.3/installation/yum_repo.html#installing-percona-xtrabackup-using-downloaded-rpm-packages">安装 Percona XtraBackup 2.3</a>，MySQL 5.7版本需要<a href="https://www.percona.com/doc/percona-xtrabackup/2.4/installation.html">安装 Percona XtraBackup 2.4</a>，MySQL 8.0版本需要<a href="https://www.percona.com/doc/percona-xtrabackup/8.0/installation.html">安装 Percona XtraBackup 8.0</a>。<br>安装完毕后，执行如下命令，恢复解压后的文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">innobackupex --defaults-file=/var/lib/mysql/backup-my.cnf --apply-log /var/lib/mysql</span><br></pre></td></tr></table></figure>
<p>若恢复成功，则会提示类似文字：</p>
<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200119232144-778390.jpeg" alt="恢复成功提示"></p>
<h2 id="启动MySQL并校验数据"><a href="#启动MySQL并校验数据" class="headerlink" title="启动MySQL并校验数据"></a>启动MySQL并校验数据</h2><p>设置正确的文件属主：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R mysql:mysql /var/lib/mysql</span><br></pre></td></tr></table></figure>
<p>执行如下命令启动mysql：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service mysql restart</span><br></pre></td></tr></table></figure>
<p>使用各种客户端软件连接MySQL，根据业务情况校验各数据库、各表的数据。</p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ul>
<li><a href="https://help.aliyun.com/knowledge_detail/41817.html">RDS MySQL 物理备份文件恢复到自建数据库 - 阿里云</a></li>
</ul>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL数据库编码更改为utf8mb4</title>
    <url>/2020/04/11/mysql-utf8mb4/</url>
    <content><![CDATA[<p>现在大家打字聊天都喜欢发表情符号，而一个表情符号需要4个字节存储，对应的字符编码是utf8mb4。MySQL如果不做设置，默认编码会是乱七八糟的，什么都可能出现。比如下面这个：</p>
<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200411101213-172439.png" alt="1586571131272"></p>
<p>如上图所示，我们可以使用<code>SHOW VARIABLES WHERE Variable_name LIKE &#39;character_set_%&#39; OR Variable_name LIKE &#39;collation%&#39;;</code>命令查询数据库服务器的编码设置。</p>
<p>使用utf8编码大家应该都没有异议，虽然关于utf8的争议从来就没有消停过，但它仍然一骑绝尘，逐渐成为存储多字节文字的事实标准。所以在这里不讨论为何不适用gbk甚至更古老的gb2312的话题。</p>
<h3 id="为什么使用utf8mb4"><a href="#为什么使用utf8mb4" class="headerlink" title="为什么使用utf8mb4"></a>为什么使用utf8mb4</h3><p>那么，为什么一定要使用utf8mb4编码呢？继续使用utf8编码不可以吗? 以前可以，现在不可以了。简单来说，utf8mb4是utf8的超集。utf8mb4完全兼容utf8，换句话说，用utf8mb4代替utf8是没有问题的；反之，utf8是不能替代utf8mb4的。采用utf8mb4,主要是为了解决文章开头我们提到的存储表情符号的问题。关于mysql使用utf8编码，网上有很多惨痛案例， 比如<a href="https://zhuanlan.zhihu.com/p/63360270">记住：永远不要在 MySQL 中使用 UTF-8</a></p>
<h3 id="如何设置"><a href="#如何设置" class="headerlink" title="如何设置"></a>如何设置</h3><p>首先，设置 <code>my.cnf</code>文件，这个文件一般位于<code>/etc/my.cnf</code>。设置如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake=FALSE</span><br><span class="line">character-set-server=utf8mb4</span><br><span class="line">collation-server=utf8mb4_unicode_ci</span><br><span class="line">init_connect=&#x27;SET NAMES utf8mb4&#x27;</span><br></pre></td></tr></table></figure>
<p>注意，不同版本mysql或mariadb, 配置文件位置可能不一样，请灵活处理。</p>
<p>设置完成后，需要重启mysql服务。重启后，登陆mysql后台，继续用<code>SHOW VARIABLES WHERE Variable_name LIKE &#39;character_set_%&#39; OR Variable_name LIKE &#39;collation%&#39;;</code>命令检查配置是否OK。如果出现下面的配置，说明配置OK了。</p>
<p><img src="https://raw.githubusercontent.com/ocre/blog-pub-images/master/typora/20200411104753-963241.png" alt="1586573272451"></p>
<p>另外，不要忘了把现有的数据库和表都转成utf8mb4编码。<br>更改数据库编码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> DATABASE caitu99 <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_general_ci;</span><br></pre></td></tr></table></figure>
<p>更改表编码：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME <span class="keyword">CONVERT</span> <span class="keyword">TO</span> <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 COLLATEutf8mb4_general_ci; </span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js开发常用命令</title>
    <url>/2020/10/10/node-js-development-common-commands/</url>
    <content><![CDATA[<h4 id="node多版本管理工具-nvm"><a href="#node多版本管理工具-nvm" class="headerlink" title="node多版本管理工具 nvm"></a>node多版本管理工具 nvm</h4><ul>
<li>nvm list</li>
<li>nvm current</li>
<li>nvm install stable</li>
<li>nvm install 9.2.0</li>
<li>nvm use 9.2.0</li>
</ul>
<h4 id="包管理工具-npm"><a href="#包管理工具-npm" class="headerlink" title="包管理工具 npm"></a>包管理工具 npm</h4><ul>
<li>npm list -g –depth 0</li>
<li>npm install webpack -g</li>
<li>npm install # 安装依赖</li>
<li>npm run init  # 项目初始化</li>
<li>npm run dev  # 运行测试环境</li>
<li>npm run build  # 生产环境打包</li>
</ul>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2020/04/12/python-loop-with-index/</url>
    <content><![CDATA[<p>Python默认的<code>for ... in ...</code>循环是不带索引序号的，例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">presidents = [<span class="string">&quot;Washington&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Jefferson&quot;</span>, <span class="string">&quot;Madison&quot;</span>, <span class="string">&quot;Monroe&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Jackson&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> presidents:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;President : &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">President : Washington</span><br><span class="line">President : Adams</span><br><span class="line">President : Jefferson</span><br><span class="line">President : Madison</span><br><span class="line">President : Monroe</span><br><span class="line">President : Adams</span><br><span class="line">President : Jackson</span><br></pre></td></tr></table></figure>
<p>在这个例子中，我们可以打印出总统的名字，但不能打印出该总统是第几任总统。那么，如何打印出是第几任总统呢？用<code>enumerate()</code>函数。改成如下形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">presidents = [<span class="string">&quot;Washington&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Jefferson&quot;</span>, <span class="string">&quot;Madison&quot;</span>, <span class="string">&quot;Monroe&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Jackson&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> num, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(presidents, start=<span class="number">1</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;President &#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(num, name))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">President 1: Washington</span><br><span class="line">President 2: Adams</span><br><span class="line">President 3: Jefferson</span><br><span class="line">President 4: Madison</span><br><span class="line">President 5: Monroe</span><br><span class="line">President 6: Adams</span><br><span class="line">President 7: Jackson</span><br></pre></td></tr></table></figure>
<p>搞定！</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>使用defaultdict精简Python代码</title>
    <url>/2020/02/26/python-use-defaultdict-to-reduce-code/</url>
    <content><![CDATA[<h3 id="普通dict实现计数统计"><a href="#普通dict实现计数统计" class="headerlink" title="普通dict实现计数统计"></a>普通dict实现计数统计</h3><p>我们常常用Python的<code>dict</code>来做简单的计数统计。先看下面一段代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;cindy&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;cindy&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line">name_counts = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="keyword">if</span> name <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">        name_counts[name] = <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        name_counts[name] += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(name_counts)</span><br></pre></td></tr></table></figure>
<p>这段代码能够统计出每个名字出现的次数。这里我们使用了普通的<code>dict</code>结构names_counts来保存名字和出现次数的映射关系。我们知道，如果直接访问字典中不存在的键，会抛出<code>KeyError</code>异常。比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>name_counts = &#123;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>name_counts[<span class="string">&#x27;ocre&#x27;</span>] += <span class="number">1</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">KeyError: <span class="string">&#x27;ocre&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<p>为了避免<code>KeyError</code>异常，通常需要使用一个<code>if name in name_counts: ... else ...</code>的代码段来检查词典中是否存在特定的键。如果键已经存在，则直接累加操作，如果不存在，则先赋一个初始值。</p>
<h3 id="引入defaultdict来简化代码"><a href="#引入defaultdict来简化代码" class="headerlink" title="引入defaultdict来简化代码"></a>引入defaultdict来简化代码</h3><p>对于有代码洁癖的猿来说，这样的代码仍然有一股坏味道。我们可以用<code>defaultdict</code>来简化一下。简化后的代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">names = [<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;bob&#x27;</span>,<span class="string">&#x27;cindy&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;alice&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;ocre&#x27;</span>,<span class="string">&#x27;cindy&#x27;</span>,<span class="string">&#x27;tom&#x27;</span>]</span><br><span class="line">name_counts = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    name_counts[name] +=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(name_counts)</span><br></pre></td></tr></table></figure>
<p>可见，在引入<code>defaultdict</code>后，烦人的<code>if-else</code>被干掉了。（BTW， 统计代码还可以利用其他方法进一步简化，参考我的另一篇博文：<a href="/2020/02/26/four-ways-to-count-in-python/" title="Python中实现计数统计的4种方法">Python中实现计数统计的4种方法</a>）</p>
<h3 id="引申：如何构造defaultdict？"><a href="#引申：如何构造defaultdict？" class="headerlink" title="引申：如何构造defaultdict？"></a>引申：如何构造defaultdict？</h3><p>这里我们使用了<code>defaultdict</code>来代替普通<code>dict</code>，来给name_counts中不存在的键设置默认值，默认值由<code>defaultdict()</code>的第一个参数确定。</p>
<p>构造<code>defaultdict</code>，需传递一个工厂函数作为参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mydict = collections.defaultdict( factory_function )</span><br></pre></td></tr></table></figure>
<p>这里的工厂函数，可以是普通类型，比如 <code>list</code>,<code>set</code>,<code>str</code>,<code>int</code>等，当访问一个不存在键不存在时，返回这些类型的默认值，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1 = defaultdict(<span class="built_in">int</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2 = defaultdict(<span class="built_in">list</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3 = defaultdict(<span class="built_in">set</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d4 = defaultdict(<span class="built_in">str</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1</span><br><span class="line">defaultdict(&lt;<span class="keyword">class</span> <span class="string">&#x27;int&#x27;</span>&gt;, &#123;&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d1[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d2[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d3[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"><span class="built_in">set</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d4[<span class="string">&#x27;key&#x27;</span>]</span><br><span class="line"><span class="string">&#x27;&#x27;</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>工厂函数也可以是普通的无参函数，比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; from collections import defaultdict</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line">&gt;&gt;&gt; def factory_func():</span><br><span class="line">...     return []</span><br><span class="line">...</span><br><span class="line">&gt;&gt;&gt; d5 = defaultdict(factory_func)</span><br><span class="line">&gt;&gt;&gt; d5</span><br><span class="line">defaultdict(&lt;function factory_func at 0x0000027817B3F378&gt;, &#123;&#125;)</span><br><span class="line">&gt;&gt;&gt; d5[&#x27;ocre&#x27;]</span><br><span class="line">[]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<p>工厂函数还可以用lambda表达式（匿名函数）来代替，比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d6 = defaultdict(<span class="keyword">lambda</span> : <span class="number">0</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d6</span><br><span class="line">defaultdict(&lt;function &lt;<span class="keyword">lambda</span>&gt; at <span class="number">0x0000027817C2E268</span>&gt;, &#123;&#125;)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>d6[<span class="string">&#x27;ocre&#x27;</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的*和**运算符是什么意思？有什么区别？</title>
    <url>/2020/02/24/python-star-operator/</url>
    <content><![CDATA[<p>看到这么一段<code>Flask</code>代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">view_data = <span class="built_in">dict</span>(</span><br><span class="line">    rows = posts[start:end],</span><br><span class="line">    page = page,</span><br><span class="line">    has_next_page = has_next_page,</span><br><span class="line">)</span><br><span class="line"><span class="keyword">return</span> render_template(<span class="string">&#x27;posts.html&#x27;</span>, **view_data)</span><br></pre></td></tr></table></figure>
<p>代码中最后一行时，发现里边有<code>**</code>这样两个星号连在一起用的语法，不解其意。查阅资料后，才发现星号运算符还是真是神通广大。具体来说，有4种不同用途。</p>
<h3 id="1-算数运算符"><a href="#1-算数运算符" class="headerlink" title="1. 算数运算符"></a>1. 算数运算符</h3><p><code>*</code> 表示乘法运算， <code>**</code>表示乘方运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> * <span class="number">2</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span> ** <span class="number">2</span></span><br><span class="line"><span class="number">9</span></span><br></pre></td></tr></table></figure>

<h3 id="2-序列解包"><a href="#2-序列解包" class="headerlink" title="2. 序列解包"></a>2. 序列解包</h3><p><code>序列解包</code>是Python的一种语法糖，可以用来简化代码。<br>普通的序列解包，要求赋值运算符<code>=</code>左侧的变量个数和右侧的变量值个数相等。示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>lat, lon = <span class="number">108</span>, <span class="number">33</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lat</span><br><span class="line"><span class="number">108</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>lon</span><br><span class="line"><span class="number">33</span></span><br></pre></td></tr></table></figure>
<p>若<code>=</code>左边的变量个数和右侧的变量值个数不相等，则解包失败报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: too many values to unpack (expected <span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, b, c = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ValueError: <span class="keyword">not</span> enough values to unpack (expected <span class="number">3</span>, got <span class="number">2</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line">这时，就可以使用 `*`星号运算符来处理了。`*`运算符将右侧多余的变量值**按顺序合并**成一个序列赋值给`*`标记的变量，用法示例如下:</span><br><span class="line">​```python</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, *b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>*a, b = <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, *b = <span class="number">1</span>, <span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[<span class="number">2</span>]</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a, *b = <span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<h3 id="3-函数形参"><a href="#3-函数形参" class="headerlink" title="3. 函数形参"></a>3. 函数形参</h3><p><code>*</code>和<code>**</code>都可以用作函数的形参，用来将不定数量的参数传递给一个函数。一个星号用来传递元组<code>tuple</code>，两个星号用来传递字典<code>dict</code>，通常用<code>*args</code>和<code>*kwargs</code>来分别表示。<br>示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, *args</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a, args)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="number">1</span> (<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, **kwargs</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a, kwargs)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, lat=<span class="number">108</span>, lon=<span class="number">33</span>)</span><br><span class="line"><span class="number">1</span> &#123;<span class="string">&#x27;lat&#x27;</span>: <span class="number">108</span>, <span class="string">&#x27;lon&#x27;</span>: <span class="number">33</span>&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(args, kwargs)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, name=<span class="string">&#x27;ocre&#x27;</span>, sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ocre&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-函数实参"><a href="#4-函数实参" class="headerlink" title="4. 函数实参"></a>4. 函数实参</h3><p>为避免实参过长，可以用<code>*</code>和<code>**</code>对多个参数进行打包，示例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">func</span>(<span class="params">a, **kwargs</span>):</span><br><span class="line"><span class="meta">... </span>    <span class="built_in">print</span>(a, kwargs)</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, name=<span class="string">&#x27;ocre&#x27;</span>, sex=<span class="string">&#x27;male&#x27;</span>)</span><br><span class="line"><span class="number">1</span> &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ocre&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;ocre&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>:<span class="string">&#x27;male&#x27;</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>func(<span class="number">1</span>, **data)</span><br><span class="line"><span class="number">1</span> &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;ocre&#x27;</span>, <span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>
<p>本文开头我碰到的情况，就属于最后这种用法。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch安全设置</title>
    <url>/2020/04/03/secure-your-elasticsearch/</url>
    <content><![CDATA[<p>经常在网上看到因Elasticsearch服务裸奔造成的安全事件，比如某婚庆网站因Elasticsearch数据暴露在公网上被曝光，我本来不以为意，没想到自己的一台小服务器今天也中招了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">curl -XGET 192.168.1.11:9200/_cat/indices</span></span><br><span class="line">yellow open locationkeywordv1     XH3c3vSWRAWOeAD9ZRDUKA 5 1 93 0 147.4kb 147.4kb</span><br><span class="line">yellow open nightlionsecurity.com X_uOYfJ9ThitglEA17LzbA 5 1  0 0    955b    955b</span><br></pre></td></tr></table></figure>
<p>攻击者删除了我几乎所有的索引数据，还嚣张地以用他的网站域名<em>nightlionsecurity.com</em>建了一个新索引。</p>
<p>看来侥幸心理要不得，安全问题随时都不能马虎。那么，如何保障Elasticsearch服务的安全呢？<br>今天只说一条：禁止外网访问Elasticsearch。</p>
<h3 id="禁止外网访问Elasticsearch"><a href="#禁止外网访问Elasticsearch" class="headerlink" title="禁止外网访问Elasticsearch"></a>禁止外网访问Elasticsearch</h3><p>首先要做的就是修改Elasticsearch的配置文件。</p>
<h4 id="1-将Elasticsearch绑定到内网地址"><a href="#1-将Elasticsearch绑定到内网地址" class="headerlink" title="1. 将Elasticsearch绑定到内网地址"></a>1. 将Elasticsearch绑定到内网地址</h4><p>修改配置文件<em>elasticsearch.yml</em>，设置固定的内网IP：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">network.host: 192.168.1.11</span><br></pre></td></tr></table></figure>

<p>然后需要禁止从外网访问Elasticsearch。可以从以下三方面入手：</p>
<h4 id="2-防火墙禁止Elasticsearch端口访问"><a href="#2-防火墙禁止Elasticsearch端口访问" class="headerlink" title="2. 防火墙禁止Elasticsearch端口访问"></a>2. 防火墙禁止Elasticsearch端口访问</h4><p>Elasticsearch节点暴露了三个默认端口：</p>
<ul>
<li>9200： 集群对外访问端口</li>
<li>9300： 集群内部通信端口</li>
<li>5601：Kibana的对外访问端口</li>
</ul>
<p>我们需要做的，就是限制直接从外网访问这几个端口。如果已经修改了默认端口，限制方法相同。我们拿9200端口举例，看一下如何限制访问。</p>
<p>在这里我们把目标明确一下：外网无法访问9200端口，内网同一网段可以访问。<br>假定我的内网IP为<em>192.168.1.30</em>。按以下步骤操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许内网同一网段ip过来的请求</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 9200 -s 192.168.1.0/24 -j ACCEPT</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拒绝其他请求</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 9200 -j DROP</span><br><span class="line"><span class="meta prompt_"># </span></span><br></pre></td></tr></table></figure>
<p>其他两个端口9300和5601按类似步骤操作即可。<br>配置完成后，可使用以下命令检查规则顺序：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">iptables -L -n</span><br></pre></td></tr></table></figure>
<p>最后，这里设置的规则只是临时的，重启后就失效了。如果想重启后继续生效，需要执行以下命令将规则保存起来：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service iptables save</span><br></pre></td></tr></table></figure>
<p>注意，若执行 <code>service iptables save</code>时提示不存在<code>save</code>指令等情况，说明没有安装<em>iptables-service</em> 服务。需要先<a href="/2020/04/02/centos7-enable-iptables/" title="centos7安装并启用iptables">安装iptables-service</a>后再执行保存。</p>
]]></content>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy开发环境搭建</title>
    <url>/2020/02/18/scrapy-startup/</url>
    <content><![CDATA[<h2 id="准备Python3运行环境"><a href="#准备Python3运行环境" class="headerlink" title="准备Python3运行环境"></a>准备Python3运行环境</h2><p>Scrapy基于Python语言编写，因此运行Scrapy需要先安装Python运行环境。所谓Python运行环境指可以编译执行Python代码的软件集合。已经安装了运行环境的请直接跳过。<br>目前常见的Python运行环境有三种方式：<br>1.直接安装<a href="https://www.python.org/">Python3</a><br>2.安装<a href="https://www.anaconda.com/">Anaconda</a><br>3.安装<a href="https://conda.io/miniconda.html">Miniconda</a></p>
<p>我选择安装Anaconda，因为相对于直接安装Python3，Anaconda提供了更简便强大的包管理和环境管理功能。<br>Anaconda是Python的一个科学计算发行版，支持 Linux, Mac和Windows系统，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。Anaconda内置了数百个Python标准库，装上Anaconda，就相当于把Python和一些如Numpy、Pandas、Scrip、Matplotlib等常用的库自动安装好了，使得安装比常规python安装要容易。因而建议直接安装Anaconda。直接从<a href="(https://www.anaconda.com/">官网</a>下载最新版Anaconda社区版安装包安装即可。</p>
<p>当然，喜欢掌控一切的同学可以选择安装Miniconda。Miniconda可以看做是Anaconda的一个精简版。如果拿房子来比喻，Anaconda是精装房，Miniconda是毛坯房。Miniconda去掉了Anaconda内置的大量常用工具包，只提供一个较为纯净的Python运行环境和Conda（Conda是一种通用包管理系统，旨在构建和管理任何语言和任何类型的软件。<a href="./conda-basic-usage.html">Conda简介及基本用法</a>）。需要什么包就自己装什么包。</p>
<p>装好Anaconda后，就可以继续安装Scrapy了。</p>
<h2 id="安装Scrapy"><a href="#安装Scrapy" class="headerlink" title="安装Scrapy"></a>安装Scrapy</h2><p>按惯例，参照<a href="https://scrapy.org/">Scrapy官网</a>的建议进行安装。官网提供了conda和pip两种安装方式，一条命令即可搞定。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择conda方式安装</span></span><br><span class="line">conda install scrapy -c conda-forge</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">选择pip方式安装</span></span><br><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>
<p>安装好Scrapy后，就可以创建Scrapy项目了。</p>
<h2 id="创建Scrapy项目"><a href="#创建Scrapy项目" class="headerlink" title="创建Scrapy项目"></a>创建Scrapy项目</h2><p>首先进入将要存放Scrapy工程代码的目录，执行如下命令即可创建一个名为<code>tutorial</code>的工程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">scrapy startproject tutorial</span><br></pre></td></tr></table></figure>
<p>我在执行上面命令的时候系统报错了，提示<code>Fatal error in launcher: Unable to create process using &#39;&quot;d:\bld\scrapy_1572360424769\_h_env\python.exe&quot;</code>。改为执行以下命令即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m scrapy startproject tutorial</span><br></pre></td></tr></table></figure>
<p>执行成功后，将在当前目录下创建一个新的<code>tutorial</code>目录，目录结构如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tutorial/</span><br><span class="line">    scrapy.cfg            # Scrapy的部署配置文件</span><br><span class="line">    tutorial/             # Scrapy项目的Python模块</span><br><span class="line">        __init__.py</span><br><span class="line">        items.py          # items definition file</span><br><span class="line">        middlewares.py    # project middlewares file</span><br><span class="line">        pipelines.py      # project pipelines file</span><br><span class="line">        settings.py       # project settings file</span><br><span class="line">        spiders/          # spider子模块</span><br><span class="line">            __init__.py</span><br></pre></td></tr></table></figure>
<p>接下来就可以编写自己的spider类了。请参考Scrapy官方的<a href="https://docs.scrapy.org/en/latest/intro/tutorial.html#our-first-spider">Tutorial</a>。</p>
<h2 id="Scrapy常见命令"><a href="#Scrapy常见命令" class="headerlink" title="Scrapy常见命令"></a>Scrapy常见命令</h2><ul>
<li>创建spider（基于basic模板）：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m scrapy genspider quotes &quot;quotes.toscrape.com&quot;</span><br></pre></td></tr></table></figure></li>
<li>运行spider：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m scrapy crawl quotes</span><br></pre></td></tr></table></figure>
或者<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m scrapy runspider quotes.py</span><br></pre></td></tr></table></figure></li>
<li>测试提取数据：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m scrapy shell &#x27;http://quotes.toscrape.com/page/1/&#x27;</span><br></pre></td></tr></table></figure></li>
<li>导出数据到<code>JSON</code>文档：<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m scrapy crawl quotes -o quotes.json</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Django开发环境搭建</title>
    <url>/2020/04/04/setup-django-develop-environment/</url>
    <content><![CDATA[<p>整理了一下我的Django开发环境配置，步骤如下：</p>
<ol>
<li>安装并配置conda<br>我直接下载<code>Anaconda</code>。</li>
<li></li>
</ol>
]]></content>
      <tags>
        <tag>Tools</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache Shiro简介</title>
    <url>/2020/01/06/shiro-at-a-glance-01/</url>
    <content><![CDATA[<h3 id="Shiro是什么？"><a href="#Shiro是什么？" class="headerlink" title="Shiro是什么？"></a>Shiro是什么？</h3><p>Shiro是Java领域一个开源安全框架，可以为应用程序提供全面的安全管理服务，功能包括但不限于身份认证、授权、Session管理、加密等。Shiro目前隶属于Apache Software Foundation，其主要竞争对手是Spring Security。相对于Spring Security, Shiro更加简单轻便，适合入门使用。</p>
<h3 id="Shiro能做什么？"><a href="#Shiro能做什么？" class="headerlink" title="Shiro能做什么？"></a>Shiro能做什么？</h3><p>Shiro的核心功能可以用下图表示：</p>
<p><img src="F:\Dan\work\MNBSB\素材\shiro\ShiroFeatures.png" alt="Shiro核心功能"></p>
<p>从上图可知，Shiro提供以下四个核心功能：</p>
<ol>
<li><strong>身份认证</strong>: 用户身份认证，通常指<em>用户登陆</em></li>
<li><strong>授权</strong>：即权限验证，处理访问控制</li>
<li><strong>Session管理</strong>： </li>
<li><strong>加密服务</strong><br>除了上述四个核心功能外，Shiro还针对不同应用环境提供额外的Feature来简化应用集成：</li>
<li>Web支持</li>
<li>Cache</li>
<li>并发</li>
<li>测试</li>
<li><em>Run as</em></li>
<li><em>Remeber me</em></li>
</ol>
<h3 id="Shiro适用于哪些领域？"><a href="#Shiro适用于哪些领域？" class="headerlink" title="Shiro适用于哪些领域？"></a>Shiro适用于哪些领域？</h3><p>Shiro即可应用于JavaSE环境，用于一般Java程序开发，也适用于JavaEE环境，用于大规模企业级Java应用开发。</p>
<h3 id="Shiro是如何设计的？"><a href="#Shiro是如何设计的？" class="headerlink" title="Shiro是如何设计的？"></a>Shiro是如何设计的？</h3><p>读书时我习惯先读读作者自序，来了解作者写书时面临的问题以及想要传达给读者的意图。同样的，学习一个新的框架，也可以先花点时间看看框架的历史、设计目标和核心概念。</p>
<p>（未完待续）</p>
<h4 id="Shiro极简史"><a href="#Shiro极简史" class="headerlink" title="Shiro极简史"></a>Shiro极简史</h4><p>Shiro诞生（2020年）已经有17岁了。</p>
<p>（未完待续）</p>
<h4 id="Shiro的核心概念"><a href="#Shiro的核心概念" class="headerlink" title="Shiro的核心概念"></a>Shiro的核心概念</h4><p>（未完待续）</p>
<h4 id="Shiro的技术架构"><a href="#Shiro的技术架构" class="headerlink" title="Shiro的技术架构"></a>Shiro的技术架构</h4><p>（未完待续）</p>
]]></content>
      <tags>
        <tag>Java</tag>
        <tag>Authorization</tag>
      </tags>
  </entry>
  <entry>
    <title>MacOS中搭建VS Code + XDebug的PHP调试环境</title>
    <url>/2020/04/24/setup-vscode-with-php-xdebug-for-macos/</url>
    <content><![CDATA[<p>笔者近期在<code>MacOS Catalina</code>环境下搭建了<code>VS Code</code>+<code>XDebug</code>的调试环境，用起来体验还不错。首先交代一下我电脑的环境：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">System: MacOS Catalina 10.15.4</span><br><span class="line">Editor: Visual Studio Code 1.44.2</span><br><span class="line">Language: PHP 7.4.4 (cli) (built: Mar 19 2020 20:12:27) ( NTS )</span><br></pre></td></tr></table></figure>

<p>搭建步骤如下：</p>
<h3 id="安装并配置XDebug"><a href="#安装并配置XDebug" class="headerlink" title="安装并配置XDebug"></a>安装并配置XDebug</h3><h4 id="1-安装XDebug"><a href="#1-安装XDebug" class="headerlink" title="1. 安装XDebug"></a>1. 安装XDebug</h4><p>首先，遵循<a href="https://xdebug.org/docs/install">XDebug官网</a>指示，安装XDebug。<br>这里官方建议使用<code>pecl</code>包管理工具安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pecl install xdebug</span><br></pre></td></tr></table></figure>
<p>也可选择从源码编译安装。安装步骤是标准的<code>configure -&gt; make -&gt; make install</code>, 这里不再赘述，具体请参考官方文档指示。</p>
<h4 id="2-配置XDebug"><a href="#2-配置XDebug" class="headerlink" title="2. 配置XDebug"></a>2. 配置XDebug</h4><p>这里主要是在php.ini文件中指定XDebug的动态链接库的位置、监听ip和端口等。<br>由于系统中可能存在多个<code>php.ini</code>文件，一不小心就改错文件了。因此首先需要定位到当前使用中的<code>php.ini</code>文件。这就需要使用命令<code>php --ini</code>，输出如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Configuration File (php.ini) Path: /usr/local/etc/php/7.4</span><br><span class="line">Loaded Configuration File:         /usr/local/etc/php/7.4/php.ini</span><br><span class="line">Scan for additional .ini files in: /usr/local/etc/php/7.4/conf.d</span><br><span class="line">Additional .ini files parsed:      /usr/local/etc/php/7.4/conf.d/ext-opcache.ini</span><br></pre></td></tr></table></figure>
<p>从上面的输出内容中可以看出来，我的<code>php.ini</code>文件位于<code>/usr/local/etc/php/7.4/php.ini</code>。</p>
<p>然后，在这个<code>php.ini</code>文件中添加<code>[xdebug]</code>配置段。我的配置如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">; put lines below into your working php.ini</span><br><span class="line">[xdebug]</span><br><span class="line">zend_extension = /usr/local/lib/php/pecl/20190902/xdebug.so</span><br><span class="line">xdebug.remote_enable = true</span><br><span class="line">xdebug.remote_port = 9001</span><br><span class="line">xdebug.profiler_enable = true</span><br><span class="line">xdebug.remote_autostart = 1</span><br><span class="line">xdebug.remote_host=localhost</span><br><span class="line">xdebug.remote_log=/var/log/xdebug/xdebug.log</span><br></pre></td></tr></table></figure>
<p>注意，<code>zend_extension</code>需指向你电脑里的<code>xdebug.so</code>所在位置。<br>xdebug默认端口是9000，由于我电脑里9000端口被<code>php-fpm</code>占了，这里把xdebug的端口改成了9001。<br><code>remote_log</code>有时候还是很有用的，建议开启。</p>
<p>配置完成后，</p>
<h3 id="VS-Code安装并配置PHP-Debug插件"><a href="#VS-Code安装并配置PHP-Debug插件" class="headerlink" title="VS Code安装并配置PHP Debug插件"></a>VS Code安装并配置PHP Debug插件</h3><h4 id="1-安装插件"><a href="#1-安装插件" class="headerlink" title="1. 安装插件"></a>1. 安装插件</h4><p>点击vscode左侧边栏<code>Extensions</code>，打开搜索框，输入<code>PHP Debug</code>搜索，同名的插件有好几个，功能几乎没啥区别，我选择了带<code>felixfbecker.php-debug</code>标签的，因为它的配置文档比较详细一些。点击<code>install</code>安装即可。</p>
<h4 id="2-配置插件"><a href="#2-配置插件" class="headerlink" title="2. 配置插件"></a>2. 配置插件</h4><p>点击vscode左侧边栏<code>Run</code>，在打开的小侧栏里点击右上角的<code>⚙</code>齿轮图标，即可按提示新建或打开插件的配置文件<code>launch.json</code>。修改里边的端口号为你的<code>xdebug</code>监听端口号，其它配置可以不用改。这样就可以了。</p>
<h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><p>在vscode中随便打开一个php文件，打上断点（在代码行的左侧边栏点击一下，出现小红点即可）。然后执行它，就可以看到程序停在断点位置了。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>v2ray突然失效超时问题处理</title>
    <url>/2020/05/22/solve-v2ray-timeout-problem/</url>
    <content><![CDATA[<p>今天打开Google，发现不能用了，折腾了近两个小时，才不完美的解决了。</p>
<h4 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h4><p>这个问题的直接表现就是，Google打不开。查了下v2ray客户端日志，发现如下记录：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020/05/22 13:43:00 [Info] [1562828084] v2ray.com/core/transport/internet/tcp: dialing TCP to tcp:1.1.1.1:11111</span><br><span class="line">2020/05/22 13:43:01 [Warning] [1562828084] v2ray.com/core/app/proxyman/outbound: failed to process outbound traffic &gt; v2ray.com/core/proxy/vmess/outbound: failed to find an available destination &gt; v2ray.com/core/common/retry: [dial tcp 1.1.1.1:11111: i/o timeout dial tcp 1.1.1.1:11111: operation was canceled] &gt; v2ray.com/core/common/retry: all retry attempts failed</span><br></pre></td></tr></table></figure>
<p><em>（保密起见，记录中ip地址和端口号已经替换成假的，下文同。）</em></p>
<p>上述日志表明，连接远程v2ray服务端发生了网络IO超时。这意味着，要么服务器出故障了，要么网络出故障了。<br>那就一项一项排查呗，先检查服务器，再检查网络。</p>
<h4 id="服务器排查"><a href="#服务器排查" class="headerlink" title="服务器排查"></a>服务器排查</h4><p>第一步，检查一下服务器是否还在正常工作。一般情况下用服务器ip是否能够ping通作为判断标准。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ping 1.1.1.1</span><br><span class="line">PING 1.1.1.1 (1.1.1.1): 56 data bytes</span><br><span class="line">64 bytes from 1.1.1.1: icmp_seq=0 ttl=50 time=205.611 ms</span><br><span class="line">Request timeout for icmp_seq 1</span><br><span class="line">64 bytes from 1.1.1.1: icmp_seq=2 ttl=50 time=205.445 ms</span><br><span class="line">64 bytes from 1.1.1.1: icmp_seq=3 ttl=50 time=207.564 ms</span><br></pre></td></tr></table></figure>
<p>可见，服务器本身是好的。</p>
<p>第二步，检查v2ray服务端端口是否正常工作。<br>在本地用tcping工具检查v2ray服务端的端口号，发现端口状态为“closed”。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># tcping 1.1.1.1 11111</span><br><span class="line">1.1.1.1 port 11111 closed.</span><br></pre></td></tr></table></figure>
<p>端口closed。似乎抓到背后问题的尾巴了！<br>顺手再查查其他端口比如80、443等常用HTTP端口，发现状态都是“open”。<br>那么，这里可以下一个初步结论：这个端口从本机访问不了了。<br>不过这种情况还无法直接定位到问题根源，需要继续排查。</p>
<p>第三步，检查服务器中v2ray程序是否启动。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ps -ef | grep v2ray</span><br><span class="line">  root      2988     1  0 14:02 ?        00:00:02 /usr/bin/v2ray/v2ray -config /etc/v2ray/config.json</span><br></pre></td></tr></table></figure>
<p>第四步，检查服务器上v2ray监听端口是否开启。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># netstat -nap | grep 11111</span><br><span class="line">tcp6       0      0 :::11111                 :::*                    LISTEN      2988/v2ray</span><br></pre></td></tr></table></figure>
<p>经过以上两个步骤，可以看出v2ray服务端并没有什么问题，仍在正常工作中。<br>第五步，检查服务器防火墙配置，看看有没有禁用v2ray的监听端口。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># iptables --list</span><br><span class="line">...</span><br><span class="line">Chain IN_public_allow (1 references)</span><br><span class="line">...</span><br><span class="line">ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:6170 ctstate NEW,UNTRACKED</span><br><span class="line">ACCEPT     udp  --  anywhere             anywhere             udp dpt:6170 ctstate NEW,UNTRACKED</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>可见，防火墙对v2ray监听端口也正确设置了放行规则。</p>
<p>经过以上检查步骤，断定服务器端配置没有问题。另外，由于本地电脑和服务器都是我一个人在用，也不存在别人改了我的配置，导致本机v2ray和服务端配置不一致的情况。</p>
<h4 id="网络排查"><a href="#网络排查" class="headerlink" title="网络排查"></a>网络排查</h4><p>其实经过上面服务器端检查的第二步，已经能够说明很多问题了。网站服务可正常访问，ssh也能用，唯独v2ray服务受到影响，可见不是服务器机房网络的问题了，而是涉及该端口11111的流量，在传输过程中被ban了。这种情况就难以下确切结论了，只能想其他办法了。</p>
<h4 id="不断试错，最终解决"><a href="#不断试错，最终解决" class="headerlink" title="不断试错，最终解决"></a>不断试错，最终解决</h4><p>找不到根本原因，那就求助万能的搜索引擎吧，看看网友们怎么说。谷歌用不了就只能度娘了。打开百度输入关键词<em>”v2ray连接超时“</em>，竟然第一条就找到了一个貌似提供解决方案的blog，打开一看发布日期，”2020年5月20日“，哦哦，还就是这两天发布的，看来靠谱。该博文给出的方案是v2ray服务器端绑定ipv4监听地址，其实就是修改v2ray配置文件<code>/etc/v2ray/config.json</code>，在<code>inbound</code>节点中加上<code>&quot;listen&quot;: &quot;1.1.1.1&quot;</code>这样的配置项，然后保存退出，重启v2ray。<br>按这个方案试了一下，不行。 回头看博文下面的评论，讨论挺热烈，大家都说方案跑不通。<br>再翻翻其他博文，也都说的云里雾里。</p>
<p>实在没辙了，先换个端口试试吧。<br>修改服务器端v2ray配置文件，端口号由原来的11111改为22222。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># vim /etc/v2ray/config.json</span><br><span class="line">...</span><br><span class="line">&quot;inbound&quot;: &#123;</span><br><span class="line">    &quot;port&quot;: 11111, &lt;------这里修改端口</span><br><span class="line">    &quot;protocol&quot;: &quot;vmess&quot;,</span><br><span class="line">    &quot;listen&quot;:&quot;12.34.56.78&quot;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>修改后，同步修改本机v2ray客户端配置里的端口号。另外别忘了在服务器防火墙里配置开放这个端口。<br>再次打开Google测试，竟然可以访问了！</p>
<p><strong>喜大普奔！</strong></p>
<p>冷静下来后，再次检查本机v2ray日志：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2020/05/22 14:08:11 [Info] [713431801] v2ray.com/core/app/dispatcher: default route for tcp:www.google.com:443</span><br><span class="line">2020/05/22 14:08:11 [Info] [713431801] v2ray.com/core/transport/internet/tcp: dialing TCP to tcp:1.1.1.1:22222</span><br><span class="line">2020/05/22 14:08:11 tcp:127.0.0.1:63193 accepted tcp:www.gstatic.com:443 [proxy] </span><br><span class="line">2020/05/22 14:08:11 tcp:127.0.0.1:63192 accepted tcp:www.google.com:443 [proxy] </span><br><span class="line">2020/05/22 14:08:11 [Info] [3172428981] v2ray.com/core/proxy/vmess/outbound: tunneling request to tcp:www.gstatic.com:443 via tcp:1.1.1.1:22222</span><br><span class="line">2020/05/22 14:08:11 [Info] [713431801] v2ray.com/core/proxy/vmess/outbound: tunneling request to tcp:www.google.com:443 via tcp:1.1.1.1:22222</span><br></pre></td></tr></table></figure>
<p>发现跟远程服务器端的tunnel通道已经成功建立了。<br>最后总结一句话解决办法： <strong>换端口</strong>。</p>
<h4 id="问题反思"><a href="#问题反思" class="headerlink" title="问题反思"></a>问题反思</h4><p>这次问题算是临时得到了解决。至于为什么原来的端口不能用了，怀疑是跟网络运营商，或是国际线路节点有关，可能是因为一些不能明说的原因比如BT下载等，这个端口或端口区间被ban了。这种情况也没办法说理去，只能换端口了。下次要是遇到类似的情况，估计还得换端口。所以说这是不完美的解决办法。</p>
]]></content>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL基础面试题整理-表结构</title>
    <url>/2022/06/25/sql-basic-interview-questions-example/</url>
    <content><![CDATA[<h2 id="SQL基础面试题整理"><a href="#SQL基础面试题整理" class="headerlink" title="SQL基础面试题整理"></a>SQL基础面试题整理</h2><h3 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h3><ul>
<li>学生表<br>  Student(s_id,s_name,s_birth,s_sex) –学生编号,学生姓名, 出生年月,学生性别</li>
<li>课程表<br>  Course(c_id,c_name,t_id) – –课程编号, 课程名称, 教师编号</li>
<li>教师表<br>  Teacher(t_id,t_name) –教师编号,教师姓名</li>
<li>成绩表<br>  Score(s_id,c_id,s_score) –学生编号,课程编号,分数</li>
</ul>
<h3 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h3><ol>
<li>查询平均成绩大于60分的学生的学号和平均成绩</li>
<li>查询所有学生的学号、姓名、选课数、总成绩</li>
<li>查询没学过“张三”老师课的学生的学号、姓名</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> s_id, s_name <span class="keyword">from</span> student <span class="keyword">where</span> s_id <span class="keyword">not</span> <span class="keyword">in</span> (</span><br><span class="line">    <span class="keyword">select</span> s_id <span class="keyword">from</span> score a, course b, teacher c</span><br><span class="line">    <span class="keyword">where</span> a.c_id <span class="operator">=</span> b.c_id <span class="keyword">and</span> b.t_id <span class="operator">=</span> c.t_id <span class="keyword">and</span> c.t_name <span class="operator">=</span> <span class="string">&#x27;张三&#x27;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>​	4. 其他问题 <a href="https://zhuanlan.zhihu.com/p/43289968">https://zhuanlan.zhihu.com/p/43289968</a></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.book_main_id, b.name, b.author, b.last_update_time, b.last_update_content <span class="keyword">from</span> (<span class="keyword">select</span> author, <span class="built_in">max</span>(last_update_time) <span class="keyword">as</span> last_update_time <span class="keyword">from</span> book_main <span class="keyword">where</span> author <span class="keyword">in</span> (<span class="string">&#x27;$authors_str&#x27;</span>) <span class="keyword">group</span> <span class="keyword">by</span> author) <span class="keyword">as</span> a, book_main <span class="keyword">as</span> b <span class="keyword">where</span> a.author<span class="operator">=</span>b.author <span class="keyword">and</span> a.last_update_time<span class="operator">=</span>b.last_update_time&quot;;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>修复Hexo中时序图插件hexo-filter-sequence不显示的问题</title>
    <url>/2020/02/20/show-flowchart-and-sequence-in-hexo/</url>
    <content><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>写Blog时，想展示时序图和流程图，网友给推荐了流程图插件<a href="https://github.com/bubkoo/hexo-filter-flowchart">hexo-filter-flowchart</a>和时序图插件<a href="https://github.com/bubkoo/hexo-filter-sequence">hexo-filter-sequence</a>。装上两个插件之后，根据github上的示例测试了一下，发现在Hexo中时序图无法显示。</p>
<h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><p>根据<a href="https://www.dazhuanlan.com/2019/12/24/5e0209fc19074/">这篇博文</a>的指示，顺利解决了这个问题。修改过程记录如下：</p>
<ol>
<li>修改<code>node_modules\hexo-filter-sequence\index.js</code>文件，<code>flowchart</code>改为<code>sequence</code>，另外去掉<code>snap.svg.js</code>添加<code>rahpael.js</code>，具体改动部分如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo.config.sequence = assign(&#123;</span><br><span class="line">  webfont: &#x27;https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js&#x27;,</span><br><span class="line">  // snap: &#x27;https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js&#x27;,</span><br><span class="line">  raphael:    &#x27;https://cdn.bootcss.com/raphael/2.3.0/raphael.min.js&#x27;,</span><br><span class="line">  underscore: &#x27;https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js&#x27;,</span><br><span class="line">  sequence: &#x27;https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js&#x27;,</span><br><span class="line">  css: &#x27;&#x27;,</span><br><span class="line">  options: &#123;</span><br><span class="line">    theme: &#x27;simple&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, hexo.config.sequence);</span><br></pre></td></tr></table></figure></li>
<li>修改<code>node_modules\hexo-filter-sequence\lib\renderer.js</code>文件第25行左右，<code>flowchart</code>改为<code>sequence</code>，<code>config.snap</code>改为<code>config.rahpael</code>，改动后的内容如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if (sequences.length) &#123;</span><br><span class="line">      var config = this.config.sequence;</span><br><span class="line">      // resources</span><br><span class="line">      data.content += &#x27;&lt;script src=&quot;&#x27; + config.webfont + &#x27;&quot;&gt;&lt;/script&gt;&#x27;;</span><br><span class="line">      // data.content += &#x27;&lt;script src=&quot;&#x27; + config.snap + &#x27;&quot;&gt;&lt;/script&gt;&#x27;;</span><br><span class="line">      data.content += &#x27;&lt;script src=&quot;&#x27; + config.raphael + &#x27;&quot;&gt;&lt;/script&gt;&#x27;;</span><br><span class="line">      data.content += &#x27;&lt;script src=&quot;&#x27; + config.underscore + &#x27;&quot;&gt;&lt;/script&gt;&#x27;;</span><br><span class="line">      data.content += &#x27;&lt;script src=&quot;&#x27; + config.sequence + &#x27;&quot;&gt;&lt;/script&gt;&#x27;;</span><br></pre></td></tr></table></figure></li>
<li>hexo的<code>_config.yml</code>配置文件中启用国内CDN（默认的cdnjs.cloudflare.com国内可能无法访问），修改如下：<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sequence config</span><br><span class="line">sequence:</span><br><span class="line">  webfont:    &#x27;https://cdn.bootcss.com/webfont/1.6.28/webfontloader.js&#x27;</span><br><span class="line">  raphael:    &#x27;https://cdn.bootcss.com/raphael/2.3.0/raphael.min.js&#x27;</span><br><span class="line">  # snap:       &#x27;https://cdn.bootcss.com/snap.svg/0.5.1/snap.svg-min.js&#x27;</span><br><span class="line">  underscore: &#x27;https://cdn.bootcss.com/underscore.js/1.9.1/underscore-min.js&#x27;</span><br><span class="line">  sequence:   &#x27;https://cdn.bootcss.com/js-sequence-diagrams/1.0.6/sequence-diagram-min.js&#x27;</span><br><span class="line">  css: # optional, the url for css, such as hand drawn theme </span><br><span class="line">  options: </span><br><span class="line">    theme: </span><br><span class="line">    css_class: </span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># flowchart config</span><br><span class="line">flowchart:</span><br><span class="line">  raphael:   &#x27;https://cdn.bootcss.com/raphael/2.3.0/raphael.min.js&#x27;</span><br><span class="line">  flowchart: &#x27;https://cdn.bootcss.com/flowchart/1.12.2/flowchart.min.js&#x27;</span><br><span class="line">  options: # options used for `drawSVG`</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<p>修改完成后，依次执行<code>hexo clean</code>,<code>hexo g</code>,<code>hexo d</code>重新部署，问题解决。</p>
<p>附测试代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client-&gt;Server: request</span><br><span class="line">Note right of Server: WSGI</span><br><span class="line">Server-&gt;Application: app_callable(environ, start_response)</span><br><span class="line">Application-&gt;Server: start_response(status, response_headers, exc_info=None)</span><br><span class="line">Application-&gt;Server: return iterator</span><br><span class="line">Server-&gt;Client: response</span><br></pre></td></tr></table></figure>

<p>展示效果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client-&gt;Server: request</span><br><span class="line">Note right of Server: WSGI</span><br><span class="line">Server-&gt;Application: app_callable(environ, start_response)</span><br><span class="line">Application-&gt;Server: start_response(status, response_headers, exc_info=None)</span><br><span class="line">Application-&gt;Server: return iterator</span><br><span class="line">Server-&gt;Client: response</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>简单三步实现ssh免密登录</title>
    <url>/2022/07/15/ssh-auto-login-no-password/</url>
    <content><![CDATA[<h2 id="简单三步实现ssh免密登录"><a href="#简单三步实现ssh免密登录" class="headerlink" title="简单三步实现ssh免密登录"></a>简单三步实现ssh免密登录</h2><p>假设我们有两台Linux服务器A(172.22.170.149), B(172.22.170.148), 现在要配置A免密登录B. 操作步骤如下:</p>
<h3 id="先人工登录一次"><a href="#先人工登录一次" class="headerlink" title="先人工登录一次"></a>先人工登录一次</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@172.22.170.148</span><br></pre></td></tr></table></figure>
<p>第一次登录时, 会提示是否把对方机器加入当前机器的已知host列表里(类似白名单).  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">The authenticity of host &#x27;172.22.170.148 (172.22.170.148)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:78SJbYxxxxxxxxxxxxxxxxxxxxxxxxwvB2F3up7VI.</span><br><span class="line">Are you sure you want to continue connecting (yes/no/[fingerprint])? yes</span><br></pre></td></tr></table></figure>
<p>输入<code>yes</code>继续.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Warning: Permanently added &#x27;172.22.170.148&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">root@172.22.170.148&#x27;s password: 这里输入密码</span><br></pre></td></tr></table></figure>
<p>按提示输入密码即可成功登录服务器B.  出现类似以下提示即表示登录成功(这里是阿里云的ECS服务器).</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to Alibaba Cloud Elastic Compute Service !</span><br><span class="line"></span><br><span class="line">Last login: Fri Jul 15 09:40:47 2022 from 101.206.167.221</span><br><span class="line">[root@iZ8vb0nljx0sx0od8wvle6Z ~]#</span><br></pre></td></tr></table></figure>

<p>然后输入<code>exit</code>退出服务器B, 返回服务器A.</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="在A服务器生成密钥对"><a href="#在A服务器生成密钥对" class="headerlink" title="在A服务器生成密钥对"></a>在A服务器生成密钥对</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>
<p>出现交互选择信息时, 一路回车即可.</p>
<h3 id="传输A服务的公钥到B服务器"><a href="#传输A服务的公钥到B服务器" class="headerlink" title="传输A服务的公钥到B服务器"></a>传输A服务的公钥到B服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-copy-id 172.22.170.148</span><br></pre></td></tr></table></figure>
<p>这里要再输入一次密码. 才能把公钥传过去. </p>
<p>然后A服务器就可以ssh免密登录B服务器了.</p>
<h3 id="验证一下"><a href="#验证一下" class="headerlink" title="验证一下"></a>验证一下</h3><p>使用如下命令验证免密登录是否成功:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh root@172.22.170.148</span><br></pre></td></tr></table></figure>
<p> 快来动手试试吧!</p>
]]></content>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>我理解的Unicode、UTF-8之间的关系</title>
    <url>/2020/06/13/unicode-utf8-note/</url>
    <content><![CDATA[<p>Unicode和UTF-8是程序员经常遇到的词汇，基本上涉及文字处理的程序，都离不开这两个概念。可是，一会儿Unicode，一会儿又是UTF-8，它们之间到底是什么关系， 你弄明白了吗？<br>为了搞懂这个问题，有一些基本概念需要提前安利一下。</p>
<h4 id="计算机只能直接处理数字"><a href="#计算机只能直接处理数字" class="headerlink" title="计算机只能直接处理数字"></a>计算机只能直接处理数字</h4><p>我们知道，计算机能直接处理的只有二进制数字，因为CPU的基本功能是进行数字的加减乘除四则运算、与或非等逻辑运算、算数和逻辑移位操作、比较数值、变更符号，以及计算主存地址等操作。所有其它数据，比如文本、图<br>像、音视频等，都需要先转化成数字才能被CPU进行处理。</p>
<h4 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h4><p>人类的语言和文字由一个个字符构成，字符包括文字（比如英文字母、汉字）、标点符号以及其他符号等。每种语言和文字都有自己的字符，全世界的字符加起来有好几百万种。</p>
<h4 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h4><p>由于计算机只能处理二进制数字，而我们人类文字却由字符组成。需要一种编码标准，为每一个字符指定一个二进制数字，来代替字符输入和存储到计算机中。</p>
<h4 id="ASCII编码"><a href="#ASCII编码" class="headerlink" title="ASCII编码"></a>ASCII编码</h4><p>ASCII编码是最初的编码标准。它极其简陋，只有128个字符编码，规定了英语26个字母字符和空格、逗号等其他一些常用字符的二进制编码。</p>
<h4 id="ASCII码的局限"><a href="#ASCII码的局限" class="headerlink" title="ASCII码的局限"></a>ASCII码的局限</h4><p>ASCII编码对于英语来说足够了。但是世界上语言这么多，每种语言又有几百到几千甚至几万个字符，ASCII码不足以表示这么多字符，于是各个国家都先后制定了自己的编码标准。这些标准都是在ASCII码基础上做了大规模的扩充，兼容ASCII码没问题，但是相互之间就不兼容了。因为对于不同的编码标准，同一个二进制编码可能代表了不同的字符，而相同的字符在不同编码标准中所对应的二进制编码也不一样。这就产生了大量的转换难题。乱码问题就是因为编码识别错误，或转换错误造成的。</p>
<h4 id="计算机系统编码的局限"><a href="#计算机系统编码的局限" class="headerlink" title="计算机系统编码的局限"></a>计算机系统编码的局限</h4><p>一般的计算机操作系统，只能支持两种编码混用，一种是ASCII编码，另一种是本地语言编码。计算机系统不支持多种编码的混用。比如同时使用中文GBK、中文繁体BIG5、日文Shift_JIS等。</p>
<h4 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h4><p>想象一下，如果有一种编码，能够包含地球上的所有文字符号，并指定唯一编码，那前面提到的多种编码转识别难题就迎刃而解了。Unicode就是为了解决这种各自为政的混乱局面产生的。Unicode是一种字符编码方案，包括字符集和字符编码表。它囊括了世界上的所有符号，为每种语言的每个字符都设置了一个独一无二的二进制编码。</p>
<h4 id="Unicode的表示问题"><a href="#Unicode的表示问题" class="headerlink" title="Unicode的表示问题"></a>Unicode的表示问题</h4><p>由于Unicode意图囊括世界上所有字符(目前有100多万个字符)，它必然需要一个很大的字符集。这个字符集的二进制整数范围很广，像ASCII那样的1个字节是容纳不了的。需要两个字节的二进制数字才能完全容纳。一旦多于一个字节，就需要考虑存储和传输问题了。相关问题有二：</p>
<ol>
<li>给定一个字符序列，计算机如何知道这是由多个字节组成的Unicode字符，还是单个字节组成的几个ASCII字符？</li>
<li>一般的英文字符和数字，只需要一个字节就能表示，而Unicode却规定了至少两个字节，如果所有英文字符都按双字节存储，会造成大量的存储空间浪费。</li>
<li>给定一个双字节的Unicode字符，在存储和传输时，第一个字节在前，还是第二个字节在前？即Big Endian和Little Endian问题。</li>
</ol>
<p>Unicode编码表只是规定了字符和两个字节二进制数字之间的逻辑对应关系，并没有规定这个二进制数字应该怎么存储和传输。</p>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>为了解决上述几个问题，UTF-8编码产生了。确切的说，<strong>UTF-8编码是Unicode的一种编码实现方式</strong>。除了UTF-8，还有UTF-16，UTF-32等。</p>
<p>UTF-8一个最大的特点是，它是一种变长的编码方式。它使用1-4个字节来表示一个字符。<br>UTF-8只有两条简单的编码规则：</p>
<ol>
<li>对于单字节字符，字节首位为0，后7位为这个字符对应的unicode二进制数字编码。这部分其实就是ASCII码。</li>
<li>对于n字节(n&gt;1)字符，第一个字节的前n位为1，第n+1位为0；后面的第2-第n个字节的前两位为10。每个字节除了刚才指定的这几个位之外，其余用字符的unicode二级制数字码依次填充。<br>编码规则用图表表示如下：</li>
</ol>
<table>
<thead>
<tr>
<th>Unicode范围（16进制）</th>
<th>UTF-8编码方式</th>
</tr>
</thead>
<tbody><tr>
<td>000000 - 00007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>000080 - 0007FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>000800 - 00FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>010000 - 10FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody></table>
<p>举个例子：“汉”字的Unicode编码是0x6C49。0x6C49在0x0800-0xFFFF之间，使用3字节模板：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，用16进制表示是E6 B1 89。</p>
<p>由UTF-8编码反向解读出二进制数字也很简单。从第一个字节开始判断，如果第一个字节的第一位为0，则这个字节单独构成一个字符；而如果第一个字节是1，往后数连续有几个1，则表示这个字符占用了连续几个字节。</p>
<h4 id="UTF-8、UTF-16、UTF-32"><a href="#UTF-8、UTF-16、UTF-32" class="headerlink" title="UTF-8、UTF-16、UTF-32"></a>UTF-8、UTF-16、UTF-32</h4><p>除了最常用的UTF-8编码实现外，Unicode字符集还可以采用UTF-16、UTF-32等编码实现方式。<br>下面用一个例子简答解释一下。<br>例如，“汉字”对应的Unicode编码是0x6c49和0x5b57，分别用三种编码表示为：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">char8_t</span>  data_utf8[]=&#123;<span class="number">0xE6</span>,<span class="number">0xB1</span>,<span class="number">0x89</span>,<span class="number">0xE5</span>,<span class="number">0xAD</span>,<span class="number">0x97</span>&#125;; <span class="comment">//UTF-8编码</span></span><br><span class="line"><span class="type">char16_t</span> data_utf16[]=&#123;<span class="number">0x6C49</span>,<span class="number">0x5B57</span>&#125;;                <span class="comment">//UTF-16编码</span></span><br><span class="line"><span class="type">char32_t</span> data_utf32[]=&#123;<span class="number">0x00006C49</span>,<span class="number">0x00005B57</span>&#125;;        <span class="comment">//UTF-32编码</span></span><br></pre></td></tr></table></figure>

<h4 id="字节序-Big-Endian-和-Little-Endian"><a href="#字节序-Big-Endian-和-Little-Endian" class="headerlink" title="字节序 Big Endian 和 Little Endian"></a>字节序 Big Endian 和 Little Endian</h4><p>字节序有两种，Big Endian大端序和Little Endian小端序，分别简写为BE和LE。对于一个双字节字符来说，如果第一个字节在前面就是大端序，如果第二个字节在前面就是小端序。<br>根据字节序的不同，UTF-16可被实现为UTF-16BE和UTF-16LE，UTF-32可被实现为UTF-32BE和UTF32-LE。举例说明：<br>例如，汉字的“汉”，Unicode编码为0x6c49，分别表示为：</p>
<table>
<thead>
<tr>
<th>Unicode编码</th>
<th>UTF-16BE</th>
<th>UTF-16LE</th>
<th>UTF-32BE</th>
<th>UTF-32LE</th>
</tr>
</thead>
<tbody><tr>
<td>0x006c49</td>
<td>6c 49</td>
<td>49 6c</td>
<td>00 00 6c 49</td>
<td>49 6c 00 00</td>
</tr>
<tr>
<td>0x020c30</td>
<td>d8 43 dc 30</td>
<td>30 dc 43 d8</td>
<td>00 02 0c 30</td>
<td>30 0c 02 00</td>
</tr>
</tbody></table>
<p>那么，计算机如何知道某个文件到底使用哪种字节序呢？<br>Unicode标准建议使用BOM（Byte Order Mark）来区分字节序。在传输字节流之前，先传输被作为BOM字符的“零宽无中断空格”（zero width no-break space）字符，用一个未定义的编号FEFF表示。正好是两个字节。<br>各种UTF编码的BOM如下：</p>
<table>
<thead>
<tr>
<th>UTF编码</th>
<th>Byte Order Mark</th>
</tr>
</thead>
<tbody><tr>
<td>UTF-8 without BOM</td>
<td>无</td>
</tr>
<tr>
<td>UTF-8 with BOM</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16LE</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-16BE</td>
<td>FE FF</td>
</tr>
<tr>
<td>UTF-32LE</td>
<td>FF FE 00 00</td>
</tr>
<tr>
<td>UTF-32BE</td>
<td>00 00 FE FF</td>
</tr>
</tbody></table>
<p>根据BOM就能识别出正确的字节序，从而得到正确的编码方式了。<br>注意，UTF-8的编码方式，其实是规定好了字节顺序的，因此BOM不是必须的。一般不建议在UTF-8文件中加BOM。</p>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC 和 DI</title>
    <url>/2019/12/25/spring-ioc/</url>
    <content><![CDATA[<h2 id="IOC-一种编程思想"><a href="#IOC-一种编程思想" class="headerlink" title="IOC - 一种编程思想"></a>IOC - 一种编程思想</h2><h3 id="定义-（Inversion-of-Control"><a href="#定义-（Inversion-of-Control" class="headerlink" title="定义 （Inversion of Control)"></a>定义 （Inversion of Control)</h3><p>  对象把对其他对象的控制权交给第三方容器（比如Spring），由第三方容器来统一管理对象的生命周期，提供所需的依赖。<br>  控制权：创建、销毁</p>
<h3 id="IOC-VS-DI"><a href="#IOC-VS-DI" class="headerlink" title="IOC VS DI"></a>IOC VS DI</h3><ul>
<li>思想 VS 实现方式</li>
</ul>
<h3 id="处理依赖的第三种方法"><a href="#处理依赖的第三种方法" class="headerlink" title="处理依赖的第三种方法"></a>处理依赖的第三种方法</h3><p>假定A依赖B，如何处理依赖关系：<br>方法1. 原始做法new B()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">doSomeThing</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">    b.doSomeThing();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法2. 简单工厂等创造器模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">IB</span> &#123;</span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B1</span> <span class="keyword">implements</span> <span class="title class_">IB</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B2</span> <span class="keyword">implements</span> <span class="title class_">IB</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B3</span> <span class="keyword">implements</span> <span class="title class_">IB</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BFactory</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> IB <span class="title function_">newB</span><span class="params">(<span class="type">int</span> type)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (type == <span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B1</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="number">2</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B2</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B3</span>();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">doSomeThing</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">IB</span> <span class="variable">b</span> <span class="operator">=</span> BFactory.newB(<span class="number">1</span>);</span><br><span class="line">    b.doSomeThing();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>方法3. 依赖注入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomeThing</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> B b;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">doSomeThing</span><span class="params">()</span> &#123;</span><br><span class="line">    b.doSomeThing();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-两大核心思想之一"><a href="#Spring-两大核心思想之一" class="headerlink" title="Spring 两大核心思想之一"></a>Spring 两大核心思想之一</h3><ul>
<li>IOC</li>
<li>AOP</li>
</ul>
<h2 id="DI-IOC的实现方式"><a href="#DI-IOC的实现方式" class="headerlink" title="DI - IOC的实现方式"></a>DI - IOC的实现方式</h2><p>Spring的DI机制降低了业务对象替换的复杂性，提高了组件之间的解耦。</p>
<h3 id="Spring-实现依赖注入的两种方式"><a href="#Spring-实现依赖注入的两种方式" class="headerlink" title="Spring 实现依赖注入的两种方式"></a>Spring 实现依赖注入的两种方式</h3><ul>
<li>属性 setter 方法注入</li>
<li>有参构造函数注入</li>
</ul>
<h2 id="IOC-容器-对象的超级工厂"><a href="#IOC-容器-对象的超级工厂" class="headerlink" title="IOC 容器 - 对象的超级工厂"></a>IOC 容器 - 对象的超级工厂</h2><h3 id="IOC-容器主要作用"><a href="#IOC-容器主要作用" class="headerlink" title="IOC 容器主要作用"></a>IOC 容器主要作用</h3><ul>
<li>对象的实例化、组装和管理 （instantiate、assembly、manage）</li>
<li>为对象注入依赖 （Dependency Injection）</li>
</ul>
<h3 id="Spring-Core-就是一个IOC容器"><a href="#Spring-Core-就是一个IOC容器" class="headerlink" title="Spring Core 就是一个IOC容器"></a>Spring Core 就是一个IOC容器</h3><p>在Spring体系结构中，Spring Core牢牢占据C位。<br><img src="/Users/shangdan/Desktop/images/20181018212051213.png" alt="Spring核心容器"></p>
<p>Spring容器抽象视图<br><img src="/Users/shangdan/Desktop/images/v2-e640041644f791b0ae800e6a1addc4ec_r.jpg" alt="Spring容器抽象视图"></p>
<h2 id="Spring如何实现IOC容器"><a href="#Spring如何实现IOC容器" class="headerlink" title="Spring如何实现IOC容器"></a>Spring如何实现IOC容器</h2><h3 id="对外接口"><a href="#对外接口" class="headerlink" title="对外接口"></a>对外接口</h3><ul>
<li>定义和注册bean</li>
<li>获取bean</li>
</ul>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li>Bean  - Spring容器管理的Java对象。</li>
<li>BeanFactory   - 专门用来生成和获取Bean的接口。</li>
<li>ApplicationContext - Spring IOC容器的对外代表（接口）。</li>
<li>BeanDefination   - 存储Bean定义的接口。</li>
<li>BeanRegistry   - Bean的注册中心。</li>
</ul>
<p>这里的BeanDefination接口就是xml配置文件中的<bean>标签在Spring中的表示形式。</p>
<h3 id="Spring提供的两种IOC容器"><a href="#Spring提供的两种IOC容器" class="headerlink" title="Spring提供的两种IOC容器"></a>Spring提供的两种IOC容器</h3><ul>
<li>BeanFactory  - org.springframework.beans.factory.BeanFactory<br>管理Bean的超级工厂。</li>
<li>ApplicationContext  - org.springframework.context.ApplicationContext<br>通过继承和组合的方式对BeanFactory做的一层封装。除了具备BeanFactory的能力外，还要负责环境配置管理、生命周期管理、复杂的初始化操作。</li>
</ul>
<h4 id="BeanFactory和ApplicationContext的关系"><a href="#BeanFactory和ApplicationContext的关系" class="headerlink" title="BeanFactory和ApplicationContext的关系"></a>BeanFactory和ApplicationContext的关系</h4><p><img src="/Users/shangdan/Desktop/images/2331003-7940e4534a443c8d.png" alt="BeanFactory和ApplicationContext的关系"><br>还又一个StaticListableBeanFactory。</p>
<p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#spring-core">Spring官方文档</a>的对两者关系的简短表述：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">In short, the BeanFactory provides the configuration framework and basic functionality, and the ApplicationContext adds more enterprise-specific functionality. The ApplicationContext is a complete superset of the BeanFactory and is used exclusively in this chapter in descriptions of Spring’s IoC container</span><br></pre></td></tr></table></figure>

<h4 id="ApplicationContext的继承结构"><a href="#ApplicationContext的继承结构" class="headerlink" title="ApplicationContext的继承结构"></a>ApplicationContext的继承结构</h4><p><img src="/Users/shangdan/Desktop/images/2331003-e7037d3486304ddd.png" alt="ApplicationContext继承结构"></p>
<h3 id="Bean的定义"><a href="#Bean的定义" class="headerlink" title="Bean的定义"></a>Bean的定义</h3><p>bean的属性列表<br><img src="/Users/shangdan/Desktop/images/2331003-efe276be76daf9ee.png" alt="Bean标签的属性列表"><br>bean的三种定义方式</p>
<ul>
<li>xml文件中的bean标签</li>
<li>注解 + 扫描 ComponentScan</li>
<li>定义Configuration类，在类中提供 @Bean 方法</li>
</ul>
<h4 id="xml形式的定义"><a href="#xml形式的定义" class="headerlink" title="xml形式的定义"></a>xml形式的定义</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name1, name2, name3&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.javadoop.ExampleBean&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;cleanup&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 可以用下面三种形式指定构造参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;years&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;7500000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property 的几种情况 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanOne&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;anotherExampleBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;beanTwo&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;yetAnotherBean&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;integerProperty&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="注解形式的定义-注解扫描"><a href="#注解形式的定义-注解扫描" class="headerlink" title="注解形式的定义 + 注解扫描"></a>注解形式的定义 + 注解扫描</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  <span class="keyword">private</span> EmployeeDao employeeDao;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello from Spring!&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.company.app&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MySpringBootApp</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> SpringApplication.run(MySpringBootApp.class, args);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="bean定义、注册、获取的示例代码"><a href="#bean定义、注册、获取的示例代码" class="headerlink" title="bean定义、注册、获取的示例代码"></a>bean定义、注册、获取的示例代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新建一个工厂</span></span><br><span class="line"><span class="type">DefaultListableBeanFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultListableBeanFactory</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新建一个 bean definition</span></span><br><span class="line"><span class="type">GenericBeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> (GenericBeanDefinition) BeanDefinitionBuilder</span><br><span class="line">  .genericBeanDefinition(SomeService.class)</span><br><span class="line">  .setAutowireMode(GenericBeanDefinition.AUTOWIRE_BY_TYPE)</span><br><span class="line">  .getBeanDefinition();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册到工厂</span></span><br><span class="line">factory.registerBeanDefinition(<span class="string">&quot;someService&quot;</span>, beanDefinition);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自己定义一个 bean post processor. 作用是在 bean 初始化之后, 判断这个 bean 如果实现了 ApplicationContextAware 接口, 就把 context 注册进去..(先不要管 context 哪来的...例子嘛)</span></span><br><span class="line">factory.addBeanPostProcessor(<span class="keyword">new</span> <span class="title class_">BeanPostProcessor</span>() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> ApplicationContextAware) &#123;</span><br><span class="line">      <span class="type">GenericApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GenericApplicationContext</span>(factory);</span><br><span class="line">      ((ApplicationContextAware) bean).setApplicationContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bean;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再注册一个 bean post processor: AutowiredAnnotationBeanPostProcessor. 作用是搜索这个 bean 中的 @Autowired 注解, 生成注入依赖的信息.</span></span><br><span class="line"><span class="type">AutowiredAnnotationBeanPostProcessor</span> <span class="variable">autowiredAnnotationBeanPostProcessor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutowiredAnnotationBeanPostProcessor</span>();</span><br><span class="line">autowiredAnnotationBeanPostProcessor.setBeanFactory(factory);</span><br><span class="line">factory.addBeanPostProcessor(autowiredAnnotationBeanPostProcessor);</span><br><span class="line"></span><br><span class="line"><span class="comment">// getBean() 时, 初始化</span></span><br><span class="line"><span class="type">SomeService</span> <span class="variable">SomeService</span> <span class="operator">=</span> factory.getBean(<span class="string">&quot;someService&quot;</span>,SomeService.class);</span><br><span class="line">SomeService.doSomething();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="Spring-Core中模块之间的依赖关系图"><a href="#Spring-Core中模块之间的依赖关系图" class="headerlink" title="Spring Core中模块之间的依赖关系图"></a>Spring Core中模块之间的依赖关系图</h3><p><img src="/Users/shangdan/Desktop/images/1540290875453691.png" alt="Spring核心容器模块之间的依赖关系"></p>
<h3 id="核心实现类"><a href="#核心实现类" class="headerlink" title="核心实现类"></a>核心实现类</h3><p>最简单的BeanFactory：<code>StaticListableBeanFactory</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StaticListableBeanFactory</span> <span class="keyword">implements</span> <span class="title class_">ListableBeanFactory</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; beans;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">StaticListableBeanFactory</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.beans = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">StaticListableBeanFactory</span><span class="params">(Map&lt;String, Object&gt; beans)</span> &#123;</span><br><span class="line">    Assert.notNull(beans, <span class="string">&quot;Beans Map must not be null&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.beans = beans;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addBean</span><span class="params">(String name, Object bean)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.beans.put(name, bean);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">beanName</span> <span class="operator">=</span> BeanFactoryUtils.transformedBeanName(name);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> <span class="built_in">this</span>.beans.get(beanName);</span><br><span class="line">    <span class="keyword">if</span> (bean == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchBeanDefinitionException</span>(beanName, <span class="string">&quot;Defined beans are [&quot;</span> + StringUtils.collectionToCommaDelimitedString(<span class="built_in">this</span>.beans.keySet()) + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (BeanFactoryUtils.isFactoryDereference(name) &amp;&amp; !(bean <span class="keyword">instanceof</span> FactoryBean)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanIsNotAFactoryException</span>(beanName, bean.getClass());</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (bean <span class="keyword">instanceof</span> FactoryBean &amp;&amp; !BeanFactoryUtils.isFactoryDereference(name)) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">exposedObject</span> <span class="operator">=</span> ((FactoryBean)bean).getObject();</span><br><span class="line">        <span class="keyword">if</span> (exposedObject == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(beanName, <span class="string">&quot;FactoryBean exposed null object&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> exposedObject;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(beanName, <span class="string">&quot;FactoryBean threw exception on object creation&quot;</span>, var5);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>单例Bean对象的注册表类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DefaultSingletonBeanRegistry</span> <span class="keyword">extends</span> <span class="title class_">SimpleAliasRegistry</span> <span class="keyword">implements</span> <span class="title class_">SingletonBeanRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Cache of singleton objects: bean name to bean instance. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Cache of singleton factories: bean name to ObjectFactory. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, ObjectFactory&lt;?&gt;&gt; singletonFactories = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Cache of early singleton objects: bean name to bean instance. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; earlySingletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Set of registered singletons, containing the bean names in registration order. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; registeredSingletons = <span class="keyword">new</span> <span class="title class_">LinkedHashSet</span>&lt;&gt;(<span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Names of beans that are currently in creation. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; singletonsCurrentlyInCreation =</span><br><span class="line">			Collections.newSetFromMap(<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Names of beans currently excluded from in creation checks. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; inCreationCheckExclusions =</span><br><span class="line">			Collections.newSetFromMap(<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>));</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** List of suppressed Exceptions, available for associating related causes. */</span></span><br><span class="line">	<span class="meta">@Nullable</span></span><br><span class="line">	<span class="keyword">private</span> Set&lt;Exception&gt; suppressedExceptions;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Flag that indicates whether we&#x27;re currently within destroySingletons. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">singletonsCurrentlyInDestruction</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Disposable bean instances: bean name to disposable instance. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; disposableBeans = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Map between containing bean names: bean name to Set of bean names that the bean contains. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; containedBeanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Map between dependent bean names: bean name to Set of dependent bean names. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; dependentBeanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">/** Map between depending bean names: bean name to Set of bean names for the bean&#x27;s dependencies. */</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Set&lt;String&gt;&gt; dependenciesForBeanMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">64</span>);</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-Bean实例的创建"><a href="#Spring-Bean实例的创建" class="headerlink" title="Spring Bean实例的创建"></a>Spring Bean实例的创建</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory </span></span><br><span class="line"><span class="keyword">protected</span> Object <span class="title function_">doCreateBean</span><span class="params">(<span class="keyword">final</span> String beanName, <span class="keyword">final</span> RootBeanDefinition mbd, <span class="keyword">final</span> <span class="meta">@Nullable</span> Object[] args)</span></span><br><span class="line">			<span class="keyword">throws</span> BeanCreationException &#123;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Instantiate the bean.</span></span><br><span class="line">		...</span><br><span class="line">		instanceWrapper = createBeanInstance(beanName, mbd, args); <span class="comment">// line 555</span></span><br><span class="line">		...</span><br><span class="line">		<span class="comment">// inject dependencies for bean properties </span></span><br><span class="line">		populateBean(beanName, mbd, instanceWrapper); <span class="comment">// line 592</span></span><br><span class="line">		exposedObject = initializeBean(beanName, exposedObject, mbd);</span><br><span class="line">		...</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> exposedObject;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>createBeanInstance方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory line 759</span></span><br><span class="line"><span class="keyword">protected</span> BeanWrapper <span class="title function_">createBeanInstance</span><span class="params">(String beanName, RootBeanDefinition mbd, <span class="meta">@Nullable</span> Object[] args)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; beanClass = <span class="built_in">this</span>.resolveBeanClass(mbd, beanName, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (beanClass != <span class="literal">null</span> &amp;&amp; !Modifier.isPublic(beanClass.getModifiers()) &amp;&amp; !mbd.isNonPublicAccessAllowed()) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanCreationException</span>(mbd.getResourceDescription(), beanName, <span class="string">&quot;Bean class isn&#x27;t public, and non-public access not allowed: &quot;</span> + beanClass.getName());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      Supplier&lt;?&gt; instanceSupplier = mbd.getInstanceSupplier();</span><br><span class="line">      <span class="keyword">if</span> (instanceSupplier != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.obtainFromSupplier(instanceSupplier, beanName);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (mbd.getFactoryMethodName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.instantiateUsingFactoryMethod(beanName, mbd, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">resolved</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">autowireNecessary</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (args == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="keyword">synchronized</span>(mbd.constructorArgumentLock) &#123;</span><br><span class="line">            <span class="keyword">if</span> (mbd.resolvedConstructorOrFactoryMethod != <span class="literal">null</span>) &#123;</span><br><span class="line">              resolved = <span class="literal">true</span>;</span><br><span class="line">              autowireNecessary = mbd.constructorArgumentsResolved;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (resolved) &#123;</span><br><span class="line">          <span class="keyword">return</span> autowireNecessary ? <span class="built_in">this</span>.autowireConstructor(beanName, mbd, (Constructor[])<span class="literal">null</span>, (Object[])<span class="literal">null</span>) : <span class="built_in">this</span>.instantiateBean(beanName, mbd);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          Constructor&lt;?&gt;[] ctors = <span class="built_in">this</span>.determineConstructorsFromBeanPostProcessors(beanClass, beanName);</span><br><span class="line">          <span class="keyword">if</span> (ctors == <span class="literal">null</span> &amp;&amp; mbd.getResolvedAutowireMode() != <span class="number">3</span> &amp;&amp; !mbd.hasConstructorArgumentValues() &amp;&amp; ObjectUtils.isEmpty(args)) &#123;</span><br><span class="line">            ctors = mbd.getPreferredConstructors();</span><br><span class="line">            <span class="keyword">return</span> ctors != <span class="literal">null</span> ? <span class="built_in">this</span>.autowireConstructor(beanName, mbd, ctors, (Object[])<span class="literal">null</span>) : <span class="built_in">this</span>.instantiateBean(beanName, mbd);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>.autowireConstructor(beanName, mbd, ctors, args);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>经过多次弯弯绕之后，终于来到了最终的实例化方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// org.springframework.beans.BeanUtils  line 49</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">instantiateClass</span><span class="params">(Constructor&lt;T&gt; ctor, Object... args)</span> <span class="keyword">throws</span> BeanInstantiationException &#123;</span><br><span class="line">    Assert.notNull(ctor, <span class="string">&quot;Constructor must not be null&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      ReflectionUtils.makeAccessible(ctor);</span><br><span class="line">      <span class="keyword">return</span> KotlinDetector.isKotlinReflectPresent() &amp;&amp; KotlinDetector.isKotlinType(ctor.getDeclaringClass()) ? BeanUtils.KotlinDelegate.instantiateClass(ctor, args) : ctor.newInstance(args);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InstantiationException var3) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanInstantiationException</span>(ctor, <span class="string">&quot;Is it an abstract class?&quot;</span>, var3);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalAccessException var4) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanInstantiationException</span>(ctor, <span class="string">&quot;Is the constructor accessible?&quot;</span>, var4);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException var5) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanInstantiationException</span>(ctor, <span class="string">&quot;Illegal arguments for constructor&quot;</span>, var5);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InvocationTargetException var6) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BeanInstantiationException</span>(ctor, <span class="string">&quot;Constructor threw exception&quot;</span>, var6.getTargetException());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>可见，本质上还是使用反射来获取构造函数，实现对象的实例化的。</p>
<h3 id="Spring-Bean的销毁"><a href="#Spring-Bean的销毁" class="headerlink" title="Spring Bean的销毁"></a>Spring Bean的销毁</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * Actually performs context closing: publishes a ContextClosedEvent and</span></span><br><span class="line"><span class="comment">	 * destroys the singletons in the bean factory of this application context.</span></span><br><span class="line"><span class="comment">	 * &lt;p&gt;Called by both &#123;<span class="doctag">@code</span> close()&#125; and a JVM shutdown hook, if any.</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> org.springframework.context.event.ContextClosedEvent</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #destroyBeans()</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #close()</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@see</span> #registerShutdownHook()</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doClose</span><span class="params">()</span> &#123;</span><br><span class="line">			<span class="comment">// Publish shutdown event.</span></span><br><span class="line">			publishEvent(<span class="keyword">new</span> <span class="title class_">ContextClosedEvent</span>(<span class="built_in">this</span>));</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// Stop all Lifecycle beans, to avoid delays during individual destruction.</span></span><br><span class="line">			<span class="built_in">this</span>.lifecycleProcessor.onClose();</span><br><span class="line">				</span><br><span class="line">			<span class="comment">// Destroy all cached singletons in the context&#x27;s BeanFactory.</span></span><br><span class="line">			destroyBeans();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Close the state of this context itself.</span></span><br><span class="line">			closeBeanFactory();</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Let subclasses do some final clean-up if they wish...</span></span><br><span class="line">			onClose();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Python的WSGI是什么？</title>
    <url>/2020/02/20/what-is-wsgi/</url>
    <content><![CDATA[<h2 id="什么是WSGI？"><a href="#什么是WSGI？" class="headerlink" title="什么是WSGI？"></a>什么是WSGI？</h2><p>WSGI的全称是Web Server Gateway Interface，即Web服务器网管接口。注意，它不是一个服务器、不是Python模块、不是框架、也不是API程序，它不是任何一种软件，而仅仅是Python语言针对Web服务器和Web应用程序之间通用接口的规范（<a href="https://www.python.org/dev/peps/pep-3333">PEP 3333</a>）。符合WSGI规范的应用程序可以运行在任何符合该规范的Web服务器上。</p>
<h2 id="WSGI规范"><a href="#WSGI规范" class="headerlink" title="WSGI规范"></a>WSGI规范</h2><p>WSGI规范十分简单。下面这张时序图展示了WSGI所处的位置，以及调用规则。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Client-&gt;Server: request</span><br><span class="line">Note right of Server: WSGI</span><br><span class="line">Server-&gt;Application: app_callable(environ, start_response)</span><br><span class="line">Application-&gt;Server: start_response(status, response_headers, exc_info=None)</span><br><span class="line">Application-&gt;Server: return iterator</span><br><span class="line">Server-&gt;Client: response</span><br></pre></td></tr></table></figure>

<p>从上图可见，WSGI处于<code>Server</code>和<code>Application</code>之间。<code>Server</code>端负责实现<code>start_response</code>这个<code>callback</code>，<code>Application</code>端负责实现<code>app_callable</code>这个<code>callable</code>对象。<br>其中，<code>app_callable</code>接受两个参数：</p>
<ul>
<li><code>environ</code>: 包含有<code>Server</code>提供的所有请求信息的一个<code>dict</code>对象。</li>
<li><code>start_response</code>: <code>Server</code>端提供的回调方法，<code>Application</code>端可以通过它发送HTTP状态码和HTTP头部信息。<br><code>app_callable</code>最后返回一个封装成可迭代对象的响应体字符串。</li>
</ul>
<p>以下是一个简单的<code>app_callable</code>实现：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">app_callable</span>(<span class="params">environ, start_response</span>):</span><br><span class="line">    response_body = <span class="string">&#x27;Request method: %s&#x27;</span> % environ[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>]</span><br><span class="line">    status = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line">    response_headers = [(<span class="string">&#x27;Content-type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)]</span><br><span class="line">    </span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> [response_body]</span><br></pre></td></tr></table></figure>

<p><code>WSGI</code>的<code>Application</code>端可以支持堆栈式调用。调用栈中间的<code>Application</code>又被称为<code>Middleware</code>。<code>Middleware</code>同时扮演<code>Server</code>和<code>Application</code>两种角色，因此需要同时实现<code>WSGI</code>两端的接口。<br>下图是对<code>Middleware</code>所处位置的一个简单表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Note right of Server: WSGI</span><br><span class="line">Server-&gt;Application1: </span><br><span class="line">Note right of Application1: WSGi</span><br><span class="line">Middleware1-&gt;Application1: </span><br><span class="line">Note right of Middleware1: WSGI</span><br><span class="line">Application1-&gt;Middleware2: </span><br><span class="line">Note right of Middleware2: WSGI</span><br><span class="line">Middleware2-&gt;Middleware3: </span><br><span class="line">Note right of Middleware3: WSGI</span><br><span class="line">Middleware3-&gt;Application2: </span><br><span class="line">Application2-&gt;Middleware3: </span><br><span class="line">Middleware3-&gt;Middleware2: </span><br><span class="line">Middleware2-&gt;Middleware1: </span><br><span class="line">Middleware1-&gt;Application1: </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="WSGI实现示例"><a href="#WSGI实现示例" class="headerlink" title="WSGI实现示例"></a>WSGI实现示例</h2><p>在生产环境，一般用<code>Apache</code>+<code>mod_wsgi</code>来作为<code>Server</code>端的标准实现。这里我们使用Python内置的WSGI服务器<code>wsgiref</code>来实现一个简单示例。<br>编写一个<code>wsgi_test.py</code>文件，内容如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;test wsgi</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wsgi_test.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">application</span> (environ, start_response):</span><br><span class="line">    status = <span class="string">&#x27;200 OK&#x27;</span></span><br><span class="line">    response_headers = [(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/plain&#x27;</span>)]</span><br><span class="line">    start_response(status, response_headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> [<span class="string">f&#x27;Request <span class="subst">&#123;environ[<span class="string">&quot;REQUEST_METHOD&quot;</span>]&#125;</span>&#x27;</span></span><br><span class="line">            <span class="string">f&#x27; <span class="subst">&#123;environ[<span class="string">&quot;PATH_INFO&quot;</span>]&#125;</span> has been&#x27;</span></span><br><span class="line">            <span class="string">f&#x27; processed\r\n&#x27;</span>.encode(<span class="string">&#x27;utf-8&#x27;</span>)]</span><br><span class="line"></span><br><span class="line">server = make_server(<span class="string">&#x27;localhost&#x27;</span>, <span class="number">8000</span>, application)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Wait for a single request, serve it and quit</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Serving HTTP on port 8000...&#x27;</span>)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure>
<p>接着在命令行运行<code>python wsgi_test.py</code>，启动WSGI服务器。然后打开浏览器，输入<code>http://localhost:8000/</code> 就可以看到效果了。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>常用的PostgreSQL窗口函数的案例学习</title>
    <url>/2023/11/30/usecases-of-postgresql-window-functions/</url>
    <content><![CDATA[<h3 id="窗口函数简介"><a href="#窗口函数简介" class="headerlink" title="窗口函数简介"></a>窗口函数简介</h3><p>窗口函数主要是用来对表的数值字段做统计分析的。既然是统计分析就必然涉及到多条记录。<br>窗口函数一般配合<code>avg</code>、<code>max</code>等聚合函数一起使用，通过跨越多行记录的统计数据来影响当前行。<br>它们跟普通聚合函数最大的不同在于它们不改变结果集记录行数。<br>窗口函数的调用语法类似：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function_name(expression) over(window_name)</span><br></pre></td></tr></table></figure>
<p><code>function_name</code>可以为<code>max</code>,<code>min</code>,<code>avg</code>,<code>sum</code>,<code>count</code>等普通聚合函数，也可以为<code>rank</code>,<code>dense_rank</code>等排名函数。<br> <code>over</code>子句确定了窗口划分方法，也就是我们通常意义上说的<code>分组</code>,类似<code>group by</code>。</p>
<h3 id="窗口函数注意事项"><a href="#窗口函数注意事项" class="headerlink" title="窗口函数注意事项"></a>窗口函数注意事项</h3><h4 id="执行顺序"><a href="#执行顺序" class="headerlink" title="执行顺序"></a>执行顺序</h4><p>窗口函数在<code>GROUP BY</code>、<code>HAVING</code>、<code>WHERE</code>子句以及聚合函数之后、排序子句之前执行。因此只允许出现在查询的<code>SELECT</code>和<code>ORDER BY</code>子句中。</p>
<h3 id="窗口函数案例学习"><a href="#窗口函数案例学习" class="headerlink" title="窗口函数案例学习"></a>窗口函数案例学习</h3><p>下面用一些实际的使用场景来说明窗口函数的作用。</p>
<h4 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h4><p>先准备一些测试数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- postgresql创建自增序列和表结构</span></span><br><span class="line"><span class="keyword">CREATE</span> SEQUENCE employee_empno_seq <span class="keyword">START</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> employee_tbl (</span><br><span class="line">  empno int4 <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> nextval(<span class="string">&#x27;employee_empno_seq&#x27;</span>::regclass),</span><br><span class="line">  empname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  deptname <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">COLLATE</span> &quot;pg_catalog&quot;.&quot;default&quot;,</span><br><span class="line">  salary int4,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (&quot;empno&quot;)</span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 准备测试数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> employee_tbl(empno,deptname,empname,salary) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;s1&#x27;</span>,<span class="number">5000</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;personnel&#x27;</span>,<span class="string">&#x27;p1&#x27;</span>,<span class="number">3900</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;s2&#x27;</span>,<span class="number">4800</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="string">&#x27;sales&#x27;</span>,<span class="string">&#x27;s3&#x27;</span>,<span class="number">5000</span>),</span><br><span class="line">(<span class="number">5</span>,<span class="string">&#x27;personnel&#x27;</span>,<span class="string">&#x27;p2&#x27;</span>,<span class="number">3500</span>),</span><br><span class="line">(<span class="number">6</span>,<span class="string">&#x27;personnel&#x27;</span>,<span class="string">&#x27;p3&#x27;</span>,<span class="number">4100</span>),</span><br><span class="line">(<span class="number">7</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d1&#x27;</span>,<span class="number">4200</span>),</span><br><span class="line">(<span class="number">8</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d2&#x27;</span>,<span class="number">6000</span>),</span><br><span class="line">(<span class="number">9</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d3&#x27;</span>,<span class="number">4500</span>),</span><br><span class="line">(<span class="number">10</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d4&#x27;</span>,<span class="number">5200</span>),</span><br><span class="line">(<span class="number">11</span>,<span class="string">&#x27;develop&#x27;</span>,<span class="string">&#x27;d5&#x27;</span>,<span class="number">5200</span>);</span><br></pre></td></tr></table></figure>
<p>准备好的表数据如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary</span><br><span class="line">-------+---------+-----------+--------</span><br><span class="line">     1 | s1      | sales     |   5000</span><br><span class="line">     2 | p1      | personnel |   3900</span><br><span class="line">     3 | s2      | sales     |   4800</span><br><span class="line">     4 | s3      | sales     |   5000</span><br><span class="line">     5 | p2      | personnel |   3500</span><br><span class="line">     6 | p3      | personnel |   4100</span><br><span class="line">     7 | d1      | develop   |   4200</span><br><span class="line">     8 | d2      | develop   |   6000</span><br><span class="line">     9 | d3      | develop   |   4500</span><br><span class="line">    10 | d4      | develop   |   5200</span><br><span class="line">    11 | d5      | develop   |   5200</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>

<h4 id="统计员工工资和所在部门平均工资的差异百分比"><a href="#统计员工工资和所在部门平均工资的差异百分比" class="headerlink" title="统计员工工资和所在部门平均工资的差异百分比"></a>统计员工工资和所在部门平均工资的差异百分比</h4><p>使用窗口函数计算各部门平均工资：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname)) <span class="keyword">as</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary |      avg_salary</span><br><span class="line">-------+---------+-----------+--------+-----------------------</span><br><span class="line">     1 | s1      | sales     |   5000 | 4933.3333333333333333</span><br><span class="line">     2 | p1      | personnel |   3900 | 3833.3333333333333333</span><br><span class="line">     3 | s2      | sales     |   4800 | 4933.3333333333333333</span><br><span class="line">     4 | s3      | sales     |   5000 | 4933.3333333333333333</span><br><span class="line">     5 | p2      | personnel |   3500 | 3833.3333333333333333</span><br><span class="line">     6 | p3      | personnel |   4100 | 3833.3333333333333333</span><br><span class="line">     7 | d1      | develop   |   4200 | 5020.0000000000000000</span><br><span class="line">     8 | d2      | develop   |   6000 | 5020.0000000000000000</span><br><span class="line">     9 | d3      | develop   |   4500 | 5020.0000000000000000</span><br><span class="line">    10 | d4      | develop   |   5200 | 5020.0000000000000000</span><br><span class="line">    11 | d5      | develop   |   5200 | 5020.0000000000000000</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>对上述sql美化一下,把平均工资取整，再加上员工工资跟部门平均工资的差异比例（这里暂不考虑性能调优啥的）：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,(round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname))) <span class="keyword">as</span> avg_salary, round(((salary<span class="operator">/</span>(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname)))<span class="number">-1</span>), <span class="number">2</span>) <span class="keyword">as</span> diff_ratio </span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>最终得到结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | avg_salary | diff_ratio</span><br><span class="line">-------+---------+-----------+--------+------------+------------</span><br><span class="line">     1 | s1      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     2 | p1      | personnel |   3900 |       3833 |       0.02</span><br><span class="line">     3 | s2      | sales     |   4800 |       4933 |      -0.03</span><br><span class="line">     4 | s3      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     5 | p2      | personnel |   3500 |       3833 |      -0.09</span><br><span class="line">     6 | p3      | personnel |   4100 |       3833 |       0.07</span><br><span class="line">     7 | d1      | develop   |   4200 |       5020 |      -0.16</span><br><span class="line">     8 | d2      | develop   |   6000 |       5020 |       0.20</span><br><span class="line">     9 | d3      | develop   |   4500 |       5020 |      -0.10</span><br><span class="line">    10 | d4      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">    11 | d5      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>这样我们就能很直观的看到部门内每个员工工资相对平均工资的偏离情况了。<br>如果窗口函数的<code>over</code>子句括号内容为空，则表示把所有结果集作为一个分组来处理。例如，以下SQL可以在员工工资记录后追加一列“公司平均工资”：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span>()) <span class="keyword">as</span> avg_salary</span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>得到结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | avg_salary</span><br><span class="line">-------+---------+-----------+--------+------------</span><br><span class="line">     1 | s1      | sales     |   5000 |       4673</span><br><span class="line">     2 | p1      | personnel |   3900 |       4673</span><br><span class="line">     3 | s2      | sales     |   4800 |       4673</span><br><span class="line">     4 | s3      | sales     |   5000 |       4673</span><br><span class="line">     5 | p2      | personnel |   3500 |       4673</span><br><span class="line">     6 | p3      | personnel |   4100 |       4673</span><br><span class="line">     7 | d1      | develop   |   4200 |       4673</span><br><span class="line">     8 | d2      | develop   |   6000 |       4673</span><br><span class="line">     9 | d3      | develop   |   4500 |       4673</span><br><span class="line">    10 | d4      | develop   |   5200 |       4673</span><br><span class="line">    11 | d5      | develop   |   5200 |       4673</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>

<h4 id="按员工工资由高到低排名"><a href="#按员工工资由高到低排名" class="headerlink" title="按员工工资由高到低排名"></a>按员工工资由高到低排名</h4><p>先在全公司排名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, empname, deptname, salary, <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">from</span> employee_tbl;</span><br></pre></td></tr></table></figure>
<p>得到结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | rank</span><br><span class="line">-------+---------+-----------+--------+------</span><br><span class="line">     8 | d2      | develop   |   6000 |    1</span><br><span class="line">    11 | d5      | develop   |   5200 |    2</span><br><span class="line">    10 | d4      | develop   |   5200 |    2</span><br><span class="line">     1 | s1      | sales     |   5000 |    4</span><br><span class="line">     4 | s3      | sales     |   5000 |    4</span><br><span class="line">     3 | s2      | sales     |   4800 |    6</span><br><span class="line">     9 | d3      | develop   |   4500 |    7</span><br><span class="line">     7 | d1      | develop   |   4200 |    8</span><br><span class="line">     6 | p3      | personnel |   4100 |    9</span><br><span class="line">     2 | p1      | personnel |   3900 |   10</span><br><span class="line">     5 | p2      | personnel |   3500 |   11</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>接着在各自部门内排名：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno, empname, deptname, salary, <span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">from</span> employee_tbl;</span><br></pre></td></tr></table></figure>
<p>得到结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | rank</span><br><span class="line">-------+---------+-----------+--------+------</span><br><span class="line">     8 | d2      | develop   |   6000 |    1</span><br><span class="line">    11 | d5      | develop   |   5200 |    2</span><br><span class="line">    10 | d4      | develop   |   5200 |    2</span><br><span class="line">     9 | d3      | develop   |   4500 |    4</span><br><span class="line">     7 | d1      | develop   |   4200 |    5</span><br><span class="line">     6 | p3      | personnel |   4100 |    1</span><br><span class="line">     2 | p1      | personnel |   3900 |    2</span><br><span class="line">     5 | p2      | personnel |   3500 |    3</span><br><span class="line">     1 | s1      | sales     |   5000 |    1</span><br><span class="line">     4 | s3      | sales     |   5000 |    1</span><br><span class="line">     3 | s2      | sales     |   4800 |    3</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>观察上述两个案例中的<code>rank()</code>得到的排名，如果有并列第N名，则排名序号会不连续。比如上面示例，并列第2名后直接跳到了第4名，没有第3名。如果想要名次编号连续，可以换成<code>dense_rank()</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,<span class="built_in">dense_rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>) <span class="keyword">from</span> employee_tbl;</span><br></pre></td></tr></table></figure>
<p>得到结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | dense_rank</span><br><span class="line">-------+---------+-----------+--------+------------</span><br><span class="line">     8 | d2      | develop   |   6000 |          1</span><br><span class="line">    11 | d5      | develop   |   5200 |          2</span><br><span class="line">    10 | d4      | develop   |   5200 |          2</span><br><span class="line">     1 | s1      | sales     |   5000 |          3</span><br><span class="line">     4 | s3      | sales     |   5000 |          3</span><br><span class="line">     3 | s2      | sales     |   4800 |          4</span><br><span class="line">     9 | d3      | develop   |   4500 |          5</span><br><span class="line">     7 | d1      | develop   |   4200 |          6</span><br><span class="line">     6 | p3      | personnel |   4100 |          7</span><br><span class="line">     2 | p1      | personnel |   3900 |          8</span><br><span class="line">     5 | p2      | personnel |   3500 |          9</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>可见，使用<code>dense_rank()</code>后，并列第2名之后就是并列第3名。</p>
<h4 id="在员工工资记录后展示各部门工资总额列"><a href="#在员工工资记录后展示各部门工资总额列" class="headerlink" title="在员工工资记录后展示各部门工资总额列"></a>在员工工资记录后展示各部门工资总额列</h4><p>直接使用<code>sum()</code>聚合函数对应的窗口函数：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">sum</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname)) <span class="keyword">as</span> dept_total_salary <span class="keyword">from</span> employee_tbl <span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | dept_total_salary</span><br><span class="line">-------+---------+-----------+--------+-------------------</span><br><span class="line">     1 | s1      | sales     |   5000 |             14800</span><br><span class="line">     2 | p1      | personnel |   3900 |             11500</span><br><span class="line">     3 | s2      | sales     |   4800 |             14800</span><br><span class="line">     4 | s3      | sales     |   5000 |             14800</span><br><span class="line">     5 | p2      | personnel |   3500 |             11500</span><br><span class="line">     6 | p3      | personnel |   4100 |             11500</span><br><span class="line">     7 | d1      | develop   |   4200 |             25100</span><br><span class="line">     8 | d2      | develop   |   6000 |             25100</span><br><span class="line">     9 | d3      | develop   |   4500 |             25100</span><br><span class="line">    10 | d4      | develop   |   5200 |             25100</span><br><span class="line">    11 | d5      | develop   |   5200 |             25100</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>

<h4 id="在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列"><a href="#在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列" class="headerlink" title="在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列"></a>在员工工资记录后展示各部门截止当前员工记录行累加得到的工资总额列</h4><p>直接使用<code>sum()</code>聚合函数对应的窗口函数, 注意<code>over</code>子句要使用<code>order by</code>：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">sum</span>(salary) <span class="keyword">over</span>(<span class="keyword">partition</span> <span class="keyword">by</span> deptname <span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>)) <span class="keyword">as</span> dept_total_salary <span class="keyword">from</span> employee_tbl <span class="keyword">order</span> <span class="keyword">by</span> deptname <span class="keyword">asc</span>, empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | dept_total_salary</span><br><span class="line">-------+---------+-----------+--------+-------------------</span><br><span class="line">     7 | d1      | develop   |   4200 |              4200</span><br><span class="line">     8 | d2      | develop   |   6000 |             10200</span><br><span class="line">     9 | d3      | develop   |   4500 |             14700</span><br><span class="line">    10 | d4      | develop   |   5200 |             19900</span><br><span class="line">    11 | d5      | develop   |   5200 |             25100</span><br><span class="line">     2 | p1      | personnel |   3900 |              3900</span><br><span class="line">     5 | p2      | personnel |   3500 |              7400</span><br><span class="line">     6 | p3      | personnel |   4100 |             11500</span><br><span class="line">     1 | s1      | sales     |   5000 |              5000</span><br><span class="line">     3 | s2      | sales     |   4800 |              9800</span><br><span class="line">     4 | s3      | sales     |   5000 |             14800</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>这里需要特别注意一下，dept_total_salary是首先按部门分组，再对部门内员工记录按<code>empno</code>升序排序，然后累加计算组内(本例中即部门内)第一条记录到当前记录的工资得到的。</p>
<h4 id="获取工资前3高的员工"><a href="#获取工资前3高的员工" class="headerlink" title="获取工资前3高的员工"></a>获取工资前3高的员工</h4><p>需要先用窗口函数对员工按工资排序，然后排序号&lt;4的几条记录。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>)) <span class="keyword">as</span> pos <span class="keyword">from</span> employee_tbl</span><br><span class="line">) <span class="keyword">as</span> a <span class="keyword">where</span> a.pos <span class="operator">&lt;</span> <span class="number">4</span>;</span><br></pre></td></tr></table></figure>
<p>也可以根据需要取前3条记录:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> (</span><br><span class="line">  <span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>)) <span class="keyword">as</span> pos <span class="keyword">from</span> employee_tbl</span><br><span class="line">) <span class="keyword">as</span> a limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,salary,(<span class="built_in">rank</span>() <span class="keyword">over</span>(<span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">desc</span>)) <span class="keyword">as</span> pos <span class="keyword">from</span> employee_tbl limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure>

<h4 id="在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资"><a href="#在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资" class="headerlink" title="在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资"></a>在员工工资记录后展示所在部门截止当前员工记录的工资总额和平均工资</h4><p>这里需要两个窗口函数，可以复用<code>partition by xxx order by yyy</code>部分：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> empno,empname,deptname,(<span class="built_in">sum</span>(salary) <span class="keyword">over</span> w) <span class="keyword">as</span> dept_total_salary, round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span> w) <span class="keyword">as</span> avg_salary <span class="keyword">FROM</span> employee_tbl <span class="keyword">WINDOW</span> w <span class="keyword">as</span></span><br><span class="line">(<span class="keyword">partition</span> <span class="keyword">by</span> deptname <span class="keyword">order</span> <span class="keyword">by</span> salary <span class="keyword">asc</span>);</span><br></pre></td></tr></table></figure>
<p>结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | dept_total_salary | avg_salary</span><br><span class="line">-------+---------+-----------+-------------------+------------</span><br><span class="line">     7 | d1      | develop   |              4200 |       4200</span><br><span class="line">     9 | d3      | develop   |              8700 |       4350</span><br><span class="line">    10 | d4      | develop   |             19100 |       4775</span><br><span class="line">    11 | d5      | develop   |             19100 |       4775</span><br><span class="line">     8 | d2      | develop   |             25100 |       5020</span><br><span class="line">     5 | p2      | personnel |              3500 |       3500</span><br><span class="line">     2 | p1      | personnel |              7400 |       3700</span><br><span class="line">     6 | p3      | personnel |             11500 |       3833</span><br><span class="line">     3 | s2      | sales     |              4800 |       4800</span><br><span class="line">     1 | s1      | sales     |             14800 |       4933</span><br><span class="line">     4 | s3      | sales     |             14800 |       4933</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>
<p>吐槽一下，感觉这个需求好没意义，纯粹为了炫技。<br>同样的，开头计算部门平均工资以及员工工资和部门平均工资偏差比例的sql也可以稍微简化一下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> empno,empname,deptname,salary,round(<span class="built_in">avg</span>(salary) <span class="keyword">over</span> w) <span class="keyword">as</span> avg_salary, round(salary<span class="operator">/</span>(<span class="built_in">avg</span>(salary) <span class="keyword">over</span> w)<span class="number">-1</span>, <span class="number">2</span>) <span class="keyword">as</span> diff_ratio </span><br><span class="line"><span class="keyword">FROM</span> employee_tbl</span><br><span class="line"><span class="keyword">WINDOW</span> w <span class="keyword">as</span> (<span class="keyword">partition</span> <span class="keyword">by</span> deptname)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> empno <span class="keyword">asc</span>;</span><br></pre></td></tr></table></figure>
<p>执行结果跟原始语句相同：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> empno | empname | deptname  | salary | avg_salary | diff_ratio</span><br><span class="line">-------+---------+-----------+--------+------------+------------</span><br><span class="line">     1 | s1      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     2 | p1      | personnel |   3900 |       3833 |       0.02</span><br><span class="line">     3 | s2      | sales     |   4800 |       4933 |      -0.03</span><br><span class="line">     4 | s3      | sales     |   5000 |       4933 |       0.01</span><br><span class="line">     5 | p2      | personnel |   3500 |       3833 |      -0.09</span><br><span class="line">     6 | p3      | personnel |   4100 |       3833 |       0.07</span><br><span class="line">     7 | d1      | develop   |   4200 |       5020 |      -0.16</span><br><span class="line">     8 | d2      | develop   |   6000 |       5020 |       0.20</span><br><span class="line">     9 | d3      | develop   |   4500 |       5020 |      -0.10</span><br><span class="line">    10 | d4      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">    11 | d5      | develop   |   5200 |       5020 |       0.04</span><br><span class="line">(11 rows)</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>PostgreSQL</tag>
        <tag>Database</tag>
      </tags>
  </entry>
</search>
